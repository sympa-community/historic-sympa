#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# L. Marcotte has written a version of alias_manager.pl that is LDAP enabled
# check the contrib. page for more information :
# http://sympa.org/contrib.html

=encoding utf-8

=head1 NAME

alias_manager, alias_manager.pl - Manage Sympa Aliases

=head1 SYNOPSIS

S<B<alias_manager.pl> B<add> | B<del> I<listname> I<domain>>

=head1 DESCRIPTION

Alias_manager is a program that helps in installing aliases for newly
created lists and deleting aliases for closed lists. 

It is called by
L<wwsympa.fcgi(8)> or L<sympa.pl(8)> via the I<aliaswrapper>.
Alias management is performed only if it was setup in F<--CONFIG-->
(C<sendmail_aliases> configuration parameter).

Administrators using MTA functionalities to manage aliases (ie
virtual_regexp and transport_regexp with postfix) can disable alias
management by setting
C<sendmail_aliases> configuration parameter to B<none>.

=head1 OPTIONS

=over 4

=item B<add> I<listname> I<domain>

Add the set of aliases for the mailing list I<listname> in the
domain I<domain>.

=item B<del> I<listname> I<domain>

Remove the set of aliases for the mailing list I<listname> in the
domain I<domain>.

=back

=head1 FILES

F<--SENDMAIL_ALIASES--> sendmail aliases file.

=head1 DOCUMENTATION

The full documentation in HTML and PDF formats can be
found in L<http://www.sympa.org/manual/>. 

The mailing lists (with web archives) can be accessed at
http://listes.renater.fr/sympa/lists/informatique/sympa.

=head1 AUTHORS

=over 4

=item Serge Aumont

ComitE<233> RE<233>seau des UniversitE<233>s

=item Olivier SalaE<252>n

ComitE<233> RE<233>seau des UniversitE<233>s

=back

Contact authors at <sympa-authors@listes.renater.fr>

This manual page was initially written by
JE<233>rE<244>me Marant <jerome.marant@IDEALX.org>
for the Debian GNU/Linux system.

=head1 COPYRIGHT

Copyright E<169> 1997,1998,1999,2000,2001 ComitE<233> RE<233>seau des UniversitE<233>s

Copyright E<169> 1997,1998,1999 Institut Pasteur & Christophe Wolfhugel

You may distribute this software under the terms of the GNU General
Public License Version 2 (L<http://www.gnu.org/copyleft/gpl.html>)

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts and no Back-Cover Texts.  A
copy of the license can be found under
L<http://www.gnu.org/licenses/fdl.html>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<sendmail(8)>.

=cut

$ENV{'PATH'} = '';

use strict;
use warnings;
use lib '--modulesdir--';
use Getopt::Long;
use Pod::Usage;
use POSIX;

#use Conf; # load in Site - Robot
#use tools; # load in Conf - Robot
use tt2;

#use Sympa::Constants; # load in confdef - Conf
use Sympa::Robot;

my %options;
GetOptions(\%main::options, 'help|h');

if ($main::options{'help'}) {
    pod2usage(0);
}

unless (Site->load('no_db' => 1)) {
    printf STDERR
        "Unable to load Sympa configuration, file %s or any of the virtual host robot.conf files contain errors. Exiting.\n",
        Sympa::Conf::get_sympa_conf();
    exit 1;
}

Sympa::Log::Syslog::set_log_level(Site->log_level);
Sympa::Log::Syslog::do_openlog(Site->syslog, Site->log_socket_type,
    'alias_manager');

my $tmp_alias_file = Site->tmpdir . '/sympa_aliases.' . time;

my $default_domain;
my $alias_wrapper       = Sympa::Constants::SBINDIR . '/aliaswrapper';
my $lock_file           = Sympa::Constants::EXPLDIR . '/alias_manager.lock';
my $path_to_queue       = Sympa::Constants::LIBEXECDIR . '/queue';
my $path_to_bouncequeue = Sympa::Constants::LIBEXECDIR . '/bouncequeue';

my ($operation, $listname, $domain, $file) = @ARGV;

my $robot;

if (($operation !~ /^(add|del)$/) || ($#ARGV < 2)) {
    print STDERR "Usage: $0 <add|del> <listname> <robot> [<file>]\n";
    exit(2);
}

unless ($robot = Sympa::Robot->new($domain, 'no_db' => 1)) {
    printf STDERR "Unknown robot %s\n", $domain;
    exit(16);
}

$default_domain = Site->domain;

my $alias_file;
$alias_file = Site->sendmail_aliases || Sympa::Constants::SENDMAIL_ALIASES;
$alias_file = $file if ($file);

unless (-w "$alias_file") {
    print STDERR "Unable to access $alias_file\n";
    exit(5);
}

my %data;
$data{'date'} = &POSIX::strftime("%d %b %Y", localtime(time));
$data{'list'}{'domain'} = $data{'robot'} = $domain;
$data{'list'}{'name'}   = $listname;
$data{'default_domain'} = $default_domain;
$data{'is_default_domain'} = 1 if ($domain eq $default_domain);
$data{'return_path_suffix'} = $robot->return_path_suffix;

my @aliases;

my $tt2_include_path = $robot->get_etc_include_path();

my $aliases_dump;
&tt2::parse_tt2(\%data, 'list_aliases.tt2', \$aliases_dump,
    $tt2_include_path);

@aliases = split /\n/, $aliases_dump;

unless (@aliases) {
    print STDERR "No aliases defined\n";
    exit(15);
}

if ($operation eq 'add') {
    ## Create a lock
    unless (open(LF, ">>$lock_file")) {
        print STDERR "Can't open lock file $lock_file\n";
        exit(14);
    }
    flock LF, 2;

    ## Check existing aliases
    if (&already_defined(@aliases)) {
        print STDERR "some alias already exist\n";
        exit(13);
    }

    unless (open ALIAS, ">> $alias_file") {
        print STDERR "Unable to append to $alias_file\n";
        exit(5);
    }

    foreach my $alias (@aliases) {
        print ALIAS "$alias\n";
    }
    close ALIAS;

    ## Newaliases
    unless ($file) {
        unless (system($alias_wrapper) == 0) {
            print STDERR "Failed to execute newaliases: $!\n";
            exit(6);
        }
    }

    ## Unlock
    flock LF, 8;
    close LF;

} elsif ($operation eq 'del') {

    ## Create a lock
    open(LF, ">>$lock_file") || die "Can't open lock file $lock_file";
    flock LF, 2;

    unless (open ALIAS, "$alias_file") {
        print STDERR "Could not read $alias_file\n";
        exit(7);
    }

    unless (open NEWALIAS, ">$tmp_alias_file") {
        printf STDERR "Could not create %s\n", $tmp_alias_file;
        exit(8);
    }

    my @deleted_lines;
    while (my $alias = <ALIAS>) {
        my $left_side = '';
        $left_side = $1 if ($alias =~ /^([^\s:]+)[\s:]/);

        my $to_be_deleted = 0;
        foreach my $new_alias (@aliases) {
            next unless ($new_alias =~ /^([^\s:]+)[\s:]/);
            my $new_left_side = $1;

            if ($left_side eq $new_left_side) {
                push @deleted_lines, $alias;
                $to_be_deleted = 1;
                last;
            }
        }
        unless ($to_be_deleted) {
            ## append to new aliases file
            print NEWALIAS $alias;
        }
    }
    close ALIAS;
    close NEWALIAS;

    if ($#deleted_lines == -1) {
        print STDERR "No matching line in $alias_file\n";
        exit(9);
    }
    ## replace old aliases file
    unless (open NEWALIAS, "$tmp_alias_file") {
        print STDERR "Could not read $tmp_alias_file\n";
        exit(10);
    }

    unless (open OLDALIAS, ">$alias_file") {
        print STDERR "Could not overwrite $alias_file\n";
        exit(11);
    }
    print OLDALIAS <NEWALIAS>;
    close OLDALIAS;
    close NEWALIAS;
    unlink $tmp_alias_file;

    ## Newaliases
    unless ($file) {
        unless (system($alias_wrapper) == 0) {
            print STDERR "Failed to execute newaliases: $!\n";
            exit(6);
        }
    }
    ## Unlock
    flock LF, 8;
    close LF;

} else {
    print STDERR "Action $operation not implemented yet\n";
    exit(2);
}

exit 0;

## Check if an alias is already defined
sub already_defined {
    my @aliases = @_;

    unless (open ALIAS, "$alias_file") {
        printf STDERR "Could not read %s\n", $alias_file;
        exit(7);
    }

    while (my $alias = <ALIAS>) {

        # skip comment
        next if $alias =~ /^#/;
        $alias =~ /^([^\s:]+)[\s:]/;
        my $left_side = $1;
        next unless ($left_side);
        foreach (@aliases) {
            next unless ($_ =~ /^([^\s:]+)[\s:]/);
            my $new_left_side = $1;
            if ($left_side eq $new_left_side) {
                print STDERR "Alias already defined : $left_side\n";
                return 1;
            }
        }
    }

    close ALIAS;
    return 0;
}
