#!--PERL--

## This version of alias_manager.pl has been customized by Bea.
## It has the ability to add/remove list aliases in a MySQL database for vpopmail
## To make sympa use this script, you should install it as /home/sympa/bin/alias_manager.pl
## You should edit all the $mysql_xxx below to use your own mysql database

$ENV{'PATH'} = '';

## Load Sympa.conf
use strict;
use lib '--modulesdir--';
use DBI;
use POSIX;

#use Conf; # load in Site - Robot
#use tools; # load in Conf - Robot
use tt2;
#use Sympa::Constants; # load in confdef - Conf
use Robot;

unless (defined Site->load) {
    Log::fatal_err(
	'Unable to load sympa configuration, file %s or one of the virtual host robot.conf files contain errors. Exiting.',
	Conf::get_sympa_conf()
    );
}

Log::set_log_level(Site->log_level);
Log::do_openlog(Site->syslog, Site->log_socket_type, 'alias_manager');

## MYSQL configuration
my $mysql_host = "localhost";
my $mysql_base = "vpopmail";
my $mysql_user = "vpopmail";
my $mysql_pass = "password";

my $default_domain;

my ($operation, $listname, $domain, $file) = @ARGV;

my $robot;

my $dbh;
my $sql;
my $enr;

if (($operation !~ /^(add|del)$/) || ($#ARGV < 2)) {
    print STDERR "Usage: $0 <add|del> <listname> <robot> [<file>]\n";
    exit(2);
}

unless ($robot = Robot->new($domain)) {
    printf STDERR "Unknown robot %s\n", $domain;
    exit(16);
}

$default_domain = Site->domain;

my %data;
$data{'date'} =  &POSIX::strftime("%d %b %Y", localtime(time));
$data{'list'}{'domain'} = $data{'robot'} = $domain;
$data{'list'}{'name'} = $listname;
$data{'default_domain'} = $default_domain;
$data{'is_default_domain'} = 1 if ($domain eq $default_domain);
$data{'return_path_suffix'} = $robot->return_path_suffix;

my @aliases;

my $tt2_include_path = $robot->get_etc_include_path();

my $aliases_dump;
&tt2::parse_tt2 (\%data, 'list_aliases.tt2',\$aliases_dump, $tt2_include_path);

@aliases = split /\n/, $aliases_dump;

unless (@aliases) {
    print STDERR "No aliases defined\n";
    exit(15);
}

if ($operation eq 'add') {
    ## Check existing aliases
    if (&already_defined(@aliases)) {
	print STDERR "some alias already exist\n";
	exit(13);
    }

    if (!&initialize_mysql) {
	print STDERR "Can't connect to MySQL database\n";
	exit(14);
    }

    foreach my $alias (@aliases) {
	if ($alias =~ /^\#/) {
	    next;
	}
	
	$alias =~ /^([^:]+):\s*(\".*\")$/;
	my $alias_value = $1;
	my $command_value = $2;
	$command_value =~ s/\"//g;

	# We create the new mysql alias.
	unless (SDM::do_query(
	    q{INSERT INTO valias
	      SET alias = %s, domain = %s, valias_line = %s},
	    SDM::quote($alias_value), SDM::quote($domain),
	    SDM::quote($command_value)
	)) {
	    die $DBI::errstr;
	}
    }

    &finalize_mysql;

}elsif ($operation eq 'del') {
    
    if (!&initialize_mysql) {
	print STDERR "Can't connect to MySQL database\n";
	exit(7);
    }

    foreach my $alias (@aliases) {
	if ($alias =~ /^\#/) {
	    next;
	}

	$alias =~ /^([^:]+):/; 
	my $alias_value = $1;
	$alias_value =~ s/\+/\-/g;

	unless (SDM::do_query(
	    q{DELETE FROM valias
	      WHERE alias = %s and domain = %s},
	    SDM::quote($alias_value), SDM::quote($domain)
	)) {
	    die $DBI::errstr;
	}
    }

    &finalize_mysql;
}
else {
    print STDERR "Action $operation not implemented yet\n";
    exit(2);
}

exit 0;

## Check if an alias is already defined  
sub already_defined {
    
    my @aliases = @_;

    &initialize_mysql;

    foreach my $alias (@aliases) {
        if ($alias =~ /^\#/) {
	    next;
	}
	
	$alias =~ /^([^:]+):/; 
	my $alias_value = $1;
	$alias_value =~ s/\+/\-/g;	

	my $sth;
        unless ($sth = SDM::do_query(
	    q{SELECT COUNT(alias) as e_alias
	      FROM valias
	      WHERE alias = %s and domain = %s},
	    SDM::quote($alias_value), SDM::quote($domain)
	)) {
	    die $DBI::errstr;
	}

        $enr = $sth->fetchrow_array();
	if ($enr != 0) {
	    print STDERR "Alias already defined : $alias_value\n";
	    &finalize_mysql;
	    return 1;
	}
    }
    
    &finalize_mysql;
    return 0;
}

## Connect to MySQL Database
sub initialize_mysql {
##    unless ($dbh = DBI->connect("DBI:mysql:dbname=$mysql_base;host=$mysql_host", $mysql_user, $mysql_pass)) {
##        print "Can't connect to Database :", $DBI::errstr;
##	return 0
##    }
    return 1;
}

## Close the MySQL Connection
sub finalize_mysql {
    SDM::db_disconnect;
}

