#! --PERL--

# p12topem.pl - This script installs a List X509 cert and
# the associated private key in list directory
# Input is PKCS#12 file
# RCS Identication ; $Revision$ ; $Date$ 
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


use strict;
use lib '--modulesdir--';
use Getopt::Long;

#use Sympa::Constants; # used by Conf
#use Conf; # used in List - Robot - Site
use List;
#use SDM; # used by Conf

## Load sympa config
Site->load or die 'config_error';

## Probe Db if defined
if (Site->db_name and Site->db_type) {
    unless (SDM::probe_db()) {
	die sprintf 'Database %s defined in sympa.conf has not the right structure or is unreachable. If you don\'t use any database, comment db_xxx parameters in sympa.conf', Site->db_name;
    }
}

my $openssl = Site->openssl;
my $etc_sympa = Site->etc;
my $home_sympa = Site->home;
my $outpass = Site->key_passwd;
my $etc_dir = Site->etc;

## Check option
my %options;
&GetOptions(\%main::options, 'pkcs12=s','listname=s', 'robot=s', 'help|h');

$main::options{'foreground'} = 1;
my $listname = $main::options{'listname'};
my $robot_id = $main::options{'robot'};
my $p12input = $main::options{'pkcs12'};


my ($cert,$privatekey,$inpass,$key);

if ($main::options{'help'} or ! -r $p12input or ($listname and $robot_id)) {
    print_usage();
}else{
    if ($listname) {
	my $list = List->new($listname);
	unless ($list) {
	    printf "unknown list %s\n", $listname;
	    die;
	}
	$cert = $list->dir . '/cert.pem';
	$privatekey = $list->dir . '/private_key';
    } elsif ($robot_id) {
	my $robot = Robot->new($robot_id);
	unless ($robot) {
	    printf "unknown robot %s\n", $robot_id;
	    die;
	}
	$cert = $robot->etc . '/cert.pem';
	$privatekey = $robot->etc . '/private_key';
    }

    if (-r "$cert") {
	printf "certificate %s already exists\n", $cert;
	die;
    }
    if (-r "$privatekey") {
	printf "private key %s already exists\n", $privatekey;
	die;
    }
    
    unless ($openssl) {
	print "You must first configure Sympa to use openssl. Check the parameter openssl in sympa.conf\n";
	die;
    }
    
    system 'stty', '-echo';
    printf "password to access to %s :", $p12input;
    chop($inpass = <STDIN>);
    print "\n";
    system 'stty', 'echo';
    open  PASS, "| $openssl pkcs12 -in $p12input -out $cert -nokeys -clcerts -passin stdin";
    print PASS "$inpass\n";
    close PASS;
    
    unless ($outpass) {
	system 'stty', '-echo';
	printf "sympa password to protect list private key %s:", $key;
	chop($outpass = <STDIN>);
	print "\n";
	system 'stty', 'echo';
    }
    open  PASS, "| $openssl pkcs12 -in $p12input -out $privatekey -nocerts -passin stdin -des3 -passout stdin";
    print PASS "$inpass\n$outpass\n";
    close PASS;
    
    printf "private key %s and certificate %s were created.\n", $privatekey, $cert;
    exit;
}

sub print_usage {
print <<"EOF";

Usage p12topem.pl --pkcs12 <pkcs#12_cert_file> --listname <listname> or
      p12topem.pl --pkcs12 <pkcs#12_cert_file> --robot <robot>

This script is intended to convert a PKCS#12 certificates in PEM format
using Openssl. This is usefull because most PKI providerd deliver certificates
using a web interface so the certificat is stored in your browser.

When exporting a certificate from a browser (Netscape, IE, Mozilla etc)
the result is stored using PKCS#12 format.Sympa requires a pair of PEM
certificat and private key. You must then convert your pkcs#12 into PEM. 

For a list certificat, the file will be installed in
$home_sympa/<listname>/cert.pem and $home_sympa/<listname>/private_key

For Sympa itself a certificate will be installed in 
$etc_sympa/<robot>/cert.pem and  $etc_sympa/<robot>/private_key or
$etc_sympa/cert.pem and $etc_sympa/private_key


You are then prompted for inpassword (the password used to encrypt the
pkc#12 file).
EOF

    unless ($outpass) {
	print <<"EOF";
Because you did not configure Sympa's password \"key_passwd\" in
sympa.conf you will also be prompted for the password used by sympa to access
to the list private key)
EOF
    } 
}
