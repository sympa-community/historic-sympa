#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use lib '--modulesdir--';

#use wwslib; # no longer used
use Sympa::Conf;
use Language;
use tt2;
use Sympa::Constants;
use List;
use Log;

my %options;

$| = 1;

## Check UID
#unless (getlogin() eq Sympa::Constants::USER) {
#    print "You should run this script as user \"sympa\", ignore ? (y/CR)";
#    my $s = <STDIN>;
#    die unless ($s =~ /^y$/i);
#}

## Load sympa config
Site->load or die 'config_error';

if (Site->db_name and Site->db_type) {
    unless (SDM::check_db_connect('just_try') and SDM::probe_db()) {
        die sprintf
            'Database %s defined in sympa.conf has not the right structure or is unreachable. If you don\'t use any database, comment db_xxx parameters in sympa.conf',
            Site->db_name;
    }
}

## We have a parameter that should be a template to convert
## Output is sent to stdout
if ($#ARGV >= 0) {
    my $f = $ARGV[0];
    unless (-f $f) {
        die "unable to find file $f";
    }

    &convert($f);

    exit 0;
}

## Default is to migrate every template to the new TT2 format

my @directories;
my @templates;
my $sympa_etc = Site->etc;

## Search in main robot
if (-d Site->etc) {
    push @directories, Site->etc;
}
if (-d Site->etc . '/templates') {
    push @directories, Site->etc . '/templates';
}
if (-d Site->etc . '/wws_templates') {
    push @directories, Site->etc . '/wws_templates';
}
if (-f Site->etc . '/mhonarc-ressources') {
    push @templates, Site->etc . '/mhonarc-ressources';
}

## Create_list_templates
if (-d "$sympa_etc/create_list_templates") {
    foreach my $dir (<$sympa_etc/create_list_templates/*>) {
        next unless -d $dir;
        push @directories, $dir;
    }
}

## Go through Virtual Robots
foreach my $robot (@{Robot::get_robots()}) {
    my $robot_etc = $robot->etc;

    ## Search in etc/
    if (-d $robot->etc) {
        push @directories, $robot->etc;
    }
    if (-d $robot->etc . '/templates') {
        push @directories, $robot->etc . '/templates';
    }
    if (-d $robot->etc . '/wws_templates') {
        push @directories, $robot->etc . '/wws_templates';
    }
    if (-f $robot->etc . '/mhonarc-ressources') {
        push @templates, $robot->etc . '/mhonarc-ressources';
    }

    ## Create_list_templates
    if (-d $robot_etc . '/create_list_templates') {
        foreach my $dir (<$robot_etc/create_list_templates/*>) {
            next unless -d $dir;
            push @directories, $dir;
        }
    }

    ## Search in V. Robot Lists
    my $listOfLists = List::get_lists($robot);
    foreach my $list (@$listOfLists) {
        push @directories, $list->dir;

        if (-d $list->dir . '/templates') {
            push @directories, $list->dir . '/templates';
        }
        if (-d $list->dir . '/wws_templates') {
            push @directories, $list->dir . '/wws_templates';
        }
    }
}

## List .tpl files
foreach my $d (@directories) {
    unless (opendir DIR, $d) {
        printf STDERR "Error: Cannot read %s directory : %s\n", $d, $!;
        next;
    }

    foreach my $tpl (sort grep(/\.tpl$/, readdir DIR)) {
        push @templates, "$d/$tpl";
    }

    closedir DIR;
}

my $total;
foreach my $tpl (@templates) {

    ## We don't migrate mhonarc-ressources files
    if ($tpl =~ /mhonarc\-ressources$/) {
        rename $tpl, "$tpl.incompatible";
        printf STDERR
            "File %s could not be translated to TT2 ; it has been renamed %s.incompatible. You should customize a standard mhonarc-ressourses.tt2 file\n",
            $tpl, $tpl;
        next;
    }

    unless (-r $tpl) {
        printf STDERR "Error : Unable to read file %s\n", $tpl;
        next;
    }

    unless ($tpl =~ /^(.+)\/([^\/]+)$/) {
        printf STDERR "Error : Incorrect Path %s\n", $tpl;
        next;
    }

    my ($path, $file) = ($1, $2);
    my ($dest_path, $dest_file);

    ## Destinatination Path
    $dest_path = $path;
    if ($path =~ /\/wws_templates$/) {
        ## translated web templates should not be used because they
        ## will not fit the new CSS/XHTML web structure
        $dest_path =~ s/wws_templates/web_tt2.old/;
    } elsif ($path =~ /\/templates$/) {
        $dest_path =~ s/templates/mail_tt2/;
    } elsif ($path =~ /\/expl\//) {
        $dest_path .= '/mail_tt2';
    } else {
        $dest_path = $path;
    }

    ## Destination filename
    $dest_file = $file;
    $dest_file =~ s/\.tpl$/\.tt2/;

    ## Localized template
    if ($dest_file =~ /^([\w\-]+)\.(\w+)\.tt2$/) {
        my $lang = $2;
        $dest_file =~ s/^([\w\-]+)\.(\w+)\.tt2$/$1\.tt2/;
        $dest_path .= '/' . Language::Lang2Locale($lang);
    }

    ## If file has no extension
    unless ($dest_file =~ /\./) {
        $dest_file = $file . '.tt2';
    }

    ## Create directory if required
    unless (-d $dest_path) {
        print "Creating $dest_path directory\n";
        unless (&my_mkdir($dest_path)) {
            print STDERR "Error : Cannot create $dest_path directory : $!\n";
            next;
        }
        unless (
            &tools::set_file_rights(
                file  => $dest_path,
                user  => Sympa::Constants::USER,
                group => Sympa::Constants::GROUP,
                mode  => 0755,
            )
            ) {
            Sympa::Log::Syslog::do_log('err', 'Unable to set rights on %s',
                Site->db_name);
            next;
        }
    }

    my $tt2 = "$dest_path/$dest_file";

    &convert($tpl, $tt2);
    $total++;

    ## Rename old files to .converted
    unless (rename $tpl, "$tpl.converted") {
        printf STDERR "Error : failed to rename %s to %s.converted : %s\n",
            $tpl, $tpl, $!;
        next;
    }
}

print "\n$total template files have been converted\n";

## Convert a template file to tt2
sub convert {
    my ($in_file, $out_file) = @_;

    ## Convert tpl file
    unless (open TPL, $in_file) {
        print STDERR "Cannot open $in_file : $!\n";
        return undef;
    }
    if ($out_file) {
        unless (open TT2, ">$out_file") {
            print STDERR "Cannot create $out_file : $!\n";
            return undef;
        }
    }

    while (<TPL>) {
        if ($out_file) {
            print TT2 Sympa::Template::Compat::_translate($_);
        } else {
            print STDOUT Sympa::Template::Compat::_translate($_);
        }
    }
    close TT2 if ($out_file);
    close TPL;

    print "Template file $in_file has been converted to $out_file\n";

    unless (
        &tools::set_file_rights(
            file  => $out_file,
            user  => Sympa::Constants::USER,
            group => Sympa::Constants::GROUP
        )
        ) {
        Sympa::Log::Syslog::do_log('err', 'Unable to set rights on %s',
            $Conf{'db_name'});
        return undef;
    }
}

## Create root folders if required
sub my_mkdir {
    my $path = shift;
    $path =~ s/\/$//;

    unless ($path) {
        return undef;
    }

    if ($path =~ /^(.*)\/[^\/]+$/) {
        my $root_path = $1;

        unless (-d $root_path) {
            unless (mkdir($root_path, 0777)) {
                printf STDERR "Error : Cannot create directory %s : %s\n",
                    $root_path, $!;
                return undef;
            }
        }

        unless (mkdir($path, 0777)) {
            printf STDERR "Error : Cannot create directory %s : %s\n", $path,
                $!;
            return undef;
        }
    } else {
        return undef;
    }

    return 1;
}
