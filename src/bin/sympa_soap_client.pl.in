#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

sympa_soap_client.pl

=head1 SYNOPSIS

B<sympa_soap_client.pl>
    B<--soap_url>=I<URL> 
    B<--service>=I<service>
    B<--trusted_application>=I<app name>
    B<--trusted_application_password>=I<password>
    B<--proxy_vars>=I<id=value,id2=value2>
    B<--service_parameters>=I<value1,value2,value3>

B<sympa_soap_client.pl>
    B<--soap_url>=I<URL> 
    B<--service>=I<service>
    B<--user_email>=I<email>
    B<--user_password>=I<password>
    B<--session_id>=I<session ID>
    B<--service_parameters>=I<value1,value2,value3>

B<sympa_soap_client.pl>
    B<--soap_url>=I<URL>
    B<--cookie>=I<cookie>

=head1 EXAMPLES

B<sympa_soap_client.pl> --soap_url=https://sympa.domain.tld --cookie=sympauser=someone\@cru.fr

=head1 DESCRIPTION

sympa_soap_client.pl is a Perl SOAP client for Sympa for TEST ONLY. Use it to
illustrate how to code access to features of Sympa SOAP server. Authentication
can be done via user/password or user cookie or as a trusted remote application

=cut

use strict;
use lib '--modulesdir--';

use Getopt::Long;
use HTTP::Cookies;
use Pod::Usage;
use SOAP::Lite;

use Sympa::Tools::Data;

my ($reponse, @ret, $val, %fault);


my %options;
unless (
    GetOptions(
        \%options,
        'soap_url=s',
        'service=s',
        'trusted_application=s',
        'trusted_application_password=s',
        'user_email=s',
        'user_password=s',
        'cookie=s',
        'proxy_vars=s',
        'service_parameters=s',
        'session_id=s',
        'help|h'
    )
    ) {
        pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($options{'help'}) {
    pod2usage(0);
}

my $soap_url = $options{'soap_url'};
unless ($soap_url) {
    pod2usage(
        -message => "missing soap_url parameter\n",
        -exitval => 1,
    );
}

my $user_email          = $options{'user_email'};
my $user_password       = $options{'user_password'};
my $session_id          = $options{'session_id'};
my $trusted_application = $options{'trusted_application'};
my $trusted_application_password =
    $options{'trusted_application_password'};
my $proxy_vars         = $options{'proxy_vars'};
my $service            = $options{'service'};
my $service_parameters = $options{'service_parameters'};
my $cookie             = $options{'cookie'};

if (defined $trusted_application) {
    unless (defined $trusted_application_password) {
        pod2usage(
            -message => "missing trusted_application_password parameter\n",
            -exitval => 1,
        );
    }
    unless (defined $service) {
        pod2usage(
            -message => "missing service parameter\n",
            -exitval => 1,
        );
    }
    unless (defined $proxy_vars) {
        pod2usage(
            -message => "missing proxy_vars parameter\n",
            -exitval => 1,
        );
    }

    play_soap_as_trusted($soap_url, $trusted_application,
        $trusted_application_password, $service, $proxy_vars,
        $service_parameters);
} elsif ($service eq 'getUserEmailByCookie') {
    play_soap(
        soap_url   => $soap_url,
        session_id => $session_id,
        service    => $service
    );

} elsif (defined $cookie) {
    print "error : get_email_cookie\n";
    get_email($soap_url, $cookie);
    exit;
} else {
    unless (defined $session_id
        || (defined $user_email && defined $user_password)) {
        pod2usage(
            -message => "missing session_id OR user_email+user_passwors  parameters\n",
            -exitval => 1,
        );
    }

    play_soap(
        soap_url           => $soap_url,
        user_email         => $user_email,
        user_password      => $user_password,
        session_id         => $session_id,
        service            => $service,
        service_parameters => $service_parameters
    );
}

sub play_soap_as_trusted {
    my $soap_url                     = shift;
    my $trusted_application          = shift;
    my $trusted_application_password = shift;
    my $service                      = shift;
    my $proxy_vars                   = shift;
    my $service_parameters           = shift;

    my $soap = SOAP::Lite->new();
    $soap->uri('urn:sympasoap');
    $soap->proxy($soap_url);

    my @parameters;
    @parameters = split(/,/, $service_parameters)
        if (defined $service_parameters);
    my $p = join(',', @parameters);
    print
        "calling authenticateRemoteAppAndRun( $trusted_application, $trusted_application_password, $proxy_vars,$service,$p)\n";

    my $reponse =
        $soap->authenticateRemoteAppAndRun($trusted_application,
        $trusted_application_password, $proxy_vars, $service, \@parameters);
    print_result($reponse);
}

sub get_email {
    my $soap_url = shift;
    my $cookie   = shift;

    my ($service, $reponse, @ret, $val, %fault);

    ## Cookies management
    # my $uri = URI->new($soap_url);

    #    my $cookies = HTTP::Cookies->new(ignore_discard => 1,
    #				     file => '/tmp/my_cookies' );
    #    $cookies->load();
    printf "cookie : %s\n", $cookie;

    my $soap = SOAP::Lite->new();

    #$soap->on_debug(sub{print@_});
    $soap->uri('urn:sympasoap');
    $soap->proxy($soap_url);

    #,		 cookie_jar =>$cookies);

    print "\n\ngetEmailUserByCookie....\n";
    $reponse = $soap->getUserEmailByCookie($cookie);
    print_result($reponse);
    exit;

}

sub play_soap {
    my %param = @_;

    my $soap_url           = $param{'soap_url'};
    my $user_email         = $param{'user_email'};
    my $user_password      = $param{'user_password'};
    my $session_id         = $param{'session_id'};
    my $service            = $param{'service'};
    my $service_parameters = $param{'service_parameters'};

    my ($reponse, @ret, $val, %fault);

    ## Cookies management
    # my $uri = URI->new($soap_url);

    my $cookies = HTTP::Cookies->new(
        ignore_discard => 1,
        file           => '/tmp/my_cookies'
    );
    $cookies->load();
    printf "cookie : %s\n", $cookies->as_string();

    my @parameters;
    @parameters = split(/,/, $service_parameters)
        if (defined $service_parameters);
    my $p = join(',', @parameters);
    foreach my $tmpParam (@parameters) {
        printf "param: %s\n", $tmpParam;
    }

    # Change to the path of Sympa.wsdl
    #$service = SOAP::Lite->service($soap_url);
    #$reponse = $service->login($user_email,$user_password);
    #my $soap = SOAP::Lite->service($soap_url);

    my $soap = SOAP::Lite->new() || die;

    #$soap->on_debug(sub{print@_});
    $soap->uri('urn:sympasoap');
    $soap->proxy($soap_url, cookie_jar => $cookies);

    ## Do the login unless a session_id is provided
    if ($session_id) {
        print "Using Session_id $session_id\n";

    } else {
        print "LOGIN....\n";

        #$reponse = $soap->casLogin($soap_url);
        $reponse = $soap->login($user_email, $user_password);
        $cookies->save;
        print_result($reponse);
        $session_id = $reponse->result;
    }

    ## Don't use authenticateAndRun for lists command

    ## Split parameters
    @parameters = split /,/, $service_parameters;

    if ($service eq 'lists') {
        print "\n\nlists....\n";
        $reponse = $soap->lists();

    } elsif ($service eq 'subscribe') {
        print "\n\n$service....\n";
        $reponse = $soap->subscribe(@parameters);

    } elsif ($service eq 'signoff') {
        print "\n\n$service....\n";
        $reponse = $soap->signoff(@parameters);

    } elsif ($service eq 'add') {
        print "\n\n$service....\n";
        $reponse = $soap->add(@parameters);

    } elsif ($service eq 'del') {
        print "\n\n$service....\n";
        $reponse = $soap->del(@parameters);

    } elsif ($service eq 'getUserEmailByCookie') {
        print "\n\n$service....\n";
        $reponse = $soap->getUserEmailByCookie($session_id);

    } else {
        printf "\n\nAuthenticateAndRun service=%s;(session_id=%s)....\n",
            $service, $session_id;
        $reponse =
            $soap->authenticateAndRun($user_email, $session_id, $service,
            \@parameters);
    }

    print_result($reponse);

}

sub print_result {
    my $r = shift;

    # If we get a fault
    if (defined $r && $r->fault) {
        print "Soap error :\n";
        my %fault = %{$r->fault};
        foreach $val (keys %fault) {
            print "$val = $fault{$val}\n";
        }
    } else {
        if (ref($r->result) =~ /^ARRAY/) {

            #printf "R: %s\n", $r->result;
            @ret = @{$r->result};
        } elsif (ref $r->result) {
            print "Pb " . ($r->result) . "\n";
            return undef;
        } else {
            @ret = $r->result;
        }
        Sympa::Tools::Data::dump_var(\@ret, 0, \*STDOUT);
    }

    return 1;
}
