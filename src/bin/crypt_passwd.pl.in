#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use lib '--modulesdir--';

unless (require Crypt::CipherSaber) {
    die "Crypt::CipherSaber not installed ; cannot crypt passwords";
}

#use Sympa::Wwslib; # not used
#use Sympa::Constants; # used in List - Robot - Site - Conf - confdef
#require Sympa::Tools; # used by Conf
use Sympa::List;

#use Sympa::DatabaseManager; # used by conf
#use Sympa::Log::Syslog; # used by conf

## Load sympa config
Sympa::Site->load or die 'config_error';

Sympa::Site->home;

Sympa::DatabaseManager::check_db_connect('just_try') or die "Can't connect to database";

print "Searching uncrypted passwords\n";

my $sth = Sympa::DatabaseManager::do_query(
    q{SELECT email_user, password_user
      FROM user_table
      WHERE password_user NOT LIKE 'crypt.%'}
) or die 'Unable to execute SQL statement';

my $user;

my $count = 0;

while ($user = $sth->fetchrow_hashref('NAME_lc')) {
    next unless $user->{'password_user'};

    printf "\n%s", $user->{'email_user'};

    my $crypted_password = Sympa::Tools::crypt_password($user->{'password_user'});

    printf " => %s", $crypted_password;

    my $sth2 = Sympa::DatabaseManager::do_prepared_query(
        q{UPDATE user_table
	  SET password_user = ?
	  WHERE email_user = ?},
        $crypted_password, $user->{'email_user'}
    ) or die "Unable to execute SQL statement";
    $sth2->finish();

    $count++;
}

$sth->finish();

## Disconnect from Database
Sympa::DatabaseManager::db_disconnect();

printf "Encrypted %d passwords\n", $count;
