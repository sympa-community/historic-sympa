#! --PERL--
# -*- indent-tabs-mode: t; -*-
# vim:ft=perl:noet:sw=8:textwidth=78

# crypt_passwd.pl - This script crypts uncrypted passwords in DB
# RCS Identication ; $Revision$ ; $Date$
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use strict;
use lib '--modulesdir--';

use English qw(-no_match_vars);

use Sympa::Configuration;
use Sympa::Constants;
use Sympa::Database;
use Sympa::Tools::Password;

eval {
	require Crypt::CipherSaber;
};
die "Crypt::CipherSaber not installed ; cannot crypt passwords" if $EVAL_ERROR;

## Load sympa config
Sympa::Configuration::load(Sympa::Constants::CONFIG) || die 'config_error';

chdir $Sympa::Configuration::Conf{'home'};

Sympa::Database::db_connect() || die "Can't connect to database";

my $base = Sympa::Database->get_singleton();

print "Searching uncrypted passwords\n";

my $select_handle = $base->get_query_handle(
	"SELECT email_user, password_user FROM user_table WHERE (password_user not like 'crypt.%')"
) || die "Can't prepare SQL statement";

$select_handle->execute() || die "Unable to execute SQL statement";

my $update_handle = $base->get_query_handle(
	"UPDATE user_table SET password_user=? WHERE (email_user=?)"
) || die "Can't prepare SQL statement";

my $user;

my $count = 0;

while ($user = $select_handle->fetchrow_hashref('NAME_lc')) {
	next unless $user->{'password_user'};

	printf "\n%s", $user->{'email_user'};

	my $crypted_password = Sympa::Tools::Password::crypt_password($user->{'password_user'}, $Sympa::Configuration::Conf{'cookie'});

	printf " => %s", $crypted_password;

	$update_handle->execute($crypted_password, $user->{'email_user'})
		|| die "Unable to execute SQL statement";

	$count++;
}

$select_handle->finish();
$update_handle->finish();

## Disconnect from Database
$base->disconnect();

printf "Crypted %d passwords\n", $count;
