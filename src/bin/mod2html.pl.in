#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4:textwidth=78
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Until Sympa release 3.4.3.1 HTML view of moderated messages was created by
## wwsympa.fgci, when needed.
## It is now created by sympa.pl when the message is received.
## This script will create all missing HTML files in the moderation spool

use lib '--modulesdir--';
use Conf;    # to load Sympa conf which is needed by List.pm
use List;
use Log;     # if you want to get logs of List.pm
use Sympa::Constants;

unless (Conf::load(Sympa::Constants::CONFIG)) {
    die "Can't load Sympa configuration file";
}
Sympa::Log::Syslog::do_openlog($Conf{'syslog'}, $Conf{'log_socket_type'},
    'sympa');

if ($Conf{'db_name'} and $Conf{'db_type'}) {
    unless (SDM::probe_db()) {
        die "Sympa can't connect to database";
    }
}    #  to check availabity of Sympa database

# Set the UserID & GroupID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

# Sets the UMASK
umask(oct($Conf{'umask'}));

## Loads message list
unless (opendir SPOOL, $Conf{'queuemod'}) {
    die "Unable to read spool";
}

foreach $msg (sort grep(!/^\./, readdir SPOOL)) {

    next if ($msg =~ /^\./);

    $msg =~ /^(.*)\_([^\_]+)$/;
    my ($listaddress, $modkey) = ($1, $2);

    if (-d "$Conf{'queuemod'}/.$msg") {
        next;
    }

    print "Creating HTML version for $Conf{'queuemod'}/$msg\n";

    my ($listname, $listrobot) = split /\@/, $listaddress;
    my $self = new List($listname, $listrobot);

    my (@rcpt);
    my $admin    = $self->{'admin'};
    my $name     = $self->{'name'};
    my $host     = $admin->{'host'};
    my $robot    = $self->{'domain'};
    my $modqueue = $Conf{'queuemod'};
    unless ($name && $admin) {
        print STDERR "Unknown list $listaddress, skipping\n";
        next;
    }

    my $tmp_dir = "$modqueue\/.$name\_$modkey";
    unless (-d $tmp_dir) {
        unless (mkdir($tmp_dir, 0777)) {
            die "May not create $tmp_dir";
        }
        my $mhonarc_ressources =
            &tools::get_filename('etc', {}, 'mhonarc-ressources.tt2', $robot,
            $self);
        unless ($mhonarc_ressources) {
            die "Cannot find any templates of MHonArc resource file";
        }

        ## generate HTML
        chdir $tmp_dir;
        my $mhonarc = &Conf::get_robot_conf($robot, 'mhonarc');
        open ARCMOD,
            "$mhonarc  -single -rcfile $mhonarc_ressources -definevars listname=$name -definevars hostname=$host $modqueue/$name\_$modkey|";
        open MSG, ">msg00000.html";
        print MSG <ARCMOD>;
        close MSG;
        close ARCMOD;
        chdir $Conf{'home'};
    }
}
closedir SPOOL;
