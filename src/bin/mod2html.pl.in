#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

## Until Sympa release 3.4.3.1 HTML view of moderated messages was created by
## wwsympa.fgci, when needed.
## It is now created by sympa.pl when the message is received.
## This script will create all missing HTML files in the moderation spool

use lib '--modulesdir--';
use strict;
use warnings;

use Conf;
use Sympa::Constants;
use List;
use Log;
use SDM;
use tools;

unless (Conf::load(Sympa::Constants::CONFIG)) {
    die "Can't load Sympa configuration file";
}
Log::do_openlog($Conf::Conf{'syslog'}, $Conf::Conf{'log_socket_type'},
    'sympa');

if ($Conf::Conf{'db_name'} and $Conf::Conf{'db_type'}) {
    unless (SDM::probe_db()) {
        die "Sympa can't connect to database";
    }
}    #  to check availabity of Sympa database

# Set the UserID & GroupID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

# Sets the UMASK
umask(oct($Conf::Conf{'umask'}));

## Loads message list
unless (opendir SPOOL, $Conf::Conf{'queuemod'}) {
    die "Unable to read spool";
}

foreach my $msg (sort grep(!/^\./, readdir SPOOL)) {
    next if ($msg =~ /^\./);

    $msg =~ /^(.*)\_([^\_]+)$/;
    my ($listaddress, $modkey) = ($1, $2);

    if (-d "$Conf::Conf{'queuemod'}/.$msg") {
        next;
    }

    print "Creating HTML version for $Conf::Conf{'queuemod'}/$msg\n";

    my ($listname, $listrobot) = split /\@/, $listaddress;
    my $self = List->new($listname, $listrobot);

    my (@rcpt);
    my $admin    = $self->{'admin'};
    my $name     = $self->{'name'};
    my $host     = $admin->{'host'};
    my $robot    = $self->{'domain'};
    my $modqueue = $Conf::Conf{'queuemod'};
    unless ($name && $admin) {
        print STDERR "Unkown list $listaddress, skipping\n";
        next;
    }

    my $tmp_dir = "$modqueue\/.$name\_$modkey";
    unless (-d $tmp_dir) {
        unless (mkdir($tmp_dir, 0777)) {
            die "May not create $tmp_dir";
        }
        my $mhonarc_ressources =
            tools::search_fullpath($self, 'mhonarc-ressources.tt2');
        unless ($mhonarc_ressources) {
            die "Cannot find any MhOnArc ressource file";
        }

        ## generate HTML
        chdir $tmp_dir;
        my $saveout;
        unless (open $saveout, '>&STDOUT'
            and open STDOUT, '>', 'msg00000.html') {
            die sprintf 'Could not open %s/msg00000.html: %s', $tmp_dir, $!;
        }
        system(
            Conf::get_robot_conf($robot, 'mhonarc'),
            '-single',
            '-rcfile'     => $mhonarc_ressources,
            '-definevars' => "listname='$name' hostname=$host",
            "$modqueue/${name}_$modkey"
        );
        open STDOUT, '>&', $saveout;
        chdir $Conf::Conf{'home'};
    }
}
closedir SPOOL;
