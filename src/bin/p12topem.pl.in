#! --PERL--
# -*- indent-tabs-mode: t; -*-
# vim:ft=perl:noet:sw=8:wrap:textwidth=78

# p12topem.pl - This script installs a List X509 cert and
# the associated private key in list directory
# Input is PKCS#12 file
# RCS Identication ; $Revision$ ; $Date$
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

=head1 NAME

p12toppem.pl - FIXME

=head1 SYNOPSIS

  p12topem.pl --pkcs12=<file> --listname <listname>
  p12topem.pl --pkcs12=<file> --robot <robot>

=head1 DESCRIPTION

This script is intended to convert a PKCS#12 certificates in PEM format
using Openssl. This is usefull because most PKI providerd deliver certificates
using a web interface so the certificat is stored in your browser.

When exporting a certificate from a browser (Netscape, IE, Mozilla etc)
the result is stored using PKCS#12 format.Sympa requires a pair of PEM
certificat and private key. You must then convert your pkcs#12 into PEM.

=cut

use strict;
use lib '--modulesdir--';

use Getopt::Long;
use Pod::Usage;

use Sympa::Configuration;
use Sympa::Constants;
use Sympa::List;
use Sympa::Upgrade;

my $sympa_conf_file = Sympa::Constants::CONFIG;

## Load sympa config
unless (Sympa::Configuration::load($sympa_conf_file)) {
    die 'config_error';
}

## Probe Db if defined
if ($Sympa::Configuration::Conf{'db_name'} and $Sympa::Configuration::Conf{'db_type'}) {
    unless (Sympa::Upgrade::probe_db()) {
	die('Database %s defined in sympa.conf has not the right structure or is unreachable. If you don\'t use any database, comment db_xxx parameters in sympa.conf', $Sympa::Configuration::Conf{'db_name'});
    }
}

## Apply defaults to %Sympa::List::pinfo
Sympa::List::_apply_defaults();

my $openssl = $Sympa::Configuration::Conf{'openssl'};
my $home_sympa = $Sympa::Configuration::Conf{'home'};
my $outpass = $Sympa::Configuration::Conf{'key_passwd'};
my $etc_dir = $Sympa::Configuration::Conf{'etc'};

## Check option
my %options;
GetOptions(
	\%options,
	'pkcs12=s',
	'listname=s',
	'robot=s',
	'help|h'
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options{help};

$options{'foreground'} = 1;
my $listname = $options{'listname'};
my $robot = $options{'robot'};
my $p12input = $options{'pkcs12'};


my ($cert,$privatekey,$inpass,$key);

if ($listname) {
    my $self = new Sympa::List($listname, $robot);
    $cert = $self->{'dir'}.'/cert.pem';
    $privatekey = $self->{'dir'}.'/private_key';
    unless (-d $self->{'dir'}) {
	printf "unknown list $listname (directory $self->{'dir'} not found)\n";
	die;
    }
}elsif($robot) {
    if (-d $Sympa::Configuration::Conf{'etc'}.'/'.$robot) {
	$cert = $Sympa::Configuration::Conf{'etc'}.'/'.$robot.'/cert.pem';
	$privatekey = $Sympa::Configuration::Conf{'etc'}.'/'.$robot.'/private_key';
    }else{
	$cert = $Sympa::Configuration::Conf{'etc'}.'/cert.pem';
	$privatekey = $Sympa::Configuration::Conf{'etc'}.'/private_key';
    }
}

if (-r "$cert") {
    printf "$cert certificat already exist\n";
    die;
}
if (-r "$privatekey") {
    printf "$privatekey already exist\n";
    die;
}

unless ($openssl) {
    printf "You must first configure Sympa to use openssl. Check the parameter openssl in sympa.conf\n";
    die;
}

system 'stty', '-echo';
printf "password to access to $p12input :";
chop($inpass = <STDIN>);
print "\n";
system 'stty', 'echo';
open  PASS, "| $openssl pkcs12 -in $p12input -out $cert -nokeys -clcerts -passin stdin";
print PASS "$inpass\n";
close PASS ;

unless ($outpass) {
    system 'stty', '-echo';
    printf "sympa password to protect list private_key $key:";
    chop($outpass = <STDIN>);
    print "\n";
    system 'stty', 'echo';
}

open  PASS, "| $openssl pkcs12 -in $p12input -out $privatekey -nocerts -passin stdin -des3 -passout stdin";
print PASS "$inpass\n$outpass\n";
close PASS ;

printf "$privatekey and  $cert created.\n";
exit;
