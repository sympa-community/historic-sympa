#! --PERL--
# -*- indent-tabs-mode: t; -*-
# vim:ft=perl:noet:sw=8:textwidth=78

# init_comment.pl - This script initializes subscriber comments in DB
# RCS Identication ; $Revision$ ; $Date$
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use strict;
use lib '--modulesdir--';

use Sympa::Configuration;
use Sympa::Constants;
use Sympa::Database;

## Load sympa config
Sympa::Configuration::load(Sympa::Constants::CONFIG) || die 'config_error';

chdir $Sympa::Configuration::Conf{'home'};

Sympa::Database::db_connect() || die "Can't connect to database";

my $base = Sympa::Database->get_singleton();

my $select_subscriber_handle = $base->get_query_handle(
	"SELECT user_subscriber, comment_subscriber FROM subscriber_table"
);

my $select_user_handle = $base->get_query_handle(
	"SELECT gecos_user FROM user_table WHERE email_user=?"
);

my $update_subscriber_handle = $base->get_query_handle(
	"UPDATE subscriber_table SET comment_subscriber=? WHERE user_subscriber=?"
);

$select_subscriber_handle->execute() || die "Unable to execute SQL statement";

my $user;
while ($user = $select_subscriber_handle->fetchrow_hashref('NAME_lc')) {
	printf "\nUser: %s", $user->{'user_subscriber'};

	unless ($user->{'comment_subscriber'}) {
		$select_user_handle->execute(
			$user->{'user_subscriber'}
		) || die "Unable to execute SQL statement";

		my $gecos = $select_user_handle->fetchrow();

		if ($gecos) {
			printf " =>%s", $gecos;
			$update_subscriber_handle->execute(
				$gecos, $user->{'user_subscriber'}
			) || die "Unable to execute SQL statement";
		}

	}
}

$select_user_handle->finish();
$select_subscriber_handle->finish();
$update_subscriber_handle->finish();

## Disconnect from Database
$base->disconnect();
