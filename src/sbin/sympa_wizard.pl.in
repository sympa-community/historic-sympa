#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997, 1998, 1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
# 2006, 2007, 2008, 2009, 2010, 2011 Comite Reseau des Universites
# Copyright (c) 2011, 2012, 2013, 2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use lib '--modulesdir--';
use strict;
use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use Sys::Hostname qw(hostname);

use Sympa::Constants;
use Sympa::ModDef;

my $with_CPAN; # check if module "CPAN" installed.
my $modfail;   # any of required modules are not installed.

BEGIN {
    $with_CPAN = eval { require CPAN; };
    $modfail = ! eval { require Conf; require tools; };
}

# Detect console encoding.
if (-t) {
    no warnings;

    eval { require Encode::Locale; };
    unless ($@ or
        Encode::resolve_alias($Encode::Locale::ENCODING_CONSOLE_IN) eq 'ascii'
        or
        Encode::resolve_alias($Encode::Locale::ENCODING_CONSOLE_OUT) eq
        'ascii') {
        binmode(STDIN,  ':encoding(console_in):bytes');
        binmode(STDOUT, ':encoding(console_out):bytes');
        binmode(STDERR, ':encoding(console_out):bytes');
    }
}

# Set language context if possible.
if ($modfail) {
    no warnings;

    *gettext = sub {shift};

    eval { require Text::Wrap; };
    if ($@) {
        *tools::wrap_text = sub {"$_[1]$_[0]\n"};
    } else {
        $Text::Wrap::columns = 78;
        *tools::wrap_text =
            sub { Text::Wrap::wrap($_[1], $_[2], $_[0]) . "\n"; };
    }
} else {
    no warnings;

    my $language = Sympa::Language->instance;
    *gettext = sub { $language->gettext(shift) };
    *gettext_strftime = sub { $language->gettext_strftime(@_) };

    my $lang = $ENV{'LANGUAGE'} || $ENV{'LC_ALL'} || $ENV{'LANG'};
    $lang =~ s/\..*// if $lang;
    $language->set_lang($lang, 'en-US', 'en');
}

## sympa configuration file
my $sympa_conf = Sympa::Constants::CONFIG;

my %options;
GetOptions(
    \%options, 
    'target=s',
    'create:s', # parameter is optional
    'check',
    'help'
);

if ($options{help}) {
    pod2usage();
} elsif (defined $options{create}) {
    create_configuration();
} elsif ($options{check}) {
    check_cpan();
} else {
    edit_configuration();
}

exit 0;

sub create_configuration {
    require confdef;

    my $conf;
    if ($options{create} eq '' or $options{create} eq 'sympa.conf') {
        $conf = $options{target} ? $options{target} : $sympa_conf;
    } else {
        pod2usage("$options{create} is not a valid argument");
        exit 1;
    }

    if (-f $conf) {
        print STDERR "$conf file already exists, exiting\n";
        exit 1;
    }

    unless (open NEWF, '>', $conf) {
        die "Unable to open $conf : $!";
    };

    if ($options{create} eq 'sympa.conf') {
#        print NEWF <<EOF
## Configuration file for Sympa
## many parameters are optional
## refer to the documentation for a detailed list of parameters

#EOF
    }

    my $title;
    foreach my $param (@confdef::params) {
        unless ($param->{'name'}) {
            $title = gettext($param->{'gettext_id'})
		if $param->{'gettext_id'};
            next;
        }

        next unless $param->{'file'};
        ##next unless defined $param->{'default'} or defined $param->{'sample'};

        if ($title) {
            printf NEWF "###\\\\\\\\ %s ////###\n\n", $title;
            undef $title;
        }

        printf NEWF "## %s\n", $param->{'name'};

        if ($param->{'gettext_id'}) {
            print NEWF tools::wrap_text(
	        gettext($param->{'gettext_id'}), '## ', '## '
	    );
        }

        print NEWF tools::wrap_text(
	    gettext($param->{'gettext_comment'}), '## ', '## '
	    ) if $param->{'gettext_comment'};

        if (defined $param->{'sample'}) {
            printf NEWF '## ' . gettext("Example: %s\t%s") . "\n",
		$param->{'name'}, $param->{'sample'};
	}

        if (defined $param->{'default'}) {
            printf NEWF "#%s\t%s\n", $param->{'name'}, $param->{'default'};
        } elsif ($param->{'optional'}) {
            printf NEWF "#%s\t\n", $param->{'name'};
        } else {
            printf NEWF
                '#' .
                gettext("%s\t(You must define this parameter)") .
                "\n", $param->{'name'};
        }
        print NEWF "\n";
    }

    close NEWF;
    print STDERR "$conf file has been created\n";
}

sub edit_configuration {
    die "You must run as superuser.\n"
	if $UID;
    die "Installation of Sympa has not been completed.\n" .
	"Run sympa_wizard.pl --check\n"
	if $modfail;

    # complement required fields.
    foreach my $param (@confdef::params) {
        next unless $param->{'name'};
        if ($param->{'name'} eq 'domain') {
            $param->{'default'} = hostname();
        } elsif ($param->{'name'} eq 'wwsympa_url') {
            $param->{'default'} = sprintf 'http://%s/sympa', hostname();
        } elsif ($param->{'name'} eq 'listmaster') {
            $param->{'default'} = sprintf 'your_email_address@%s', hostname();
        }
    }

    ## Load sympa config (but not using database)
    unless (defined Conf::load($sympa_conf, 1)) {
	printf STDERR
	    "Unable to load sympa configuration, file %s or one of the virtual host robot.conf files contain errors. Exiting.\n",
	    $sympa_conf;
	exit 1;
    }

    my $new_sympa_conf = '/tmp/sympa.conf';
    my $somechange = 0;

    my @new_sympa_conf;
    my $title = undef;

    # dynamic defaults
    my $domain = hostname();
    my $http_host = "http://$domain";

    ## Edition mode
    foreach my $param (@confdef::params) {
        unless ($param->{'name'}) {
            $title = gettext($param->{'gettext_id'})
		if $param->{'gettext_id'};
            next;
        }    

        my $file = $param->{'file'} ;
        my $name = $param->{'name'} ; 
        my $query = $param->{'gettext_id'} || '';
        $query = gettext($query) if $query;
        my $advice = $param->{'gettext_comment'} ;
        $advice = gettext($advice) if $advice;
        my $sample = $param->{'sample'} ;
        my $current_value ;

	next unless $file;
        if ($file eq 'sympa.conf' or $file eq 'wwsympa.conf') {
            $current_value = $Conf::Conf{$name}; 
            $current_value = '' unless defined $current_value;
        } else {
            next;
        }

        if ($title) {
            ## write to conf file
            push @new_sympa_conf,
                sprintf "###\\\\\\\\ %s ////###\n\n", $title;
        }

        my $new_value = '';
        if ($param->{'edit'} and $param->{'edit'} eq '1') {
	    print "\n\n** $title **\n" if $title;

            print "\n";
            print tools::wrap_text($query || '', '* ', '  ');
            print tools::wrap_text($advice, '  ... ', '  ') if $advice;
            printf(gettext('%s [%s] : '), $name, $current_value);
            $new_value = <STDIN> ;
            chomp $new_value;
        }
        if ($new_value eq '') {
            $new_value = $current_value;
        }

	undef $title;

        ## Skip empty parameters
        next if $new_value eq '' and ! $sample;

        ## param is an ARRAY
        if (ref($new_value) eq 'ARRAY') {
            $new_value = join ',',@{$new_value};
        }

        unless ($file eq 'sympa.conf' or $file eq 'wwsympa.conf') {
            printf STDERR gettext("Incorrect parameter definition: %s\n"),
                $file;
        }

        if ($new_value eq '') {
            next unless $sample;

            push @new_sympa_conf, tools::wrap_text($query, '## ', '## ');

            if (defined $advice and length $advice) {
                push @new_sympa_conf, tools::wrap_text($advice, '## ', '## ');
            }

            push @new_sympa_conf, "# $name\t$sample\n\n";
        }else {
            push @new_sympa_conf, tools::wrap_text($query, '## ', '## ');
            if (defined $advice and length $advice) {
                push @new_sympa_conf, tools::wrap_text($advice, '## ', '## ');
            }

            if ($current_value ne $new_value) {
                push @new_sympa_conf, "# was $name $current_value\n";
                $somechange = 1;
            }

            push @new_sympa_conf, "$name\t$new_value\n\n";
        }
    }

    if ($somechange) {
        my $date = gettext_strftime("%d.%b.%Y-%H.%M.%S", localtime(time));

        ## Keep old config file
        unless (rename $sympa_conf, $sympa_conf.'.'.$date) {
            warn sprintf(gettext("Unable to rename %s : %s"),
			 $sympa_conf, $!);
        }

        ## Write new config file
        my $umask = umask 037;
        unless (open (SYMPA,"> $sympa_conf")){
            umask $umask;
            die sprintf(gettext("Unable to open %s : %s"),
                        $sympa_conf, $!);
        };
        umask $umask;
        chown [getpwnam(Sympa::Constants::USER)]->[2], [getgrnam(Sympa::Constants::GROUP)]->[2], $sympa_conf;

        print SYMPA @new_sympa_conf;
        close SYMPA;

        printf gettext("%s have been updated.\nPrevious versions have been saved as %s.\n"), $sympa_conf, "$sympa_conf.$date";
    }
}

sub check_cpan {
    print "##########################################################################################
# This process will help you install all Perl (CPAN) modules required by Sympa software.
# Sympa requires from 50 to 65 additional Perl modules to run properly. 
# The whole installation process should take around 15 minutes.
# You'll first have to configure the CPAN shell itself and select your favourite CPAN server.
# Note that you might prefer to install the required Perl modules using your favourite DEB/RPM mechanism.
# Feel free to interrupt the process if needed ; you can restart it safely afterward.
##############################################################################################
Strike return key to continue...
";
    my $rep = <STDIN>;

    ### main:
    print "******* Check perl for SYMPA ********\n";
    ### REQ perl version
    print "\nChecking for PERL version:\n-----------------------------\n";
    my $rpv = $Sympa::ModDef::cpan_modules{"perl"}{'required_version'};
    if ($] >= $Sympa::ModDef::cpan_modules{"perl"}{'required_version'}){
        print "your version of perl is OK ($]  >= $rpv)\n";
    }else {
        print "Your version of perl is TOO OLD ($]  < $rpv)\nPlease INSTALL a new one !\n";
    }

    print "\nChecking for REQUIRED modules:\n------------------------------------------\n";
    check_modules('y', \%Sympa::ModDef::cpan_modules, 'mandatory');
    print "\nChecking for OPTIONAL modules:\n------------------------------------------\n";
    check_modules('n', \%Sympa::ModDef::cpan_modules, 'optional');

    print <<EOM;
******* NOTE *******
You can retrieve all theses modules from any CPAN server
(for example ftp://ftp.pasteur.fr/pub/computing/CPAN/CPAN.html)
EOM
###--------------------------
# reports modules status
# $cpan_modules is the cpan_modules structure
# $type is the type of modules (mandatory | optional) that should be installed
###--------------------------
}

sub check_modules {
#    my($default, $todo, $versions, $opt_features) = @_;
    my($default, $cpan_modules, $type) = @_;

    print "perl module          from CPAN       STATUS\n"; 
    print "-----------          ---------       ------\n";

    foreach my $mod (sort keys %$cpan_modules) {
      
      ## Only check modules of the expected type
      if ($type eq 'mandatory') {
	next unless ($cpan_modules->{$mod}{mandatory});
      }elsif ($type eq 'optional') {
	next if ($cpan_modules->{$mod}{mandatory});
      }
      
      ## Skip perl itself to prevent a huge upgrade
      next if ($mod eq 'perl');

        printf ("%-20s %-15s", $mod, $cpan_modules->{$mod}{package_name});

        eval "require $mod";
        if ($@) {
            ### not installed
            print "was not found on this system.\n";
            install_module($mod, {'default' => $default}, $cpan_modules);
        } else {

	  my ($vs, $v);
	  
	  ## MHonArc module does not provide its version the standard way
	  if ($mod =~ /^MHonArc/i) {
	    require "mhamain.pl";
	    $v = $mhonarc::VERSION;
	  }else {
           
	    $vs = "$mod" . "::VERSION";
	    {
	      no strict 'refs';
	      $v = $$vs;
	    }
	  }

	  my $rv = $cpan_modules->{$mod}{required_version} || "1.0" ;
	  ### OK: check version
	  if ($v ge $rv) {
	    printf ("OK (%-6s >= %s)\n", $v, $rv);
	    next;
	  } else {
	    print "version is too old ($v < $rv).\n";
	    print ">>>>>>> You must update \"$cpan_modules->{$mod}{package_name}\" to version \"$cpan_modules->{$mod}{required_version}\" <<<<<<.\n";
	    install_module($mod, {'default' => $default}, $cpan_modules);
	  }
        }
    }
}

##----------------------
# Install a CPAN module
##----------------------
sub install_module {
    return unless $with_CPAN;

    my ($module, $options, $cpan_modules) = @_;

    my $default = $options->{'default'};

    unless ($ENV{'FTP_PASSIVE'} eq 1) {
        $ENV{'FTP_PASSIVE'} = 1;
        print "Setting FTP Passive mode\n";
    }

    ## This is required on RedHat 9 for DBD::mysql installation
    my $lang = $ENV{'LANG'};
    $ENV{'LANG'} = 'C' if ($ENV{'LANG'} =~ /UTF\-8/);

    unless ($EUID == 0) {
        print "\#\# You need root privileges to install $module module. \#\#\n";
        print "\#\# Press the Enter key to continue checking modules. \#\#\n";
        my $t = <STDIN>;
        return undef;
    }

    unless ($options->{'force'}) {
        print tools::wrap_text(
	    sprintf(
		gettext('-> Usage of this module: %s') . "\n",
		gettext($cpan_modules->{$module}{'gettext_id'})
	    ),
	    '', '   '
	) if ($cpan_modules->{$module}{'gettext_id'});
        print tools::wrap_text(
	    sprintf(
		gettext('-> Prerequisites: %s') . "\n",
		gettext($cpan_modules->{$module}{'gettext_comment'})
	    ),
	    '', '   '
	) if ($cpan_modules->{$module}{'gettext_comment'});
	print "-> Install module $module ? [$default]";
        my $answer = <STDIN>; chomp $answer;
        $answer ||= $default;
        return unless ($answer =~ /^y$/i);
    }

  $CPAN::Config->{'inactivity_timeout'} = 0; ## disable timeout to prevent timeout during modules installation 
  $CPAN::Config->{'colorize_output'} = 1; 
  $CPAN::Config->{'build_requires_install_policy'} = 'yes';  ## automatically installed prerequisites without asking
  $CPAN::Config->{'prerequisites_policy'} = 'follow'; ## build prerequisites automatically
  $CPAN::Config->{'load_module_verbosity'} = 'none';  ## minimum verbosity during module loading
  $CPAN::Config->{'tar_verbosity'} = 'none';  ## minimum verbosity with tar command

    #CPAN::Shell->clean($module) if ($options->{'force'});

    CPAN::Shell->make($module);

    if ($options->{'force'}) {
        CPAN::Shell->force('test', $module);
    }else {
        CPAN::Shell->test($module);
    }

    CPAN::Shell->install($module); ## Could use CPAN::Shell->force('install') if make test failed

    ## Check if module has been successfuly installed
    unless (eval "require $module") {

        ## Prevent recusive calls if already in force mode
        if ($options->{'force'}) {
            print  "Installation of $module still FAILED. You should download the tar.gz from http://search.cpan.org and install it manually.";
            my $answer = <STDIN>;
        }else {
            print  "Installation of $module FAILED. Do you want to force the installation of this module? (y/N) ";
            my $answer = <STDIN>; chomp $answer;
            if ($answer =~ /^y/i) {
                install_module($module, {'force' => 1}, $cpan_modules);
            }
        }
    }

    ## Restore lang
    $ENV{'LANG'} = $lang if (defined $lang);

}
__END__

=encoding utf-8

=head1 NAME

sympa_wizard, sympa_wizard.pl - Help Performing Sympa Initial Setup
    
=head1 SYNOPSIS

S<B<sympa_wizard.pl>>
    S<[B<--check>]>
    S<[B<--create> [B<--target=>I<file>]]>
    S<[B<-h, --help>]>
    S<[B<-v, --version>]>

=head1 OPTIONS

=over 4

=item sympa_wizard.pl

Edit current Sympa configuration.

=item sympa_wizard.pl --check

Check CPAN modules needed for running Sympa.

=item sympa_wizard.pl --create [--target file]

Creates a new F<sympa.conf> configuration file.

=item sympa_wizard.pl --help

Display usage instructions.

=item sympa_wizard.pl --version

Print version number.

=back

=head1 HISTORY

This program was originally written by:

=over 4

=item Serge Aumont <sa@cru.fr>

=item Olivier SalaE<252>n <os@cru.fr>

=back

=cut

