#!--PERL--
# -*- indent-tabs-mode: t; -*-
# vim:ft=perl:noet:sw=8:textwidth=78
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

=head1 NAME

sympa_wizard.pl - Sympa configuration wizard

=head1 SYNOPSIS

  sympa_wizard.pl
  sympa_wizard.pl [--target file] --create <sympa.conf|wwsympa.conf>
  sympa_wizard.pl --check

=head1 DESCRIPTION

This script helps to perform sympa initial setup.

When run without option, it edits current configuration file.

When run with B<--create> option, it creates a new configuration file.

When run with B<--check> option, it checks CPAN needed modules.

=head1 OPTIONS

=over

=item B<--target>

File to create.

=item B<--create>

Creates a new sympa or wwsympa configuration file.

=item B<--check>

check CPAN modules needed for running sympa

=back

=head1 AUTHORS

=over

=item Serge Aumont <sa@cru.fr>

=item Olivier Sala√ºn <os@cru.fr>

=back

=cut

use strict;
use lib '--modulesdir--';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use Sys::Hostname qw(hostname);

use Sympa::Configuration;
use Sympa::Configuration::Definition;
use Sympa::Constants;
use Sympa::Language;
use Sympa::Log::Syslog;
use Sympa::WWSympa;

## sympa configuration files
my $wwsympa_conf = Sympa::Constants::WWSCONFIG;
my $sympa_conf   = Sympa::Constants::CONFIG;

my $perl_version = '5.008';

## assume version = 1.0 if not specified.
my %mandatory_modules = (
	'Archive::Zip' => {
		version      => '1.05',
		distribution => 'Archive-Zip',
		usage        => 'this module provides zip/unzip for archive and shared document download/upload',
	},
	'CGI' => {
		version      => '3.35',
		distribution => 'CGI',
		usage        => 'required to run Sympa web interface',
	},
	'DBD::mysql' => {
		version       => '4.008',
		prerequisites => 'mysql-devel and myslq-server. mysql should be running for make test to succeed',
		distribution  => 'Msql-Mysql-modules',
		usage            => 'Mysql database driver, required if you connect to a Mysql database.\nYou first need to install the Mysql server and have it started before installing the Perl DBD module.',
	},
	'DBI' => {
		version      => '1.48',
		distribution => 'DBI',
		usage        => 'a generic Database Driver, required by Sympa to access Subscriber information and User preferences. An additional Database Driver is required for each database type you wish to connect to.',
	},
	'Digest::MD5' => {
		version      => '2.00',
		distribution => 'Digest-MD5',
		usage        => 'used to compute MD5 digests for passwords, etc',
	},
	'Email::Simple' => {
		version      => '2.100',
		distribution => 'Email-Simple',
		usage        => 'Used for email tracking',
	},
	'File::Copy::Recursive' => {
		version      => '0.36',
		distribution => 'File-Copy-Recursive',
		usage        => 'used to copy file hierarchies',
	},
	'HTML::FormatText' => {
		distribution => 'HTML-Format',
		usage        => 'used to compute plaindigest messages from HTML',
	},
	'HTML::StripScripts::Parser' => {
		version      => '1.03',
		distribution => 'HTML-StripScripts-Parser',
		usage        => 'required for XSS protection on the web interface',
	},
	'HTML::TreeBuilder' => {
		distribution => 'HTML-Tree',
		usage        => 'used to compute plaindigest messages from HTML',
	},
	'IO::Scalar' => {
		distribution => 'IO-stringy',
		usage        => 'internal use for string processing',
	},
	'Locale::TextDomain' => {
		distribution => 'libintl-perl',
		usage        => 'internationalization functions',
	},
	'LWP' => {
		distribution => 'libwww-perl',
		usage        => 'required when including members of a remote list',
	},
	'MHonArc::UTF8' => {
		version      => '2.6.0',
		distribution => 'MHonArc',
		usage        => 'mhonarc is used to build Sympa web archives',
	},
	'MIME::Base64' => {
		version      => '3.03',
		distribution => 'MIME-Base64',
		usage        => 'required to compute digest for password and emails',
	},
	'MIME::Charset' => {
		version      => '1.006.2',
		distribution => 'MIME-Charset',
		usage        => 'used to encode mail body using a different charset',
	},
	'MIME::EncWords' => {
		version      => '1.010',
		distribution => 'MIME-EncWords',
		usage        => 'required to decode/encode SMTP header fields without breaking character encoding',
	},
	'MIME::Lite::HTML' => {
		version      => '1.23',
		distribution => 'MIME-Lite-HTML',
		usage        => 'used to compose HTML mail from the web interface',
	},
	'MIME::Tools' => {
		version      => '5.423',
		distribution => 'MIME-tools',
		usage        => 'provides libraries for manipulating MIME messages',
	},
	'Net::Netmask' => {
		version      => '1.9015',
		distribution => 'Net-Netmask',
		usage        => 'used to check netmask within Sympa autorization scenario rules',
	},
	'Proc::ProcessTable' => {
		version      => '0.44',
		distribution => 'Proc-ProcessTable',
		usage        => 'Used by the bulk.pl daemon to check the number of slave bulks running.',
	},
	'Template' => {
		distribution => 'Template-Toolkit',
		usage        => 'Sympa template format, used for web pages and other mail, config file templates. See http://template-toolkit.org/.',
	},
	'Term::ProgressBar' => {
		version      => '2.09',
		distribution => 'Term-ProgressBar',
		usage        => 'used while checking the RDBMS buffer size',
	},
	'Text::LineFold' => {
		version      => '2011.05',
		distribution => 'Unicode-LineBreak',
		usage        => 'used to fold lines in HTML mail composer and system messages, prior to Text::Wrap',
	},
	'URI::Escape' => {
		version      => '1.35',
		distribution => 'URI-Escape',
		usage        => 'Used to create URI containing non URI-canonical characters.',
	},
	'XML::LibXML' => {
		prerequisites => 'libxml2-devel is needed to build the Perl code',
		distribution  => 'XML-LibXML',
		usage         => 'used to parse list configuration templates and instanciate list families',
	},
);

my %optional_modules = (
	'AuthCAS' => {
		version      => '1.4',
		distribution => 'AuthCAS',
		usage        => 'CAS Single Sign-On client libraries. Required if you configure Sympa to delegate web authentication to a CAS server.',
	},
	'Crypt::CipherSaber' => {
		version      => '0.50',
		distribution => 'CipherSaber',
		usage        => 'this module provides reversible encryption of user passwords in the database.usefull only when updating from old version with password reversible encryption.',
	},
	'DBD::Oracle' => {
		version      => '0.90',
		distribution => 'DBD-Oracle',
		usage        => 'Oracle database driver, required if you connect to a Oracle database.',
	},
	'DBD::Pg' => {
		version       => '0.90',
		prerequisites => 'postgresql-devel and postgresql-server. postgresql should be running for make test to succeed',
		distribution  => 'DBD-Pg',
		usage         => 'PostgreSQL database driver, required if you connect to a PostgreSQL database.',
	},
	'DBD::SQLite' => {
		version       => '0.90',
		prerequisites => 'sqlite-devel. No need to install a server, the SQLite server code being provided with the client code.',
		distribution  => 'DBD-SQLite',
		usage         => 'SQLite database driver, required if you connect to a SQLite database.',
	},
	'DBD::Sybase' => {
		version      => '0.90',
		distribution => 'DBD-Sybase',
		usage        => 'Sybase database driver, required if you connect to a Sybase database.',
	},
	'FCGI' => {
		version      => '0.67',
		distribution => 'FCGI',
		usage        => 'WWSympa, Sympa\'s web interface can run as a FastCGI (ie: a persistent CGI). If you install this module, you will also need to install the associated mod_fastcgi for Apache.',
	},
	'File::NFSLock' => {
		distribution => 'File-NFSLock',
		usage        => 'required to perform NFS lock ; see also lock_method sympa.conf parameter'
	},
	'IO::Socket::SSL' => {
		version      => '0.90',
		distribution => 'IO-Socket-SSL',
		usage        => 'required when including members of a remote list',
	},
	'JSON::XS' => {
		version      => '2.32',
		distribution => 'JSON-XS',
		usage        => 'required when using the VOOT protocol',
	},
	'Net::LDAP' => {
		version       => '0.27',
		prerequisites => 'openldap-devel is needed to build the Perl code',
		distribution  => 'perl-ldap',
		usage         => 'required to query LDAP directories. Sympa can do LDAP-based authentication ; it can also build mailing lists with LDAP-extracted members.',
	},
	'Net::SMTP' => {
		distribution => 'libnet',
		usage        => 'this is required if you set \'list_check_smtp\' sympa.conf parameter, used to check existing aliases before mailing list creation.',
	},
	'OAuth::Lite' => {
		version      => '1.31',
		distribution => 'OAuth-Lite',
		usage        => 'This is required if you want to use the VOOT protocol.',
	},
	'SOAP::Lite' => {
		version      => '0.712',
		distribution => 'SOAP-Lite',
		usage        => 'required if you want to run the Sympa SOAP server that provides ML services via a "web service"',
	},
	'Mail::DKIM' => {
		version      => '0.36',
		distribution => 'Mail-DKIM',
		usage        => 'required in order to use DKIM features (both for signature verification and signature insertion)',
	}
);

my %options;
GetOptions(
	\%options,
	'target=s',
	'create=s',
	'check',
	'help'
) or pod2usage(-verbose => 0);

if ($options{help}) {
	pod2usage();
} elsif ($options{create}) {
	create_configuration();
} elsif ($options{check}) {
	check_cpan();
} else {
	edit_configuration();
}

exit 0;

sub create_configuration {

	eval {
		require Sympa::Configuration;
		require Sympa::Tools;
	};
	if ($EVAL_ERROR) {
		*{Sympa::Language::gettext} = sub { shift };
		*{Sympa::Tools::wrap_text} = sub { "$_[1]$_[0]\n" };
	} else {
		Sympa::Language::set_lang('');
	}

	my $conf;
	if ($options{create} eq 'sympa.conf') {
		$conf = $options{target} ? $options{target} : $sympa_conf;
	} elsif ($options{create} eq 'wwsympa.conf') {
		$conf = $options{target} ? $options{target} : $wwsympa_conf;
	} else {
		pod2usage("$options{create} is not a valid argument");
		exit 1;
	}

	if (-f $conf) {
		print STDERR "$conf file already exists, exiting\n";
		exit 1;
	}

	unless (open (NEWF,"> $conf")){
		die "Unable to open $conf : $ERRNO";
	};

	if ($options{create} eq 'sympa.conf') {
#        print NEWF <<EOF
## Configuration file for Sympa
## many parameters are optional
## refer to the documentation for a detailed list of parameters

#EOF
	}

	foreach my $param (@Sympa::Configuration::Definition::params) {

		if ($param->{'title'}) {
			printf NEWF "###\\\\\\\\ %s ////###\n\n",
			Sympa::Language::gettext($param->{'title'});
			next;
		}

		next unless ($param->{'file'} eq $options{create});

		next unless (defined $param->{'default'} || defined $param->{'sample'});

		print NEWF Sympa::Tools::wrap_text(Sympa::Language::gettext($param->{'query'}),
			'## ', '## ')
		if (defined $param->{'query'});

		print NEWF Sympa::Tools::wrap_text(Sympa::Language::gettext($param->{'advice'}),
			'## ', '## ')
		if (defined $param->{'advice'});

		if (defined $param->{'sample'}) {
			printf NEWF "#%s\t%s\n\n", $param->{'name'}, $param->{'sample'};
		} elsif (defined $param->{'default'}) {
			printf NEWF "%s\t%s\n\n", $param->{'name'}, $param->{'default'};
		}
	}

	close NEWF;
	print STDERR "$conf file has been created\n";
}

sub edit_configuration {
	require Sympa::Configuration::Definition;
	# complement required fields.
	foreach my $param (@Sympa::Configuration::Definition::params) {
		if ($param->{'name'} eq 'domain') {
			$param->{'default'} = hostname();
		} elsif ($param->{'name'} eq 'wwsympa_url') {
			$param->{'default'} = sprintf 'http://%s/sympa', hostname();
		}
	}
	eval {
		require Conf;
		require tools;
	};
	if ($EVAL_ERROR) {
		die "Installation of Sympa has not been completed.\nRun sympa_wizard.pl --check\n";
	}

	my $new_wwsympa_conf = '/tmp/wwsympa.conf';
	my $new_sympa_conf = '/tmp/sympa.conf';
	my $wwsconf = {};
	my $somechange = 0;

	my $rep;
	print "Does your console support UTF-8 (if you are not sure, hit [Enter])? [y/N] : ";
	$rep = <STDIN>;
	chomp $rep;
	if (lc $rep eq 'y') {
		my $lang = $ENV{'LANGUAGE'} || $ENV{'LC_ALL'} || $ENV{'LANG'} || '';
		$lang =~ s/\..*//;
		Sympa::Language::set_lang($lang);
	} else {
		Sympa::Language::set_lang('en_US');
	}

	## Load config
	unless ($wwsconf = Sympa::WWSympa::load_config($wwsympa_conf)) {
		Sympa::Log::Syslog::fatal_err("Unable to load sympa configuration, file $wwsympa_conf or one of the vhost robot.conf files contain errors. Exiting.");
	}

	## Load sympa config (but not using database)
	unless (Sympa::Configuration::load( $sympa_conf,'nodb')) {
		Sympa::Log::Syslog::fatal_err("Unable to load sympa configuration, file $sympa_conf or one of the vhost robot.conf files contain errors. Exiting.");
	}

	my (@new_wwsympa_conf, @new_sympa_conf);

	## Edition mode
	foreach my $param (@Sympa::Configuration::Definition::params) {
		my $desc;

		if ($param->{'title'}) {
			my $title = Sympa::Language::gettext($param->{'title'});
			print "\n\n** $title **\n";

			## write to conf file
			push @new_wwsympa_conf,
			sprintf "###\\\\\\\\ %s ////###\n\n", $title;
			push @new_sympa_conf,
			sprintf "###\\\\\\\\ %s ////###\n\n", $title;

			next;
		}

		my $file = $param->{'file'} ;
		my $name = $param->{'name'} ;
		my $query = $param->{'query'} ;
		$query = Sympa::Language::gettext($query) if $query;
		my $advice = $param->{'advice'} ;
		$advice = Sympa::Language::gettext($advice) if $advice;
		my $sample = $param->{'sample'} ;
		my $current_value ;
		if ($file eq 'wwsympa.conf') {
			$current_value = $wwsconf->{$name} ;
		} elsif ($file eq 'sympa.conf') {
			$current_value = $Sympa::Configuration::Conf{$name};
		} else {
			next;
		}
		my $new_value;
		if ($param->{'edit'} eq '1') {
			print "\n";
			print Sympa::Tools::wrap_text($query, '* ', '  ');
			print Sympa::Tools::wrap_text($advice, '  ... ', '  ') if $advice;
			printf(Sympa::Language::gettext('%s [%s] : '), $name, $current_value);
			$new_value = <STDIN> ;
			chomp $new_value;
		}
		if ($new_value eq '') {
			$new_value = $current_value;
		}

		## SKip empty parameters
		next if (($new_value eq '') &&
			! $sample);

		## param is an ARRAY
		if (ref($new_value) eq 'ARRAY') {
			$new_value = join ',',@{$new_value};
		}

		if ($file eq 'wwsympa.conf') {
			$desc = \@new_wwsympa_conf;
	}elsif ($file eq 'sympa.conf') {
		$desc = \@new_sympa_conf;
}else{
	printf STDERR Sympa::Language::gettext("Incorrect parameter definition: %s\n"),
	$file;
}

if ($new_value eq '') {
	next unless $sample;

	push @{$desc}, Sympa::Tools::wrap_text($query, '## ', '## ');

	unless ($advice eq '') {
		push @{$desc}, Sympa::Tools::wrap_text($advice, '## ', '## ');
	}

	push @{$desc}, "# $name\t$sample\n\n";
}else {
	push @{$desc}, Sympa::Tools::wrap_text($query, '## ', '## ');
	unless ($advice eq '') {
		push @{$desc}, Sympa::Tools::wrap_text($advice, '## ', '## ');
	}

	if ($current_value ne $new_value) {
		push @{$desc}, "# was $name $current_value\n";
		$somechange = 1;
	}

	push @{$desc}, "$name\t$new_value\n\n";
}
    }

    if ($somechange) {

	    my $date = Sympa::Language::gettext_strftime("%d.%b.%Y-%H.%M.%S",
		    localtime(time));

	    ## Keep old config files
	    unless (rename $wwsympa_conf, $wwsympa_conf.'.'.$date) {
		    warn sprintf(Sympa::Language::gettext("Unable to rename %s : %s"),
			    $wwsympa_conf, $ERRNO);
	    }

	    unless (rename $sympa_conf, $sympa_conf.'.'.$date) {
		    warn sprintf(Sympa::Language::gettext("Unable to rename %s : %s"),
			    $sympa_conf, $ERRNO);
	    }

	    ## Write new config files
	    unless (open (WWSYMPA,"> $wwsympa_conf")){
		    die sprintf(Sympa::Language::gettext("Unable to open %s : %s"),
			    $wwsympa_conf, $ERRNO);
	    };

	    my $umask = umask 037;
	    unless (open (SYMPA,"> $sympa_conf")){
		    umask $umask;
		    die sprintf(Sympa::Language::gettext("Unable to open %s : %s"),
			    $sympa_conf, $ERRNO);
	    };
	    umask $umask;
	    chown [getpwnam(Sympa::Constants::USER)]->[2], [getgrnam(Sympa::Constants::GROUP)]->[2], $sympa_conf;

	    print SYMPA @new_sympa_conf;
	    print WWSYMPA @new_wwsympa_conf;

	    close SYMPA;
	    close WWSYMPA;

	    printf Sympa::Language::gettext("%s and %s have been updated.\nPrevious versions have been saved as %s and %s.\n"), $sympa_conf, $wwsympa_conf, "$sympa_conf.$date", "$wwsympa_conf.$date";
    }
}

sub check_cpan {
	require CPAN;

	print <<EOM;
Sympa requires from 50 to 65 additional Perl modules to run properly. This
process will help you install of them.

The whole installation process should take around 15 minutes. You'll first
have to configure the CPAN shell itself and select your favourite CPAN server.

Note that you might prefer to install the required Perl modules using your
favourite DEB/RPM mechanism. Feel free to interrupt the process if needed.
You can restart it safely afterward.

Strike return key to continue...
EOM

	my $rep = <STDIN>;

	print "******* Check perl for SYMPA ********\n";
	print "\nChecking for PERL version:\n-----------------------------\n";
	if ($] >= $perl_version){
		print "your version of perl is OK ($] >= $perl_version)\n";
	}else {
		print "Your version of perl is TOO OLD ($] < $perl_version)\nPlease INSTALL a new one !\n";
	}

	print "\nChecking for REQUIRED modules:\n------------------------------------------\n";
	check_modules('y', \%mandatory_modules);

print "\nChecking for OPTIONAL modules:\n------------------------------------------\n";
check_modules('n', \%optional_modules);

    print <<EOM;
******* NOTE *******
You can retrieve all theses modules from any CPAN server
(for example ftp://ftp.pasteur.fr/pub/computing/CPAN/CPAN.html)
EOM

}

sub check_modules {
	my($default, $modules) = @_;

	print <<EOM;
perl module                 CPAN distribution          STATUS
-----------                 -----------------          ------
EOM

	foreach my $module_name (sort keys %$modules) {
		my $module = $modules->{$module_name};
		$module->{name} = $module_name;

		printf ("%-27s %-27s", $module->{name}, $module->{distribution});

		eval "require $module->{name}";
		if ($EVAL_ERROR) {
			### not installed
			print "not found\n";
			install_module($module, {'default' => $default});
		} else {

			my ($vs, $v);

			## MHonArc module does not provide its version the standard way
			if ($module->{name} =~ /^MHonArc/i) {
				require "mhamain.pl";
				$v = $mhonarc::VERSION;
			}else {

				$vs = $module->{name} . "::VERSION";
				{
					no strict 'refs';
					$v = $$vs;
				}
			}

			my $rv = $module->{version} || "1.0" ;
			### OK: check version
			if ($v ge $rv) {
				printf ("OK (%-6s >= %s)\n", $v, $rv);
				next;
			} else {
				print "version is too old ($v < $rv).\n";
				print ">>>>>>> You must update \"$module->{distribution}\" to version \"$module->{version}}\" <<<<<<.\n";
				install_module($module, {'default' => $default});
			}
		}
	}
}

# Install a CPAN module
sub install_module {
	my ($module, $options) = @_;

	my $default = $options->{'default'};

	unless ($ENV{'FTP_PASSIVE'} eq 1) {
		$ENV{'FTP_PASSIVE'} = 1;
		print "Setting FTP Passive mode\n";
	}

	## This is required on RedHat 9 for DBD::mysql installation
	my $lang = $ENV{'LANG'};
	$ENV{'LANG'} = 'C' if ($ENV{'LANG'} =~ /UTF\-8/);

	unless ($EUID == 0) {
		print "\#\# You need root privileges to install $module->{name} module. \#\#\n";
		print "\#\# Press the Enter key to continue checking modules. \#\#\n";
		my $t = <STDIN>;
		return undef;
	}

	unless ($options->{'force'}) {
		printf "-> Usage of this module: %s\n", $module->{usage} if ($module->{usage});
		printf "-> Prerequisites: %s\n", $module->{prerequisites} if ($module->{prerequisites});
		print "-> Install module $module->{name} ? [$default]";
		my $answer = <STDIN>; chomp $answer;
		$answer ||= $default;
		return unless ($answer =~ /^y$/i);
	}

	$CPAN::Config->{'inactivity_timeout'} = 0; ## disable timeout to prevent timeout during modules installation
	$CPAN::Config->{'colorize_output'} = 1;
	$CPAN::Config->{'build_requires_install_policy'} = 'yes';  ## automatically installed prerequisites without asking
	$CPAN::Config->{'prerequisites_policy'} = 'follow'; ## build prerequisites automatically
	$CPAN::Config->{'load_module_verbosity'} = 'none';  ## minimum verbosity during module loading
	$CPAN::Config->{'tar_verbosity'} = 'none';  ## minimum verbosity with tar command

	#CPAN::Shell->clean($module) if ($options->{'force'});

	CPAN::Shell->make($module->{name});

	if ($options->{'force'}) {
		CPAN::Shell->force('test', $module->{name});
	}else {
		CPAN::Shell->test($module->{name});
	}

	CPAN::Shell->install($module->{name}); ## Could use CPAN::Shell->force('install') if make test failed

	## Check if module has been successfuly installed
	eval "require $module->{name}";
	unless ($EVAL_ERROR) {
		## Prevent recusive calls if already in force mode
		if ($options->{'force'}) {
			print  "Installation of $module->{name} still FAILED. You should download the tar.gz from http://search.cpan.org and install it manually.";
			my $answer = <STDIN>;
		}else {
			print  "Installation of $module->{name} FAILED. Do you want to force the installation of this module? (y/N) ";
			my $answer = <STDIN>; chomp $answer;
			if ($answer =~ /^y/i) {
				install_module($module, {'force' => 1});
			}
		}
	}

	## Restore lang
	$ENV{'LANG'} = $lang if (defined $lang);

}
