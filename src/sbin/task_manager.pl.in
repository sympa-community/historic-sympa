#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

task_manager, task_manager.pl - Daemon executing background tasks

=head1 SYNOPSIS

B<task_manager.pl>
    S<[ B<-d, --debug> ]>
    S<[ B<-F, --foreground> ]>
    S<[ B<--log-level>=I<level> ]>

B<task_manager.pl> B<-h, --help>

=head1 DESCRIPTION

B<task_manager.pl> is a daemon scanning the B<task> spool content, and
executing tasks.

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Run in debug mode.

=item B<-F>, B<--foreground>

Do not detach from TTY.

=item B<-h>, B<--help>

Prints this help message.

=item B<--log_level=>I<level>

Set log level.

=back

=head1 FILES

F<--spooldir--/task/> directory for task spool.

F<--piddir--/task_manager.pid> this file contains the process ID
of F<task_manager.pl>.

=head1 MORE DOCUMENTATION

The full documentation in HTML and PDF formats can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<wwsympa(8)>

=cut

use strict;
use warnings;
use lib '--modulesdir--';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use Sympa::Conf;
use Sympa::Constants;
use Sympa::Language;
use Sympa::List;
use Sympa::Logger;
use Sympa::Mailer;
use Sympa::Site;
use Sympa::Spool::File::Task;
use Sympa::Task;
use Sympa::Tools::Daemon;
use Sympa::Tools::Time;

my $daemon_name = 'task_manager';

## list of list task models
our @list_models = ('sync_include', 'remind');

## hash of the global task models
our %global_models = (
    #'crl_update_task'                 => 'crl_update',
    #'chk_cert_expiration_task'        => 'chk_cert_expiration',
    'expire_bounce_task'               => 'expire_bounce',
    'purge_user_table_task'            => 'purge_user_table',
    'purge_logs_table_task'            => 'purge_logs_table',
    'purge_session_table_task'         => 'purge_session_table',
    'purge_tables_task'                => 'purge_tables',
    'purge_one_time_ticket_table_task' => 'purge_one_time_ticket_table',
    'purge_orphan_bounces_task'        => 'purge_orphan_bounces',
    'eval_bouncers_task'               => 'eval_bouncers',
    'process_bouncers_task'            => 'process_bouncers',
    #,'global_remind_task'             => 'global_remind'
);

my %options;
unless (
    GetOptions(
        \%options,
        'debug|d',
        'foreground|F',
        'help|h',
        'log_level=s',
    )) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($options{'help'}) {
    pod2usage(0);
}

if ($options{'debug'}) {
    $options{'log_level'} = 2 unless ($options{'log_level'});
    $options{'foreground'} = 1;
}

# load configuration
unless (Sympa::VirtualHost::get_robots()) {
    printf STDERR
        "Unable to load Sympa configuration, file %s or any of the virtual host robot.conf files contain errors. Exiting.\n",
        Sympa::Conf::get_sympa_conf();
    exit 1;
}

# initialize logging subsystem
our $logger;
my $log_level = $options{'log_level'} || Sympa::Site->log_level;
if ($options{'foreground'}) {
    require Sympa::logger::Stderr;
    $logger = Sympa::Logger::Stderr->new(
        level => $log_level
    );
} else {
    require Sympa::logger::Syslog;
    $logger = Sympa::Logger::Syslog->new(
        level    => $log_level,
        service  => $daemon_name,
        facility => Sympa::Site->log_facility(),
    );
}
$logger->do_log(
    Sympa::Logger::INFO,
    "Logger initialized, with log level $log_level"
);

# initialize SMTP subsystem
our $mailer = Sympa::Mailer->new(
    db_type         => Sympa::Site->db_type(),
    nrcpt_by_domain => Sympa::Site->nrcpt_by_domain(),
);

# initialize i18n subsystem
our $language = Sympa::Language->new();
$language->set_lang(Sympa::Site->lang, 'en');

# put ourselves in background if not in debug mode.
Sympa::Tools::Daemon::daemonize(name => $daemon_name)
    unless $options{'foreground'};

# check presence of a PID file from a previous execution
Sympa::Tools::Daemon::check_old_pid_file(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    tmpdir => Sympa::Site->tmpdir(),
);

# Create the PID file
Sympa::Tools::Daemon::write_pid(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    user   => Sympa::Constants::USER,
    group  => Sympa::Constants::GROUP,
);
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

# Redirect STDERR to a file, unless the process is running in foreground
unless ($options{'foreground'}) {
    Sympa::Tools::Daemon::direct_stderr_to_file(
        tmpdir => Sympa::Site->tmpdir(),
        user   => Sympa::Constants::USER,
        group  => Sympa::Constants::GROUP,
    );
}
eval {
    Sympa::Tools::Daemon::drop_privileges(
        user  => Sympa::Constants::USER,
        group => Sympa::Constants::GROUP
    );
};
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

## Sets the UMASK
umask(oct(Sympa::Site->umask));

## Change to list root
unless (chdir(Sympa::Site->home)) {
    $logger->do_log(Sympa::Logger::ERR,
        'error : unable to change to directory %s', Sympa::Site->home);
    exit(-1);
}

## Catch SIGTERM, in order to exit cleanly, whenever possible.
my $end = 0;
$SIG{'TERM'} = sub { $end = 1 };

# Catch fatal errors, to generate traceback.
$SIG{'__DIE__'} = sub {
    return if $EXCEPTIONS_BEING_CAUGHT;    # invoked from inside eval.
    Sympa::Tools::Daemon::terminate_on_unexpected_error(@_);
};

my $spool = Sympa::Spool::File::Task->new(
    name => 'task', directory => Sympa::Site->queuetask()
);

$logger->do_log(Sympa::Logger::NOTICE, "task_manager started");

# infinite loop, until a sig TERM is received
while (!$end) {
    my $current_date = time;                           # current epoch date
    my $rep          = Sympa::Tools::Time::adate($current_date);

    ## Empty cache of the List.pm module
    Sympa::List::init_list_cache();

    # Process grouped notifications
    Sympa::Site->send_notify_to_listmaster(undef, undef, 1, undef);

    $spool->create_required_tasks($current_date);

    ## Execute existing tasks
    ## processing of tasks anterior to the current date
    $logger->do_log(Sympa::Logger::DEBUG2,
        'Processing tasks anterior to the current date');
    foreach my $task ($spool->get_entries()) {
        last if $end;
        next unless $task->{'date'} <= $current_date;

        # Check that a task is still legitimate before executing it, as tasks
        # for list whose parameters have been changed may not be valid anymore,
        # such as synchronisation without datasources
        my $validity = $task->check_validity();

        if ($validity) {
            $logger->do_log(Sympa::Logger::DEBUG2, 'Processing task %s', $task);

            eval {
                $task->execute();
            };
            if ($EVAL_ERROR) {
                my $data = {
                    'task'       => $task,
                    'human_date' => Sympa::Tools::Time::adate($task->{'date'}),
                };
                if ($task->isa('Sympa::Task::List')) {
                    $data->{'list'} = $task->{'list'};
                }
                $logger->do_log(
                    Sympa::Logger::ERR,
                    'Execution of task %s failed, sending detailed report to listmaster',
                    $task->get_description()
                );
                Sympa::Site->send_notify_to_listmaster('task_error', $data);
            } else {
                $logger->do_log(
                    Sympa::Logger::NOTICE,
                    'Execution of task %s suceeded',
                    $task->get_description,
                );
            }
        }

        my $result = $spool->remove($task->{'messagekey'});
        unless ($result) {
            $logger->do_log(
                Sympa::Logger::ERR,
                'Unable to remove task (messagekey = %s)',
                $task->{'messagekey'}
            );
        }
    }
    sleep 30;
    ## Free zombie sendmail processes
    $mailer->reaper();
}

# Purge grouped notifications
Sympa::Site->send_notify_to_listmaster(undef, undef, undef, 1);

$logger->do_log(Sympa::Logger::NOTICE,
    'task_manager exited normally due to signal');

Sympa::Tools::Daemon::remove_pid(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    tmpdir => Sympa::Site->tmpdir(),
);
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

exit(0);

# Checks that all the required tasks at the server level are defined. Create
# them if needed.

sub create_required_tasks {
    my ($spool, $current_date) = @_;
    $main::logger->do_log(Sympa::Logger::DEBUG2, '(%s)', @_);

    # index every task already present in the spool by list and model
    my (%tasks_by_list, %tasks_by_model);

    my @current_tasks = $spool->get_entries();

    foreach my $task (@current_tasks) {
        my $list_id = $task->{'id'};
        my $model   = $task->{'model'};

        $tasks_by_model{$model}{$list_id} = $task;
        $tasks_by_list{$list_id}{$model}  = $task;
    }

    my %default_data = (
        'creation_date'  => $current_date,
        'execution_date' => 'execution_date'
    );

    # create additional tasks
    my @new_tasks = (
        create_required_global_tasks(
            'data'         => \%default_data,
            'current_date' => $current_date,
            'tasks_index'  => \%tasks_by_model
        ),
        create_required_lists_tasks(
            'data'         => \%default_data,
            'current_date' => $current_date,
            'tasks_index'  => \%tasks_by_list
        )
    );

    foreach my $task (@new_tasks) {
        $spool->store(
            $task->{'messageastring'},
            $task->get_metadata()
        );
    }
}

# create all required global task, if needed
sub create_required_global_tasks {
    my ($self, %params) = @_;
    $main::logger->do_log(Sympa::Logger::DEBUG,
        'Creating required tasks from global models');

    # models for which a task exists
    my %used_models;
    foreach my $model (keys %{$params{tasks_index}}) {
        $used_models{$model} = 1;
    }

    my @tasks;
    foreach my $key (keys %global_models) {
        $main::logger->do_log(Sympa::Logger::DEBUG2, "global_model : $key");
        next if $used_models{$global_models{$key}};
        next unless Sympa::Site->$key;

        my $task = Sympa::Task->new(
            'date'          => $params{'current_date'},
            'model'         => $global_models{$key},
            'flavour'       => Sympa::Site->$key,
            'data'          => $params{'data'}
        );
        unless ($task && $task->init()) {
            my $message = sprintf
                'Unable to create task with parameters creation_date = "%s", model = "%s", flavour = "%s", data = "%s"',
                $params{'current_date'},
                $global_models{$key},
                Sympa::Site->$key,
                $params{data};
            $main::logger->do_log(Sympa::Logger::ERR, $message);
            Sympa::Site->send_notify_to_listmaster('task_creation_error', $message);
        }
        push @tasks, $task;
        $used_models{$1} = 1;
    }

    return @tasks;
}

# create all required list tasks, if needed
sub create_required_lists_tasks {
    my ($self, %params) = @_;
    $main::logger->do_log(Sympa::Logger::DEBUG,
        'Creating required tasks from list models');

    my @tasks;
    foreach my $robot (@{Sympa::VirtualHost::get_robots()}) {
        $main::logger->do_log(Sympa::Logger::DEBUG3,
            'creating list task : current bot is %s', $robot);
        my $all_lists = Sympa::List::get_lists($robot);
        foreach my $list (@$all_lists) {
            $main::logger->do_log(Sympa::Logger::DEBUG3,
                'creating list task : current list is %s', $list);
            my %data = %{$params{'data'}};
            $data{'list'} = {'name' => $list->name, 'robot' => $list->domain};

            my %used_list_models;    # stores which models already have a task
            foreach my $model (@list_models) {
                $used_list_models{$model} = undef;
            }
            my $tasks_index = $params{tasks_index}->{$list->getid()};
            if ($tasks_index) {
                foreach my $model (keys %$tasks_index) {
                    $used_list_models{$model} = 1;
                }
            }
            $main::logger->do_log(Sympa::Logger::DEBUG3,
                'creating list task using models');
            my $tt = 0;

            foreach my $model (@list_models) {
                next if $used_list_models{$model};

                my $model_task_parameter = "$model" . '_task';
                my $task;

                if ($model eq 'sync_include') {
                    next
                        unless $list->has_include_data_sources()
                            and $list->status eq 'open';
                    $task = Sympa::Task->new(
                        'date'          => $params{'current_date'},
                        'label'         => 'INIT',
                        'model'         => $model,
                        'flavour'       => 'ttl',
                        'data'          => \%data
                    );
                } elsif (%{$list->$model_task_parameter}
                    and defined $list->$model_task_parameter->{'name'}
                    and $list->status eq 'open') {
                    $task = Sympa::Task->new(
                        'date'          => $params{'current_date'},
                        'model'         => $model,
                        'flavour'       =>
                            $list->$model_task_parameter->{'name'},
                        'data'          => \%data
                    );
                }
                unless ($task && $task->init()) {
                    my $message = 
                        sprintf
                            'Unable to create task with parameters list = "%s", creation_date = "%s", model = "%s", flavour = "%s", data = "%s"',
                            $list->get_id,
                            $params{'current_date'},
                            $model,
                            $list->$model_task_parameter->{'name'},
                            \%data;
                    $main::logger->do_log(Sympa::Logger::ERR, $message);
                    Sympa::Site->send_notify_to_listmaster('task_creation_error', $message);
                }
                push @tasks, $task;
            }
        }
    }

    return @tasks;
}
