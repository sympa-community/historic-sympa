#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

task_manager, task_manager.pl - Daemon to Process Periodical Sympa Tasks

=head1 SYNOPSIS

S<B<task_manager.pl> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION

XXX @todo doc

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Sets the debug mode

=item B<-F>, B<--foreground>

Prevents the script from being daemonized

=item B<-h>, B<--help>

Prints this help message.

=item B<--log_level=>I<level>

Set log level.

=back

=head1 FILES

F<--spooldir--/task/> directory for task spool.

F<--piddir--/task_manager.pid> this file contains the process ID
of F<task_manager.pl>.

=head1 MORE DOCUMENTATION

The full documentation in HTML and PDF formats can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<wwsympa(8)>

=cut

use lib '--modulesdir--';
use strict "vars";
use warnings;
use Getopt::Long;
use Pod::Usage;

# tentative
use Data::Dumper;

#use Conf; # used in List - Robot- Site
use List;

#use Log; # used by Conf
#use SDM; # used by Conf
#use Sympa::Constants; # used by Conf
#use Task; # used by List
#use TaskSpool; # used by Task
#use tools; # used by Conf

my %options;

unless (
    GetOptions(
        \%main::options, 'debug|d', 'help|h', 'log_level=s',
        'foreground|F'
    )
    ) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($main::options{'help'}) {
    pod2usage(0);
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

# Some option force foreground mode
$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1
    if ($main::options{'debug'} || $main::options{'foreground'});

my $Version = '0.1';

my $adrlist = {};

# Load sympa.conf
unless (Robot::get_robots()) {
    printf STDERR
        "Unable to load Sympa configuration, file %s or any of the virtual host robot.conf files contain errors. Exiting.\n",
        Sympa::Conf::get_sympa_conf();
    exit 1;
}

Sympa::Log::Syslog::do_openlog(Site->log_facility, Site->log_socket_type,
    'task_manager');

# setting log_level using conf unless it is set by calling option
if ($main::options{'log_level'}) {
    Sympa::Log::Syslog::set_log_level($main::options{'log_level'});
    Sympa::Log::Syslog::do_log(
        'info',
        'Configuration file read, log level set using options : %s',
        $main::options{'log_level'}
    );
} else {
    Sympa::Log::Syslog::set_log_level(Site->log_level);
    Sympa::Log::Syslog::do_log('info',
        'Configuration file read, default log level %s',
        Site->log_level);
}

## Put ourselves in background if not in debug mode.

unless ($main::options{'debug'} || $main::options{'foreground'}) {
    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
        ioctl(TTY, 0x20007471, 0);    #  s/b &TIOCNOTTY

        #       ioctl(TTY, &TIOCNOTTY, 0);
        close(TTY);
    }

    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
        print STDOUT "Starting task_manager daemon, PID $_\n";
        exit(0);
    }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});
tools::write_pid('task_manager', $$, $options);
unless ($options->{'stderr_to_tty'}) {
    &tools::direct_stderr_to_file(('pid' => $$));
}

## Set the UserID & GroupID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
&POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
&POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (usefull on OS X)
unless (($( == (getgrnam(Sympa::Constants::GROUP))[2])
    && ($< == (getpwnam(Sympa::Constants::USER))[2])) {
    Sympa::Log::Syslog::fatal_err(
        "Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via sudo."
    );
}

## Sets the UMASK
umask(oct(Site->umask));

## Change to list root
unless (chdir(Site->home)) {
    Sympa::Log::Syslog::do_log('err',
        'error : unable to change to directory %s', Site->home);
    exit(-1);
}

my $taskspool = TaskSpool->new();

## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

###### VARIABLES DECLARATION ######
# won't execute send_msg and delete_subs commands if true, only log
undef my $log;

#$log = 1;

###### INFINITE LOOP SCANING THE SPOOL (unless a sig TERM is received) ######
while (!$end) {
    my $current_date = time;                           # current epoch date
    my $rep          = &tools::adate($current_date);

    ## Empty cache of the List.pm module
    &List::init_list_cache();

    # Process grouped notifications
    Site->send_notify_to_listmaster(undef, undef, 1, undef);

    TaskSpool::create_required_tasks($current_date);

    ## Execute existing tasks
    ## processing of tasks anterior to the current date
    Sympa::Log::Syslog::do_log('debug2',
        'Processing tasks anterior to the current date');
    foreach my $task_in_spool ($taskspool->get_content) {
        my $task = undef;
        $task = Task->new($task_in_spool)
            if $task_in_spool;
        next unless $task;

        last if $end;
        next unless $task->{'date'} <= $current_date;

        Sympa::Log::Syslog::do_log('debug2', 'Processing task %s', $task);
        if ($task->{'object'} ne '_global') {    # list task
            $task->check_list_task_is_valid();
        }
        $task->execute;
    }
    sleep 30;
    ## Free zombie sendmail processes
    &mail::reaper;
}

## when we catch SIGTERM, just change the value of the loop variable.
sub sigterm {
    $end = 1;
}

# Purge grouped notifications
Site->send_notify_to_listmaster(undef, undef, undef, 1);

Sympa::Log::Syslog::do_log('notice',
    'task_manager exited normally due to signal');
tools::remove_pid('task_manager', $$);

exit(0);
