#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997, 1998, 1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
# 2006, 2007, 2008, 2009, 2010, 2011 Comite Reseau des Universites
# Copyright (c) 2011, 2012, 2013, 2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use lib split(/:/, $ENV{SYMPALIB} || ''), '--modulesdir--';
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use POSIX qw();

use Sympa::Bulk;
use Conf;
use Sympa::Constants;
use Sympa::Crash;    # Show traceback.
use List;
use Log;
use mail;
use Message;
use SDM;
use tools;
use tracking;

my $daemon_name           = Log::set_daemon($0);
my $date_of_last_activity = time();
local $main::daemon_usage =
    'DAEMON_MASTER';    ## Default is to launch bulk as master daemon.

## Check options
##  --debug : sets the debug mode
##  --foreground : prevents the script from beeing daemonized
##  --mail : logs every sendmail calls
my %options;
unless (
    GetOptions(
        \%main::options, 'config|f=s',  'debug|d', 'foreground|F',
        'help|h',        'log_level=s', 'mail|m',  'version|v',
    )
    ) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($main::options{'help'}) {
    pod2usage(0);
} elsif ($main::options{'version'}) {
    printf "Sympa %s\n", Sympa::Constants::VERSION;
    exit 0;
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1
    if ($main::options{'debug'} || $main::options{'foreground'});

# Load sympa.conf
unless (Conf::load()) {
    printf STDERR
        "Unable to load Sympa configuration, file %s or one of the virtual host robot.conf files contain errors. Exiting.\n",
        Conf::get_sympa_conf();
    exit 1;
}

Log::do_openlog($Conf::Conf{'syslog'}, $Conf::Conf{'log_socket_type'},
    'bulk');

# Enable SMTP logging if required
my $default_log_smtp = $main::options{'mail'}
    || tools::smart_eq($Conf::Conf{'log_smtp'}, 'on');
$mail::log_smtp = $default_log_smtp;

# setting log_level using conf unless it is set by calling option
my $default_log_level;
if ($main::options{'log_level'}) {
    $default_log_level = $main::options{'log_level'};
    Log::set_log_level($default_log_level);
    Log::do_log(
        'info',
        'Configuration file read, log level set using options: %s',
        $main::options{'log_level'}
    );
} else {
    $default_log_level = $Conf::Conf{'log_level'};
    Log::set_log_level($default_log_level);
    Log::do_log(
        'info',
        'Configuration file read, default log level %s',
        $Conf::Conf{'log_level'}
    );
}

## Set the process as main bulk daemon by default.
my $is_main_bulk = 0;

## Put ourselves in background if not in debug mode.
unless ($main::options{'debug'} || $main::options{'foreground'}) {
    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
        close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
        Log::do_log('info', 'Starting bulk master daemon, PID %s',
            $child_pid);
        exit(0);
    }
}
Log::do_openlog($Conf::Conf{'syslog'}, $Conf::Conf{'log_socket_type'},
    'bulk');
## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});
$options->{'multiple_process'} = 0;

# Save the PID number
tools::write_pid('bulk', $$, $options);
unless ($options->{'stderr_to_tty'}) {
    tools::direct_stderr_to_file(('pid' => $$));
}
## Set the User ID & Group ID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (useful on OS X)
unless (($( == (getgrnam(Sympa::Constants::GROUP))[2])
    && ($< == (getpwnam(Sympa::Constants::USER))[2])) {
    Log::fatal_err(
        "Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via sudo."
    );
}

## Sets the UMASK
umask(oct($Conf::Conf{'umask'}));

## Change to list root
unless (chdir($Conf::Conf{'home'})) {
    die sprintf 'Can\'t chdir to %s: %s', $Conf::Conf{'home'}, $!;
}

Log::do_log('notice', 'Bulk %s Started', Sympa::Constants::VERSION);

## Catch signals, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
$SIG{'INT'}  = \&sigterm;
my $end = 0;

my $opensmtp = 0;
my $fh       = 'fh0000000000';    ## File handle for the stream.

my $messagekey;    # the key of the current message in the message_table
my $messageasstring_init;    # the current message as a string
my $messageasstring;         # the transformed message.

my $timeout         = $Conf::Conf{'bulk_wait_to_fork'};
my $last_check_date = 0;
my %created_children;

$options->{'multiple_process'} = 1;
#FIXME: Overwriting configuration on memory.
$Conf::Conf{'maxsmtp'} =
    int($Conf::Conf{'maxsmtp'} / $Conf::Conf{'bulk_max_count'});

while (!$end) {
    # Enable SMTP logging if required.
    $mail::log_smtp = $default_log_smtp;
    # setting log_level using conf unless it is set by calling option
    Log::set_log_level($default_log_level);

    List::init_list_cache();
    # Process grouped notifications
    List::send_notify_to_listmaster(undef, undef, undef, 1);

    my $bulk;
    my $message_from_spool;

    unless ($main::options{'foreground'}) {
        ##
        ## Create child bulks if too much packets are waiting to be sent in
        ## the bulk_mailer table.
        ## Only the main bulk process (DAEMON_MASTER) can create child
        ## processes
        ## Check if we need to run new child processes every
        ## 'bulk_wait_to_fork' (sympa.conf parameter) seconds
        if (   ($main::daemon_usage eq 'DAEMON_MASTER')
            && (time() - $last_check_date > $timeout)) {
            ## Clean up PID file (in case some child bulks would have died)
            my @actual_children = tools::get_children_processes_list();
            my @remaining_children;
            my %dead_children = %created_children;
            foreach my $apid (@actual_children) {
                if (defined $dead_children{$apid}) {
                    push @remaining_children, $apid;
                    delete $dead_children{$apid};
                }
            }
            my @pids_leftover = keys %dead_children;
            if ($#pids_leftover > -1) {
                my @dc;
                Log::do_log('debug2',
                    'Some childs of current process disappeared. Checking whether they shut down cleanly or not.'
                );
                my $pids_in_pfile = tools::get_pids_in_pid_file('bulk');
                foreach my $fpid (@{$pids_in_pfile}) {
                    if (defined $dead_children{$fpid}) {
                        Log::do_log(
                            'err',
                            'The %s child exists in the PID file but is no longer running. Removing it and notyfying listmaster',
                            $fpid
                        );
                        my $pname = $0;
                        $pname =~ s/.*\/(\w+)/$1/;
                        tools::send_crash_report(
                            ('pid' => $fpid, 'pname' => $pname));
                        tools::remove_pid('bulk', $fpid, $options);
                        delete $dead_children{$fpid};
                        push @dc, $fpid;
                    }
                }
            }
            my $pids_in_pfile = tools::get_pids_in_pid_file('bulk');
            unless (defined($pids_in_pfile)) {
                tools::write_pid('bulk', $$, $options);
                close STDERR;
                tools::direct_stderr_to_file(('pid' => $$));
                $pids_in_pfile = [$$];
            }
            ## Start new processes if there remain at least
            ## 'bulk_fork_threshold' packets to send in the bulkmailer_table
            ## table
            if (my $r_packets =
                Sympa::Bulk::there_is_too_much_remaining_packets()
                and $#remaining_children + 1 < $Conf::Conf{'bulk_max_count'})
            {

                ## disconnect from database before fork
                ## to prevent DB handlers to be shared by different processes
                # when loading conf in database disconnect because of sharing
                # database handler may crash bulk.pl
                SDM::db_disconnect();

                if ($Conf::Conf{'bulk_max_count'} > 1) {
                    Log::do_log(
                        'info',
                        'Important workload: %s packets to process. Creating %s child bulks to increase sending rate',
                        $r_packets,
                        $Conf::Conf{'bulk_max_count'} -
                            ($#remaining_children + 1)
                    );
                    for my $process_count (
                        1 .. $Conf::Conf{'bulk_max_count'} -
                        ($#remaining_children + 1)) {
                        Log::do_log('info', "Will fork: %s", $process_count);
                        if ((my $child_pid = fork) != 0) {
                            Log::do_log('info',
                                'Starting bulk child daemon, PID %s',
                                $child_pid);
                            # Saves the pid number
                            tools::write_pid('bulk', $child_pid, $options);
                            $created_children{$child_pid} = 1;
                            sleep 1;
                        } else {
                            ## We're in a child bulk process
                            close STDERR;
                            tools::direct_stderr_to_file(('pid' => $$));
                            $date_of_last_activity = time();
                            $main::daemon_usage =
                                'DAEMON_SLAVE';    # automatic lists creation
                            Log::do_openlog($Conf::Conf{'syslog'},
                                $Conf::Conf{'log_socket_type'}, 'bulk');
                            Log::do_log('info',
                                'Bulk slave daemon started with PID %s', $$);
                            last;
                        }
                    }
                }
            }
            $last_check_date = time();
        }
    }
    ## If a child bulk process is running for long enough, stop it (if the
    ## number of remaining packets to send is reasonnable).
    if (    $main::daemon_usage eq 'DAEMON_SLAVE'
        and time() - $date_of_last_activity > $Conf::Conf{'bulk_lazytime'}
        and
        !(my $r_packets = Sympa::Bulk::there_is_too_much_remaining_packets()))
    {
        Log::do_log('info',
            'Process %s didn\'t send any message since %s seconds, exiting',
            $$, $Conf::Conf{'bulk_lazytime'});
        last;
    }

    ## Go through the bulk_mailer table and process messages
    if ($bulk = Sympa::Bulk::next()) {
        if (!defined $messagekey or $bulk->{'messagekey'} ne $messagekey) {
            # current packet is not related to the same message as the
            # previous packet
            # so it is needed to fetch the new message from message_table

            $messagekey = $bulk->{'messagekey'};
            $message_from_spool =
                Sympa::Bulk::message_from_spool($bulk->{'messagekey'});

            Log::do_log(
                'notice',
                'Start sending message "%s" (key "%s") to list "%s@%s" (priority %s) (starting %s seconds after scheduled expedition date)',
                $bulk->{'messageid'},
                $bulk->{'messagekey'},
                $bulk->{'listname'},
                $bulk->{'robot'},
                $bulk->{'priority_message'},
                time() - $bulk->{'delivery_date'}
            );

            $messageasstring_init = $message_from_spool->{'messageasstring'};

            # trace_smime($messageasstring_init,'initial');

            unless ($messageasstring_init) {
                Log::do_log(
                    'err',
                    'Internal error: current packet (messagekey= %s) contains a ref to a null message',
                    $messagekey
                );
                unless (Sympa::Bulk::remove($messagekey, $bulk->{'packetid'}))
                {
                    Log::do_log(
                        'err',
                        'Failed to remove processed packet "%s", messagekey "%s"',
                        $messagekey,
                        $bulk->{'packetid'}
                    );
                }
            }
            $messagekey = $bulk->{'messagekey'};
        }

        # Get list/robot context.
        # NOTE: The robot that injected packet can no longer be available.
        # In such case fallback to site-wide robot.
        my $listname = $bulk->{'listname'};
        my $robot    = $bulk->{'robot'};
        $robot = $Conf::Conf{'domain'}
            unless $robot
                and $robot ne '*'
                and Conf::valid_robot($robot);

        # Enable SMTP logging if required.
        $mail::log_smtp = $main::options{'mail'}
            || tools::smart_eq(Conf::get_robot_conf($robot, 'log_smtp'),
            'on');
        # setting log_level using conf unless it is set by calling option
        Log::set_log_level(
            (defined $main::options{'log_level'})
            ? $main::options{'log_level'}
            : Conf::get_robot_conf($robot, 'log_level')
        );

        #HASH which will contain the attributes of the subscriber
        my $data;
        # Initialization of the HASH : $data. It will be used by parse_tt2 to
        # personalized messages.
        $data->{'messageid'} = $message_from_spool->{'messageid'};
        $data->{'listname'}  = $bulk->{'listname'};
        $data->{'robot'}     = $bulk->{'robot'};
        #XXX$data->{'to'} = $bulk->{'recipients'}; #XXX Insecure
        $data->{'wwsympa_url'} =
            Conf::get_robot_conf($bulk->{'robot'}, 'wwsympa_url');

        # It is the email of a subscriber, use it in the foreach
        my $rcpt;
        # Contain all the subscribers
        my @rcpts = split /,/, $bulk->{'recipients'};
        ## Use an intermediate handler to encode to filesystem_encoding
        my $user;

        # message transformation must be done in the folowing order
        #  -1 headers modifications (done in sympa.pl)
        #  -2 merge
        #  -3 smime sign
        #  -4 smime encrypt
        #  -5 remove existing signature if altered
        #  -6 dkim sign
        #

        # FIXME: $message would know its list context.
        my $list =
            List->new($bulk->{'listname'}, $bulk->{'robot'},
            {'just_try' => 1});

        if (   $bulk->{'verp'}
            or $bulk->{'merge'}
            or $bulk->{'tracking'} eq 'dsn'
            or $bulk->{'tracking'} eq 'mdn') {
            # message needs personalization
            my $key;

            foreach $rcpt (@rcpts) {
                my $message = Message->new(
                    {   'messageasstring' => $messageasstring_init,
                        'noxsympato'      => 'noxsympato'
                    }
                );
                my $entity = $message->as_entity;
                my $notification_id;
                my $return_path;

                if (   $bulk->{'tracking'} eq 'dsn'
                    or $bulk->{'tracking'} eq 'mdn') {
                    # tracking by MDN required tracking by DSN to
                    my $msgid = $message->{'message_id'};
                    $notification_id =
                        tracking::find_notification_id_by_message($rcpt,
                        $msgid, $listname, $robot);
                    $return_path =
                        $list->get_bounce_address($rcpt, $notification_id);
                    $entity->head->replace('Disposition-Notification-To',
                        $return_path)
                        if $bulk->{'tracking'} eq 'mdn';
                    if (   $message->{'protected'}
                        or $message->{'smime_crypted'}) {
                        my ($dummy, $msg_body) =
                            split /\r?\n\r?\n/, $messageasstring_init, 2;
                        ## concat headers from entity with original body
                        $messageasstring_init =
                            $entity->head->as_string . "\n" . $msg_body;
                    } else {
                        $messageasstring_init = $entity->as_string;
                    }
                    # trace_smime($messageasstring,'tracking');
                } else {    # VERP
                    $return_path = $list->get_bounce_address($rcpt);
                }
                if ($bulk->{'merge'} and !$message->{'protected'}) {
                    if ($message->personalize($list, $rcpt)) {
                        $messageasstring = $message->as_string;
                    } else {
                        #FIXME: Mark packet as "bad".
                        Log::do_log('err', 'Erreur d appel personalize()');
                        List::send_notify_to_listmaster(
                            'bulk_failed',
                            $list->{'domain'},
                            {   'msg'  => $messageasstring_init,
                                'list' => $list,
                            }
                        );

                        last;    # foreach $rcpt
                    }
                } else {
                    $messageasstring = $messageasstring_init;
                }

                if (Conf::get_robot_conf($bulk->{'robot'}, 'dkim_feature') eq
                    'on') {
                    $messageasstring = tools::remove_invalid_dkim_signature(
                        $messageasstring);
                }
                if ($message_from_spool->{'dkim_d'}) {
                    # apply dkim signature AFTER any other message
                    # transformation.
                    $messageasstring = tools::dkim_sign(
                        $messageasstring,
                        {   'dkim_d' => $message_from_spool->{'dkim_d'},
                            'dkim_i' => $message_from_spool->{'dkim_i'},
                            'dkim_selector' =>
                                $message_from_spool->{'dkim_selector'},
                            'dkim_privatekey' =>
                                $message_from_spool->{'dkim_privatekey'},
                        }
                    );
                }

                # trace_smime($messageasstring,'dkim');

                *SMTP =
                    mail::smtpto($return_path, \$rcpt, $bulk->{'robot'},
                    $notification_id);
                # Message with customized data
                print SMTP $messageasstring;
                close SMTP;
            }
        } else {
            # message doesn't need personalization, so can be sent by packet.
            if (Conf::get_robot_conf($bulk->{'robot'}, 'dkim_feature') eq
                'on') {
                $messageasstring_init = tools::remove_invalid_dkim_signature(
                    $messageasstring_init);
            }
            # Initial message
            if ($message_from_spool->{'dkim_d'}) {
                $messageasstring_init = tools::dkim_sign(
                    $messageasstring_init,
                    {   'dkim_d' => $message_from_spool->{'dkim_d'},
                        'dkim_i' => $message_from_spool->{'dkim_i'},
                        'dkim_selector' =>
                            $message_from_spool->{'dkim_selector'},
                        'dkim_privatekey' =>
                            $message_from_spool->{'dkim_privatekey'},
                    }
                );
            }

            # trace_smime($messageasstring_init,'dkim 2');

            *SMTP =
                mail::smtpto($bulk->{'returnpath'}, \@rcpts,
                $bulk->{'robot'});
            print SMTP $messageasstring_init;
            close SMTP;
        }

        ## Remove packet once it has been processed
        unless (
            Sympa::Bulk::remove($bulk->{'messagekey'}, $bulk->{'packetid'})) {
            Log::do_log('err',
                'Failed to remove processed packet "%s", messagekey "%s"',
                $bulk->{'messagekey'}, $bulk->{'packetid'});
        }

        if ($bulk->{'priority_packet'} ==
            Conf::get_robot_conf($bulk->{'robot'}, 'sympa_packet_priority') +
            5) {
            Log::do_log(
                'notice',
                'Done sending message "%s" (key "%s") to list "%s@%s" (priority %s) in %s seconds since scheduled expedition date',
                $bulk->{'messageid'},
                $bulk->{'messagekey'},
                $bulk->{'listname'},
                $bulk->{'robot'},
                $bulk->{'priority_message'},
                time() - $bulk->{'delivery_date'}
            );
        }
        $date_of_last_activity = time();
    } else {
        ## Sleep for a while if bulk_mailer DB table is empty
        sleep $Conf::Conf{'bulk_sleep'};
    }
    mail::reaper();

}

# Purge grouped notifications
List::send_notify_to_listmaster(undef, undef, undef, undef, 1);

Log::do_log('notice', 'Bulk.pl exited normally due to signal');
tools::remove_pid('bulk', $$, $options);

exit(0);

## When we catch signal, just change the value of the loop
## variable.
sub sigterm {
    my ($sig) = @_;
    Log::do_log('notice', 'Signal %s received, still processing current task',
        $sig);
    $end = 1;
}

sub trace_smime {

    my $messageasstring_init = shift;
    my $where                = shift;

    my $trusted_ca_options = '';
    $trusted_ca_options = "-CAfile $Conf::Conf{'cafile'} "
        if ($Conf::Conf{'cafile'});
    $trusted_ca_options .= "-CApath $Conf::Conf{'capath'} "
        if ($Conf::Conf{'capath'});

    unless (
        open(MSGDUMP,
            "| $Conf::Conf{'openssl'} smime -verify  $trusted_ca_options > /dev/null"
        )
        ) {
        Log::do_log('err', 'Unable to verify S/MIME signature');
        return undef;
    }

    print MSGDUMP $messageasstring_init;

    close MSGDUMP;

    my $status = $? / 256;
    unless ($status == 0) {
        Log::do_log('debug', 'Signature S/MIME NOT OK (%s)', $where);
    } else {
        Log::do_log('debug', 'Signature S/MIME OK (%s)', $where);
    }
}

__END__

=encoding utf-8

=head1 NAME 

bulk, bulk.pl - Daemon for Submitting Bulk Content to SMTP Engine

=head1 SYNOPSIS

S<B<bulk.pl> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION 

This daemon must be run along with Sympa.  It regularly checks the
C<bulkpacket_table> content and submit the messages it finds in it to the
sendmail engine.  Several daemon should be used on deferent server for huge
traffic.

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Sets the debug mode

=item B<-F>, B<--foreground>

Prevents the script from being daemonized

=item B<-h>, B<--help>

Prints this help message.

=item B<--log_level=>I<level>

Set log level.

=item B<-m>, B<--mail>

Logs every sendmail calls.

=back

=head1 FILES

F<--piddir--/bulk.pid> this file contains the process IDs
of F<bulk.pl>.

=head1 MORE DOCUMENTATION

The full documentation in HTML and PDF formats can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<sendmail(8)>

=cut
