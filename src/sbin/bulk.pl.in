#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME 

bulk, bulk.pl - Daemon for Submitting Bulk Content to SMTP Engine

=head1 SYNOPSIS

S<B<bulk.pl> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION 

This daemon must be run along with Sympa.  It regularly checks the
C<bulkpacket_table> content and submit the messages it finds in it to the
sendmail engine.  Several daemon should be used on deferent server for huge
traffic.

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Sets the debug mode

=item B<-F>, B<--foreground>

Prevents the script from being daemonized

=item B<-h>, B<--help>

Prints this help message.

=item B<--log_level=>I<level>

Set log level.

=item B<-m>, B<--mail>

Logs every sendmail calls.

=back

=head1 FILES

F<--piddir--/bulk.pid> this file contains the process IDs
of F<bulk.pl>.

=head1 MORE DOCUMENTATION

The full documentation in HTML and PDF formats can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<sendmail(8)>

=cut 

use strict;
use warnings;
use lib '--modulesdir--';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use POSIX qw();

use Sympa::Bulk;
use Sympa::Conf;
use Sympa::Constants;
use Sympa::List;
use Sympa::Mailer;
use Sympa::Log::Syslog;
use Sympa::Site;
use Sympa::Spool::SQL;
use Sympa::Tools::DKIM;
use Sympa::Tools::Daemon;
use Sympa::Tracking;

my $daemon_name           = Sympa::Tools::Daemon::get_daemon_name($0);
my $date_of_last_activity = time();
my $daemon_usage =
    'DAEMON_MASTER';    ## Default is to launch bulk as master daemon.

## Check options
##  --debug : sets the debug mode
##  --foreground : prevents the script from beeing daemonized
##  --mail : logs every sendmail calls
my %options;
unless (
    GetOptions(
        \%options, 'debug|d', 'foreground|F', 'help|h',
        'log_level=s',   'mail|m'
    )
    ) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($options{'debug'}) {
    $options{'log_level'} = 2 unless ($options{'log_level'});
    $options{'foreground'} = 1;
}

$options{'log_to_stderr'} = 1 if $options{'foreground'};

if ($options{'help'}) {
    pod2usage(0);
}

# Load sympa.conf
unless (Sympa::Robot::get_robots()) {
    print STDERR
        "Unable to load Sympa configuration, file %s or any of the virtual host robot.conf files contain errors. Exiting.\n",
        Sympa::Conf::get_sympa_conf();
    exit 1;
}

Sympa::Log::Syslog::do_openlog(Sympa::Site->syslog, Sympa::Site->log_socket_type, 'bulk');

# setting log_level using conf unless it is set by calling option
if ($options{'log_level'}) {
    Sympa::Log::Syslog::set_log_level($options{'log_level'});
    Sympa::Log::Syslog::do_log(
        'info',
        'Configuration file read, log level set using options : %s',
        $options{'log_level'}
    );
} else {
    Sympa::Log::Syslog::set_log_level(Sympa::Site->log_level);
    Sympa::Log::Syslog::do_log('info',
        'Configuration file read, default log level %s',
        Sympa::Site->log_level);
}

## Set the process as main bulk daemon by default.
my $is_main_bulk = 0;

## Put ourselves in background if not in debug mode.
unless ($options{'foreground'}) {
    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {

        #      ioctl(TTY, &TIOCNOTTY, 0);
        close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
        Sympa::Log::Syslog::do_log('info',
            "Starting bulk master daemon, PID %s", $child_pid);
        exit(0);
    }
}
Sympa::Log::Syslog::do_openlog(Sympa::Site->syslog, Sympa::Site->log_socket_type, 'bulk');

# check presence of a PID file from a previous execution
Sympa::Tools::Daemon::check_old_pid_file(
    name   => 'task_manager',
    piddir => Sympa::Constants::PIDDIR,
    tmpdir => Sympa::Site->tmpdir(),
);

# Create the PID file
Sympa::Tools::Daemon::write_pid(
    name   => 'bulk',
    pid    => $PID,
    piddir => Sympa::Constants::PIDDIR,
    user   => Sympa::Constants::USER,
    group  => Sympa::Constants::GROUP,
);

# redirect STDERR to a file, unless the process is running in foreground
unless ($options{'foreground'}) {
    Sympa::Tools::Daemon::direct_stderr_to_file(
        pid    => $PID,
        tmpdir => Sympa::Site->tmpdir(),
        user   => Sympa::Constants::USER,
        group  => Sympa::Constants::GROUP,
    );
}
## Set the User ID & Group ID for the process
$GID = $EGID = (getgrnam(Sympa::Constants::GROUP))[2];
$UID = $EUID = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (useful on OS X)
unless (($GID == (getgrnam(Sympa::Constants::GROUP))[2])
    && ($UID == (getpwnam(Sympa::Constants::USER))[2])) {
    Sympa::Log::Syslog::fatal_err(
        "Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via sudo."
    );
}

## Sets the UMASK
umask(oct(Sympa::Site->umask));

## Change to list root
unless (chdir(Sympa::Site->home)) {
    Sympa::Log::Syslog::do_log('err', 'unable to change directory');
    exit(-1);
}

Sympa::Log::Syslog::do_log('notice', "bulk.pl %s Started",
    Sympa::Constants::VERSION);

## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

our $mailer = Sympa::Mailer->new(
    db_type         => Sympa::Site->db_type(),
    nrcpt_by_domain => Sympa::Site->nrcpt_by_domain(),
);

my $messagekey;    # the key of the current message in the message_table
my $messageasstring_init;    # the current message as a string
my $messageasstring;         # the transformed message.

my $timeout         = Sympa::Site->bulk_wait_to_fork;
my $last_check_date = 0;
my %created_children;

$Sympa::Conf::Conf{'maxsmtp'} = int(Sympa::Site->maxsmtp / Sympa::Site->bulk_max_count);    #FIXME

my $spool = Sympa::Spool::SQL->new('bulk');

while (!$end) {
    Sympa::List::init_list_cache();

    # Process grouped notifications
    Sympa::Site->send_notify_to_listmaster(undef, undef, 1, undef);

    my $bulk;
    my $message_from_spool;

    unless ($options{'foreground'}) {
        ##
        ## Create child bulks if too much packets are waiting to be sent in
        ## the bulk_mailer table.
        ## Only the main bulk process (DAEMON_MASTER) can create child
        ## processes
        ## Check if we need to run new child processes every
        ## 'bulk_wait_to_fork' (sympa.conf parameter) seconds
        if (   ($daemon_usage eq 'DAEMON_MASTER')
            && (time() - $last_check_date > $timeout)) {
            ## Clean up PID file (in case some child bulks would have died)
            my @actual_children = Sympa::Tools::Daemon::get_children_processes_list();
            my @remaining_children;
            my %dead_children = %created_children;
            foreach my $apid (@actual_children) {
                if (defined $dead_children{$apid}) {
                    push @remaining_children, $apid;
                    delete $dead_children{$apid};
                }
            }
            my @pids_leftover = keys %dead_children;
            if ($#pids_leftover > -1) {
                my @dc;
                Sympa::Log::Syslog::do_log('debug2',
                    'Some childs of current process disappeared. Checking whether they shut down cleanly or not.'
                );
                my $pids_in_pfile = Sympa::Tools::Daemon::get_pids_in_pid_file(
                    name   => 'bulk',
                    piddir => Sympa::Constants::PIDDIR,
                );
                foreach my $fpid (@{$pids_in_pfile}) {
                    if (defined $dead_children{$fpid}) {
                        Sympa::Log::Syslog::do_log(
                            'err',
                            'The %s child exists in the PID file but is no longer running. Removing it and notyfying listmaster.',
                            $fpid
                        );
                        my $pname = $0;
                        $pname =~ s/.*\/(\w+)/$1/;
                        Sympa::Tools::Daemon::send_crash_report(
                            ('pid' => $fpid, 'pname' => $pname));
                        Sympa::Tools::Daemon::remove_pid(
                            name             => 'bulk',
                            pid              => $fpid,
                            piddir           => Sympa::Constants::PIDDIR,
                            tmpdir           => Sympa::Site->tmpdir(),
                            multiple_process => 1
                        );
                        delete $dead_children{$fpid};
                        push @dc, $fpid;
                    }
                }
            }
            my $pids_in_pfile = Sympa::Tools::Daemon::get_pids_in_pid_file(
                name   => 'bulk',
                piddir => Sympa::Constants::PIDDIR,
            );
            unless (defined($pids_in_pfile)) {
                Sympa::Tools::Daemon::write_pid(
                    name             => 'bulk',
                    pid              => $PID,
                    piddir           => Sympa::Constants::PIDDIR,
                    tmpdir           => Sympa::Site->tmpdir(),
                    user             => Sympa::Constants::USER,
                    group            => Sympa::Constants::GROUP,
                    multiple_process => 1
                );
                close STDERR;
                Sympa::Tools::Daemon::direct_stderr_to_file(
                    pid    => $PID,
                    tmpdir => Sympa::Site->tmpdir(),
                    user   => Sympa::Constants::USER,
                    group  => Sympa::Constants::GROUP,
                );
                $pids_in_pfile = [$PID];
            }
            ## Start new processes if there remain at least
            ## 'bulk_fork_threshold' packets to send in the bulkpacket_table
            ## table
            if ((   my $r_packets =
                    Sympa::Bulk::there_is_too_much_remaining_packets()
                )
                && ($#remaining_children + 1 < Sympa::Site->bulk_max_count)
                ) {

                ## disconnect from database before fork
                ## to prevent DB handlers to be shared by different processes
                # when loading conf in database disconnect because of sharing
                # database handler may crash bulk.pl
                Sympa::DatabaseManager::db_disconnect();

                if (Sympa::Site->bulk_max_count > 1) {
                    Sympa::Log::Syslog::do_log(
                        'info',
                        'Important workload: %s packets to process. Creating %s child bulks to increase sending rate.',
                        $r_packets,
                        Sympa::Site->bulk_max_count- ($#remaining_children + 1)
                    );
                    for my $process_count (
                        1 .. Sympa::Site->bulk_max_count- ($#remaining_children + 1))
                    {
                        Sympa::Log::Syslog::do_log('info', "Will fork: %s",
                            $process_count);
                        if ((my $child_pid = fork) != 0) {
                            Sympa::Log::Syslog::do_log('info',
                                "Starting bulk child daemon, PID %s",
                                $child_pid);

                            # Saves the pid number
                            Sympa::Tools::Daemon::write_pid(
                                name             => 'bulk',
                                pid              => $child_pid,
                                piddir           => Sympa::Constants::PIDDIR,
                                tmpdir           => Sympa::Site->tmpdir(),
                                user             => Sympa::Constants::USER,
                                group            => Sympa::Constants::GROUP,
                                multiple_process => 1
                            );
                            $created_children{$child_pid} = 1;
                            sleep 1;
                        } else {
                            ## We're in a child bulk process
                            close STDERR;
                            Sympa::Tools::Daemon::direct_stderr_to_file(
                                pid    => $PID,
                                tmpdir => Sympa::Site->tmpdir(),
                                user   => Sympa::Constants::USER,
                                group  => Sympa::Constants::GROUP,
                            );
                            $date_of_last_activity = time();
                            $daemon_usage =
                                'DAEMON_SLAVE';    # automatic lists creation
                            Sympa::Log::Syslog::do_openlog(Sympa::Site->syslog,
                                Sympa::Site->log_socket_type, 'bulk');
                            Sympa::Log::Syslog::do_log('info',
                                "Bulk slave daemon started with PID %s", $PID);
                            last;
                        }
                    }
                }
            }
            $last_check_date = time();
        }
    }
    ## If a child bulk process is running for long enough, stop it (if the
    ## number of remaining packets to send is reasonnable).
    if (   ($daemon_usage eq 'DAEMON_SLAVE')
        && (time() - $date_of_last_activity > Sympa::Site->bulk_lazytime)
        && !(my $r_packets = Sympa::Bulk::there_is_too_much_remaining_packets())) {
        Sympa::Log::Syslog::do_log('info',
            "Process %s didn't send any message since %s seconds, exiting.",
            $PID, Sympa::Site->bulk_lazytime);
        last;
    }

    ## Go through the bulk_mailer table and process messages

    if ($bulk = Sympa::Bulk::next()) {
        if (!defined $messagekey or $bulk->{'messagekey'} ne $messagekey) {

            # current packet is not related to the same message as the
            # previous packet, so it is needed to fetch the new message from
            # spool_table.

            $messagekey = $bulk->{'messagekey'};
            $message_from_spool =
                $spool->get_message({'messagekey' => $messagekey});
            my $message;
            $message = Sympa::Message->new(%$message_from_spool)
                if $message_from_spool;
            unless ($message) {
                Sympa::Log::Syslog::do_log(
                    'err',
                    'Internal error: current packet (messagekey=%s) refers to a null message',
                    $messagekey
                );
                unless (Sympa::Bulk::remove($messagekey, $bulk->{'packetid'})) {
                    Sympa::Log::Syslog::do_log(
                        'err',
                        'Failed to remove processed packet "%s", messagekey "%s"',
                        $messagekey,
                        $bulk->{'packetid'}
                    );
                }
                next;    # while (!$end)
            }

            # Get message as string without meta information.
            $messageasstring_init = $message->as_string();

            Sympa::Log::Syslog::do_log(
                'notice',
                'Start sending message "%s" (key "%s") to list "%s@%s" (priority %s) (starting %s seconds after scheduled expedition date)',
                $bulk->{'messageid'},
                $messagekey,
                $bulk->{'listname'},
                $bulk->{'robot'},
                $bulk->{'priority_message'},
                time() - $bulk->{'delivery_date'}
            );
        }

        # It is the email of a subscriber, use it in the foreach
        my $rcpt;

        # Contain all the subscribers
        my @rcpts = split /,/, $bulk->{'recipients'};
        ## Use an intermediate handler to encode to filesystem_encoding
        my $user;

        # message transformation must be done in the folowing order
        #  -1 headers modifications (done in sympa.pl)
        #  -2 merge
        #  -3 smime sign
        #  -4 smime encrypt
        #  -5 remove existing signature if altered
        #  -6 dkim sign
        #

        #my $list = Sympa::List->new($bulk->{'listname'}, $bulk->{'robot'});
        my $listname = $bulk->{'listname'};
        my $robot_id = $bulk->{'robot'};
        my $list     = $bulk->{'list_object'};
        my $robot    = $bulk->{'robot_object'};

        if (   $bulk->{'verp'}
            or $bulk->{'merge'}
            or $bulk->{'tracking'} eq 'dsn'
            or $bulk->{'tracking'} eq 'mdn') {

            # message needs personalization
            my $key;

            foreach $rcpt (@rcpts) {
                my $message = Sympa::Message->new(
                    'messageasstring' => $messageasstring_init,
                    'noxsympato'      => 'noxsympato',
                    'list_object'     => $list,
                );
                my $entity = $message->as_entity();
                my $notification_id;
                my $return_path;

                if (   $bulk->{'tracking'} eq 'dsn'
                    or $bulk->{'tracking'} eq 'mdn') {

                    # tracking by MDN required tracking by DSN to
                    my $msgid = $message->get_msg_id;
                    $notification_id =
                        Sympa::Tracking::find_notification_id_by_message($rcpt,
                        $msgid, $listname, $robot_id);
                    $return_path =
                        $list->get_bounce_address($rcpt, $notification_id);
                    $entity->head->replace('Disposition-Notification-To',
                        $return_path)
                        if ($bulk->{'tracking'} eq 'mdn');
                    if (   ($message->{'protected'})
                        || ($message->{'smime_crypted'})) {

                        # concat headers from entity with original body
                        my $msg_body = Sympa::Message::get_body_from_msg_as_string(
                            $messageasstring_init);
                        $messageasstring_init =
                            $entity->head->as_string() . "\n" . $msg_body;
                    } else {
                        $messageasstring_init = $entity->as_string();
                    }

                    # trace_smime($messageasstring,'tracking');
                } else {    # VERP
                    $return_path = $list->get_bounce_address($rcpt);
                }
                if (($bulk->{'merge'}) && !($message->{'protected'})) {
                    if ($message->personalize($list, $rcpt)) {
                        $messageasstring = $message->as_string();
                    } else {
                        Sympa::Log::Syslog::do_log('err',
                            'Erreur d appel personalize()');
                        $list->robot->send_notify_to_listmaster(
                            'bulk_failed',
                            {   'msg'  => $messageasstring_init,
                                'list' => $list,
                            }
                        );
                        last;
                    }
                } else {
                    $messageasstring = $messageasstring_init;
                }

                if ($robot->dkim_feature eq 'on') {
                    $messageasstring =
                        Sympa::Tools::DKIM::remove_invalid_signature(
                        $messageasstring);
                }
                if ($message_from_spool->{'dkim_d'}) {

                    # apply dkim signature AFTER any other message
                    # transformation.
                    $messageasstring = Sympa::Tools::DKIM::sign(
                        $messageasstring,
                        {   'dkim_d' => $message_from_spool->{'dkim_d'},
                            'dkim_i' => $message_from_spool->{'dkim_i'},
                            'dkim_selector' =>
                                $message_from_spool->{'dkim_selector'},
                            'dkim_privatekey' =>
                                $message_from_spool->{'dkim_privatekey'},
                        },
                        Sympa::Site->tmpdir
                    );
                }

                # trace_smime($messageasstring,'dkim');

                my $handle = $mailer->get_sendmail_handle(
                    from   => $return_path,
                    rcpt   => \$rcpt,
                    robot  => $robot,
                    msgkey => $notification_id
                );
                # Message with customized data
                print $handle $messageasstring;
                close $handle;
            }
        } else {

            # message doesn't need personalization, so can be sent by packet.
            if ($robot->dkim_feature eq 'on') {
                $messageasstring_init =
                    Sympa::Tools::DKIM::remove_invalid_signature(
                    $messageasstring_init);
            }

            # Initial message
            if ($message_from_spool->{'dkim_d'}) {
                $messageasstring_init = Sympa::Tools::DKIM::sign(
                    $messageasstring_init,
                    {   'dkim_d' => $message_from_spool->{'dkim_d'},
                        'dkim_i' => $message_from_spool->{'dkim_i'},
                        'dkim_selector' =>
                            $message_from_spool->{'dkim_selector'},
                        'dkim_privatekey' =>
                            $message_from_spool->{'dkim_privatekey'},
                    }
                );
            }

            # trace_smime($messageasstring_init,'dkim 2');

            my $handle = $mailer->get_sendmail_handle(
                $bulk->{'returnpath'}, \@rcpts, $robot
            );
            print $handle $messageasstring_init;
            close $handle;
        }

        ## Remove packet once it has been processed
        unless (Sympa::Bulk::remove($bulk->{'messagekey'}, $bulk->{'packetid'})) {
            Sympa::Log::Syslog::do_log('err',
                "failed to remove processed packet '%s', messagekey '%s'",
                $bulk->{'messagekey'}, $bulk->{'packetid'});
        }

        if ($bulk->{'priority_packet'} == Sympa::Site->sympa_packet_priority + 5) {
            Sympa::Log::Syslog::do_log(
                'notice',
                'Done sending message "%s" (key "%s") to list "%s@%s" (priority %s) in %s seconds since scheduled expedition date.',
                $bulk->{'messageid'},
                $bulk->{'messagekey'},
                $listname,
                $robot_id,
                $bulk->{'priority_message'},
                time() - $bulk->{'delivery_date'}
            );
        }
        $date_of_last_activity = time();
    } else {
        ## Sleep for a while if bulk_mailer DB table is empty
        sleep Sympa::Site->bulk_sleep;
    }
    $mailer->reaper();

}

# Purge grouped notifications
Sympa::Site->send_notify_to_listmaster(undef, undef, undef, 1);

Sympa::Log::Syslog::do_log('notice', 'bulk.pl exited normally due to signal');
Sympa::Tools::Daemon::remove_pid(
    name             => 'bulk',
    pid              => $PID,
    piddir           => Sympa::Constants::PIDDIR,
    tmpdir           => Sympa::Site->tmpdir(),
    multiple_process => 1
);

exit(0);

## When we catch SIGTERM, just change the value of the loop
## variable.
sub sigterm {
    Sympa::Log::Syslog::do_log('notice',
        'signal TERM received, still processing current task');
    $end = 1;
}

sub trace_smime {

    my $messageasstring_init = shift;
    my $where                = shift;

    my $trusted_ca_options = '';
    $trusted_ca_options = "-CAfile " . Sympa::Site->cafile . " " if Sympa::Site->cafile;
    $trusted_ca_options .= "-CApath " . Sympa::Site->capath . " " if Sympa::Site->capath;

    unless (
        open(MSGDUMP,
                  "| "
                . Sympa::Site->openssl
                . " smime -verify  $trusted_ca_options > /dev/null"
        )
        ) {
        Sympa::Log::Syslog::do_log('err',
            'unable to verify S/MIME signature');
        return undef;
    }

    print MSGDUMP $messageasstring_init;

    close MSGDUMP;

    my $status = $CHILD_ERROR / 256;
    unless ($status == 0) {
        Sympa::Log::Syslog::do_log('debug', 'S/MIME signature NOT OK (%s)',
            $where);
    } else {
        Sympa::Log::Syslog::do_log('debug', 'S/MIME signature OK     (%s)',
            $where);
    }
}
