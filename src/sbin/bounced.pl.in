#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

bounced, bounced.pl - Mailing List Bounce Processing Daemon for Sympa

=head1 SYNOPSIS

S<B<bounced> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION

Bounced is a program which scans permanently the bounce spool and
processes bounces (non-delivery messages), looking or bad addresses.
Bouncing addresses are tagged in database ; last bounce is kept for
each bouncing address.

List owners will latter access bounces information via WWSympa.

=head1 OPTIONS

These programs follow the usual GNU command line syntax,
with long options starting with two dashes (`-').  A summary of
options is included below.

=over 5

=item B<-F>, B<--foreground>

Do not detach TTY.

=item B<-d>, B<--debug>

Run the program in a debug mode.

=item B<-h>, B<--help>

Print this help message.

=item B<--log_level=>I<level>

Sets daemon log level.

=back

=head1 FILES

F<--CONFIG--> Sympa configuration file.

F<--libexecdir--/bouncequeue> bounce spooler, referenced from sendmail alias file

F<--spooldir--/bounce> incoming bounces directory

F<--piddir--/bounced.pid> this file contains the process ID
of F<bounced.pl>.

=head1 MORE DOCUMENTATION

The full documentation can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 AUTHORS

=over 4

=item Serge Aumont

ComitE<233> RE<233>seau des UniversitE<233>s

=item Olivier SalaE<252>n

ComitE<233> RE<233>seau des UniversitE<233>s

=back

Contact authors at <sympa-authors@listes.renater.fr>

This manual page was initially written by
JE<233>rE<244>me Marant <jerome.marant@IDEALX.org>
for the Debian GNU/Linux system.

=head1 COPYRIGHT

Copyright E<169> 1997,1998,1999,2000,2001 ComitE<233> RE<233>seau des UniversitE<233>s

Copyright E<169> 1997,1998,1999 Institut Pasteur & Christophe Wolfhugel

You may distribute this software under the terms of the GNU General
Public License Version 2 (L<http://www.gnu.org/copyleft/gpl.html>)

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts and no Back-Cover Texts.  A
copy of the license can be found under
L<http://www.gnu.org/licenses/fdl.html>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<wwsympa(8)>, L<mhonarc(1)>, L<sympa.conf(5)>.

=cut

## Options :  F         -> do not detach TTY
##         :  d		-> debug -d is equiv to -dF
## Now, it is impossible to use -dF but you have to write it -d -F

use lib '--modulesdir--';
use strict;
use warnings;
use FileHandle;
use Getopt::Long;
use Pod::Usage;
use POSIX;

use List;
use tracking;
use Sympa::BounceMessage;

## Check options
my %options;
unless (
    GetOptions(
        \%main::options, 'debug|d', 'help|h', 'log_level=s',
        'foreground|F'
    )
    ) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($main::options{'help'}) {
    pod2usage(0);
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1
    if ($main::options{'debug'} || $main::options{'foreground'});

my $daemon_name = Sympa::Log::Syslog::set_daemon($0);
my $ip          = $ENV{'REMOTE_HOST'};

# Load sympa.conf
unless (defined Sympa::Robot::get_robots()) {
    Sympa::Log::Syslog::fatal_err(
        'Unable to load sympa configuration, file %s has errors.',
        Sympa::Conf::get_sympa_conf());
}

##unshift @INC, Sympa::Site->wws_path;

## Check databse connectivity
unless (Sympa::DatabaseManager::check_db_connect()) {
    Sympa::Log::Syslog::fatal_err(
        'Database %s defined in sympa.conf has not the right structure or is unreachable.',
        Sympa::Site->db_name
    );
}

## Put ourselves in background if not in debug mode.
unless ($main::options{'debug'} || $main::options{'foreground'}) {

    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
        ioctl(TTY, 0x20007471, 0);    # XXX s/b &TIOCNOTTY

        #	ioctl(TTY, &TIOCNOTTY, 0);
        close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
        print STDOUT "Starting bounce daemon, PID $_\n";

        exit(0);
    }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});

## Create and write the PID file
tools::write_pid('bounced', $$, $options);
unless ($options->{'stderr_to_tty'}) {
    tools::direct_stderr_to_file(('pid' => $$));
}

if ($main::options{'log_level'}) {
    Sympa::Log::Syslog::set_log_level($main::options{'log_level'});
    Sympa::Log::Syslog::do_log(
        'info',
        'Configuration file read, log level set using options : %s',
        $main::options{'log_level'}
    );
} else {
    Sympa::Log::Syslog::set_log_level(Sympa::Site->log_level);
    Sympa::Log::Syslog::do_log('info',
        'Configuration file read, default log level %s',
        Sympa::Site->log_level);
}

Sympa::Log::Syslog::do_openlog(Sympa::Site->log_facility, Sympa::Site->log_socket_type,
    'bounced');

## Set the User ID & Group ID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
&POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
&POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (useful on OS X)
unless (($( == (getgrnam(Sympa::Constants::GROUP))[2])
    && ($< == (getpwnam(Sympa::Constants::USER))[2])) {
    Sympa::Log::Syslog::fatal_err(
        "Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via SUDO."
    );
}

## Sets the UMASK
umask(oct(Sympa::Site->umask));

## Change to list root
unless (chdir(Sympa::Site->home)) {
    Sympa::Log::Syslog::do_log('info', 'Unable to change directory');
    exit(-1);
}

Sympa::Log::Syslog::do_log('notice', "bounced Started");

## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

my $spool = new Sympa::ClassicSpool('bounce');

Sympa::Log::Syslog::do_log('debug', 'starting infinite loop');
## infinite loop scanning the queue (unless a sig TERM is received
while (!$end) {
    sleep Sympa::Site->sleep;

    Sympa::List::init_list_cache();

    # Process grouped notifications
    Sympa::Site->send_notify_to_listmaster(undef, undef, 1, undef);

    my $spooled_bounce;
    while ($spooled_bounce = $spool->next) {
        my $bounce = undef;
        $bounce = Sympa::BounceSympa::Message->new($spooled_bounce)
            if $spooled_bounce;
        unless ($bounce) {
            Sympa::Log::Syslog::do_log(
                'err',
                'Message %s: badly formatted bounce message. Ignoring.',
                $spooled_bounce->{'messagekey'}
            );
            $spool->move_to_bad($spooled_bounce->{'messagekey'});
            next;
        }
        if ($bounce->process) {
            unless ($spool->remove_message($bounce->{'messagekey'})) {
                Sympa::Log::Syslog::do_log('err',
                    'Could not remove message %s from bounce spool', $bounce);
                $spool->move_to_bad($bounce->{'messagekey'});
                last;
            }
        } else {
            $spool->move_to_bad($bounce->{'messagekey'});
        }
        ## Free zombie sendmail processes
        Sympa::Mail::reaper;
    }
}

# Purge grouped notifications
Sympa::Site->send_notify_to_listmaster(undef, undef, undef, 1);

Sympa::Log::Syslog::do_log('notice', 'bounced exited normally due to signal');
tools::remove_pid('bounced', $$);

exit(0);

## When we catch SIGTERM, just change the value of the loop
## variable.
sub sigterm {
    $end = 1;
}
