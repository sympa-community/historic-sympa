#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997-1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997-2011 Comite Reseau des Universites
# Copyright (c) 2011-2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

bounced, bounced.pl - Daemon processing non-delivery notifications

=head1 SYNOPSIS

B<bounced.pl>
    S<[ B<-d, --debug> ]>
    S<[ B<-F, --foreground> ]>
    S<[ B<--log-level>=I<level> ]>

B<bounced.pl> B<-h, --help>

=head1 DESCRIPTION

B<bounced.pl> is a daemon scanning the B<bounce> spool content, processing
non-delivery notifications. Invalid addresses are tagged in the database, and
the last notification is kept for each one.

List owners will latter access bounces information via WWSympa.

=head1 OPTIONS

These programs follow the usual GNU command line syntax,
with long options starting with two dashes (`-').  A summary of
options is included below.

=over 5

=item B<-d>, B<--debug>

Run in debug mode.

=item B<-F>, B<--foreground>

Do not detach from TTY.

=item B<-h>, B<--help>

Print this help message.

=item B<--log_level>=I<level>

Set log level.

=back

=head1 FILES

F<--CONFIG--> Sympa configuration file.

F<--libexecdir--/bouncequeue> bounce spooler, referenced from sendmail alias file

F<--spooldir--/bounce> incoming bounces directory

F<--piddir--/bounced.pid> this file contains the process ID
of F<bounced.pl>.

=head1 MORE DOCUMENTATION

The full documentation can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 AUTHORS

=over 4

=item Serge Aumont

ComitE<233> RE<233>seau des UniversitE<233>s

=item Olivier SalaE<252>n

ComitE<233> RE<233>seau des UniversitE<233>s

=back

Contact authors at <sympa-authors@listes.renater.fr>

This manual page was initially written by
JE<233>rE<244>me Marant <jerome.marant@IDEALX.org>
for the Debian GNU/Linux system.

=head1 COPYRIGHT

Copyright E<169> 1997,1998,1999,2000,2001 ComitE<233> RE<233>seau des UniversitE<233>s

Copyright E<169> 1997,1998,1999 Institut Pasteur & Christophe Wolfhugel

You may distribute this software under the terms of the GNU General
Public License Version 2 (L<http://www.gnu.org/copyleft/gpl.html>)

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts and no Back-Cover Texts.  A
copy of the license can be found under
L<http://www.gnu.org/licenses/fdl.html>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<wwsympa(8)>, L<mhonarc(1)>, L<sympa.conf(5)>.

=cut

use strict;
use warnings;
use lib '--modulesdir--';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use Sympa::BounceMessage;
use Sympa::DatabaseManager;
use Sympa::List;
use Sympa::Mailer;
use Sympa::Robot;
use Sympa::Site;
use Sympa::Spool::File;
use Sympa::Tools::Daemon;

my $daemon_name = 'bounced';

my %options;
unless (
    GetOptions(
        \%options,
        'debug|d',
        'foreground|F',
        'help|h',
        'log_level=s',
    )) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($options{'help'}) {
    pod2usage(0);
}

if ($options{'debug'}) {
    $options{'log_level'} = 2 unless ($options{'log_level'});
    $options{'foreground'} = 1;
}

$options{'log_to_stderr'} = 1 if $options{'foreground'};

# load configuration
unless (defined Sympa::Robot::get_robots()) {
    Sympa::Tools::Daemon::terminate_on_expected_error(
        'Unable to load sympa configuration, file %s has errors.',
        Sympa::Conf::get_sympa_conf()
    );
}

# initialize database access
unless (Sympa::DatabaseManager::check_db_connect()) {
    Sympa::Tools::Daemon::terminate_on_expected_error(
        'Database %s defined in sympa.conf has not the right structure or is unreachable.',
        Sympa::Site->db_name
    );
}

# initialize logging subsystem
if ($options{'log_level'}) {
    Sympa::Log::Syslog::set_log_level($options{'log_level'});
    Sympa::Log::Syslog::do_log(
        Sympa::Log::Syslog::INFO,
        'Configuration file read, log level set using options : %s',
        $options{'log_level'}
    );
} else {
    Sympa::Log::Syslog::set_log_level(Sympa::Site->log_level);
    Sympa::Log::Syslog::do_log(Sympa::Log::Syslog::INFO,
        'Configuration file read, default log level %s',
        Sympa::Site->log_level);
}

Sympa::Log::Syslog::do_openlog(Sympa::Site->log_facility, $daemon_name);

# initialize SMTP subsystem
our $mailer = Sympa::Mailer->new(
    db_type         => Sympa::Site->db_type(),
    nrcpt_by_domain => Sympa::Site->nrcpt_by_domain(),
);

# initialize i18n subsystem
Sympa::Language::SetLang(Sympa::Site->lang || 'en');

# put ourselves in background if not in debug mode.
Sympa::Tools::Daemon::daemonize(name => $daemon_name)
    unless $options{'foreground'};

# check presence of a PID file from a previous execution
Sympa::Tools::Daemon::check_old_pid_file(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    tmpdir => Sympa::Site->tmpdir(),
);

# Create the PID file
Sympa::Tools::Daemon::write_pid(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    user   => Sympa::Constants::USER,
    group  => Sympa::Constants::GROUP,
);
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

# Redirect STDERR to a file, unless the process is running in foreground
unless ($options{'foreground'}) {
    Sympa::Tools::Daemon::direct_stderr_to_file(
        tmpdir => Sympa::Site->tmpdir(),
        user   => Sympa::Constants::USER,
        group  => Sympa::Constants::GROUP,
    );
}

eval {
    Sympa::Tools::Daemon::drop_privileges(
        user  => Sympa::Constants::USER,
        group => Sympa::Constants::GROUP
    );
};
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

## Sets the UMASK
umask(oct(Sympa::Site->umask));

## Change to list root
unless (chdir(Sympa::Site->home)) {
    Sympa::Log::Syslog::do_log(Sympa::Log::Syslog::INFO, 'Unable to change directory');
    exit(-1);
}

## Catch SIGTERM, in order to exit cleanly, whenever possible.
my $end = 0;
$SIG{'TERM'} = sub { $end = 1 };

# Catch fatal errors, to generate traceback.
$SIG{'__DIE__'} = sub {
    return if $EXCEPTIONS_BEING_CAUGHT;    # invoked from inside eval.
    Sympa::Tools::Daemon::terminate_on_unexpected_error(@_);
};

my $spool = Sympa::Spool::File->new('bounce');

Sympa::Log::Syslog::do_log(Sympa::Log::Syslog::NOTICE, "bounced started");

# infinite loop, until a sig TERM is received
while (!$end) {
    sleep Sympa::Site->sleep;

    Sympa::List::init_list_cache();

    # Process grouped notifications
    Sympa::Site->send_notify_to_listmaster(undef, undef, 1, undef);

    my $spooled_bounce;
    while ($spooled_bounce = $spool->next) {
        my $bounce = undef;
        $bounce = Sympa::BounceMessage->new($spooled_bounce)
            if $spooled_bounce;
        unless ($bounce) {
            Sympa::Log::Syslog::do_log(
                Sympa::Log::Syslog::ERR,
                'Message %s: badly formatted bounce message. Ignoring.',
                $spooled_bounce->{'messagekey'}
            );
            $spool->move_to_bad($spooled_bounce->{'messagekey'});
            next;
        }
        if ($bounce->process) {
            unless ($spool->remove_message($bounce->{'messagekey'})) {
                Sympa::Log::Syslog::do_log(Sympa::Log::Syslog::ERR,
                    'Could not remove message %s from bounce spool', $bounce);
                $spool->move_to_bad($bounce->{'messagekey'});
                last;
            }
        } else {
            $spool->move_to_bad($bounce->{'messagekey'});
        }
        ## Free zombie sendmail processes
        $mailer->reaper();
    }
}

# Purge grouped notifications
Sympa::Site->send_notify_to_listmaster(undef, undef, undef, 1);

Sympa::Log::Syslog::do_log(
    Sympa::Log::Syslog::NOTICE,
    'bounced exited normally due to signal'
);

Sympa::Tools::Daemon::remove_pid(
    name   => $daemon_name,
    piddir => Sympa::Constants::PIDDIR,
    tmpdir => Sympa::Site->tmpdir(),
);
Sympa::Tools::Daemon::terminate_on_expected_error($EVAL_ERROR) if $EVAL_ERROR;

exit(0);
