#!--PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997, 1998, 1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
# 2006, 2007, 2008, 2009, 2010, 2011 Comite Reseau des Universites
# Copyright (c) 2011, 2012, 2013, 2014 GIP RENATER
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Worl Wide Sympa is a front-end to Sympa Mailing Lists Manager
## Copyright Comite Reseau des Universites

## Patch 2001.07.24 by nablaphi <nablaphi@bigfoot.com>
## Change the Getopt::Std to Getopt::Long

use lib split(/:/, $ENV{SYMPALIB} || ''), '--modulesdir--';
use strict;
use warnings;
use English qw(-no_match_vars);
use Getopt::Long;
use Mail::Address;
use MIME::Parser;
use Pod::Usage;
use POSIX qw();

use Sympa::Alarm;
use Bounce;
use Conf;
use Sympa::Constants;
use Sympa::Crash;    # Show traceback.
use Sympa::List;
use Log;
use Sympa::Mail;
use Sympa::Regexps;
use Sympa::Scenario;
use SDM;
use tools;
use Sympa::Tools::Daemon;
use Sympa::Tools::Data;
use Sympa::Tracking;

## Equivalents relative to RFC 1893
my %equiv = (
    "user unknown"                                                => '5.1.1',
    "receiver not found"                                          => '5.1.1',
    "the recipient name is not recognized"                        => '5.1.1',
    "sorry, no mailbox here by that name"                         => '5.1.1',
    "utilisateur non recens\xE9 dans le carnet d'adresses public" => '5.1.1',
    "unknown address"                                             => '5.1.1',
    "unknown user"                                                => '5.1.1',
    "550"                                                         => '5.1.1',
    "le nom du destinataire n'est pas reconnu"                    => '5.1.1',
    "user not listed in public name & address book"               => '5.1.1',
    "no such address"                                             => '5.1.1',
    "not known at this site."                                     => '5.1.1',
    "user not known"                                              => '5.1.1',

    "user is over the quota. you can try again later." => '4.2.2',
    "quota exceeded"                                   => '4.2.2',
    "write error to mailbox, disk quota exceeded"      => '4.2.2',
    "user mailbox exceeds allowed size"                => '4.2.2',
    "insufficient system storage"                      => '4.2.2',
    "User's Disk Quota Exceeded:"                      => '4.2.2'
);

## Check options
my %options;
unless (
    GetOptions(
        \%main::options, 'config|f=s',   'debug|d', 'help|h',
        'log_level=s',   'foreground|F', 'version|v',
    )
    ) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($main::options{'help'}) {
    pod2usage(0);
} elsif ($main::options{'version'}) {
    printf "Sympa %s\n", Sympa::Constants::VERSION;
    exit 0;
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1
    if ($main::options{'debug'} || $main::options{'foreground'});

my $daemon_name = Log::set_daemon($0);
my $ip          = $ENV{'REMOTE_HOST'};

# Load sympa.conf
unless (Conf::load()) {
    printf STDERR
        "Unable to load sympa configuration, file %s has errors.\n",
        Conf::get_sympa_conf();
    exit 1;
}

##unshift @INC, $Conf::Conf{'wws_path'};

## Check databse connectivity
unless (SDM::check_db_connect()) {
    Log::fatal_err(
        'Database %s defined in sympa.conf has not the right structure or is unreachable.',
        $Conf::Conf{'db_name'}
    );
}

## Put ourselves in background if not in debug mode.
unless ($main::options{'debug'} || $main::options{'foreground'}) {

    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
        ioctl(TTY, 0x20007471, 0);    # XXX s/b TIOCNOTTY()
        close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
        print STDOUT "Starting bounce daemon, pid $_\n";

        exit(0);
    }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});

## Create and write the PID file
Sympa::Tools::Daemon::write_pid('bounced', $PID, $options);
unless ($options->{'stderr_to_tty'}) {
    Sympa::Tools::Daemon::direct_stderr_to_file(('pid' => $PID));
}

if ($main::options{'log_level'}) {
    Log::set_log_level($main::options{'log_level'});
    Log::do_log(
        'info',
        'Configuration file read, log level set using options: %s',
        $main::options{'log_level'}
    );
} else {
    Log::set_log_level($Conf::Conf{'log_level'});
    Log::do_log(
        'info',
        'Configuration file read, default log level %s',
        $Conf::Conf{'log_level'}
    );
}

my $log_facility = $Conf::Conf{'log_facility'} || $Conf::Conf{'syslog'};
Log::do_openlog($log_facility, $Conf::Conf{'log_socket_type'}, 'bounced');

## Set the User ID & Group ID for the process
$GID = $EGID = (getgrnam(Sympa::Constants::GROUP))[2];
$UID = $EUID = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs
## (effective UID + real UID + saved UID)
POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (useful on OS X)
unless (($GID == (getgrnam(Sympa::Constants::GROUP))[2])
    && ($UID == (getpwnam(Sympa::Constants::USER))[2])) {
    Log::fatal_err(
        "Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via sudo."
    );
}

## Sets the UMASK
umask(oct($Conf::Conf{'umask'}));

## Change to list root
unless (chdir($Conf::Conf{'home'})) {
    die sprintf "Unable to change directory to %s: %s", $Conf::Conf{'home'},
        $!;
}

Log::do_log('notice', 'Bounced Started');

## Catch signals, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
$SIG{'INT'}  = \&sigterm;
my $end = 0;

my $queue = $Conf::Conf{'queuebounce'};

Log::do_log('debug', 'Starting infinite loop');
## infinite loop scanning the queue (unless a sig TERM is received
while (!$end) {
    ## this sleep is important to be raisonably sure that sympa is not
    ## currently
    ## writting the file this deamon is openning.

    sleep $Conf::Conf{'sleep'};

    Sympa::List::init_list_cache();
    # Process grouped notifications
    Sympa::Alarm::flush();

    unless (opendir DIR, $queue) {
        die sprintf 'Can\'t open dir %s: %s', $queue, $!;
        ## No return.
    }

    my @files = (sort grep(!/^(\.|T\.|BAD\-)/, readdir DIR));
    closedir DIR;

    foreach my $file (@files) {

        last if $end;
        next unless (-f "$queue/$file");

        next if $file =~ /,lock/;    # Skip lock.

        unless ($file =~ /^(\S+)\.\d+\.\d+$/) {
            my @s = stat("$queue/$file");
            if (POSIX::S_ISREG($s[2])) {
                Log::do_log('notice',
                    'Ignoring file %s/%s because unknown format',
                    $queue, $file);
                ignore_bounce(
                    {   'file'  => $file,
                        'queue' => $queue,
                    }
                );
                unlink("$queue/$file");
            }
            next;
        }

        if ($file =~ /^(\S+)\.\d+\.\d+$/) {
            my ($listname, $robot) = split(/\@/, $1);
            $robot ||= Sympa::List::search_list_among_robots($listname);
        }

        my ($listname, $robot) = split(/\@/, $1);
        $robot ||= Sympa::List::search_list_among_robots($listname);

        if (-z "$queue/$file") {
            Log::do_log('notice', 'Ignoring file %s/%s because empty file',
                $queue, $file);
            ignore_bounce(
                {   'file'  => $file,
                    'robot' => $robot,
                    'queue' => $queue,
                }
            );
            unlink("$queue/$file");
        }

        unless (open BOUNCE, "$queue/$file") {
            Log::do_log('notice', 'Could not open %s/%s: %s',
                $queue, $file, $!);
            ignore_bounce(
                {   'file'  => $file,
                    'robot' => $robot,
                    'queue' => $queue,
                }
            );
            next;
        }
        my $parser = MIME::Parser->new;
        $parser->output_to_core(1);
        my $entity = $parser->read(\*BOUNCE);
        my $head   = $entity->head;

        ## Some MTAs decorate To: field of DSN as "mailbox <address>".
        ## Pick address only.
        my $to;
        my $to_header = $head->get('to', 0);
        if ($to_header) {
            my @to = Mail::Address->parse($to_header);
            if (@to and $to[0] and $to[0]->address) {
                $to = $to[0]->address;
            }
        }

        my $notification_as_string = $entity->as_string;
        close BOUNCE;

        my $who;
        my $distribution_id;
        Log::do_log(
            'debug', 'Bounce for: %s: Conf{bounce_email_prefix}=%',
            $to,     $Conf::Conf{'bounce_email_prefix'}
        );

        if ($to and $to =~ /^$Conf::Conf{'bounce_email_prefix'}\+(.*)\@(.*)$/)
        {
            # VERP in use
            my $local_part = $1;
            my $robot      = $2;
            my $unique;
            if ($local_part =~ /^(.*)(\=\=([wr]))$/) {
                $local_part = $1;
                $unique     = $2;
            } elsif ($local_part =~ /^(.*)\=\=a\=\=(.*)\=\=(.*)\=\=(.*)$/)
            {    # Tracking in use

                $distribution_id = $4;
                $local_part =~ /^(.*)\=\=(.*)$/;
                $local_part = $1;
            } else {
                undef $distribution_id;
                Log::do_log('err', 'NOT ID PART in the bounce for: %s', $to);
            }

            $local_part =~ s/\=\=a\=\=/\@/;
            $local_part =~ /^(.*)\=\=(.*)$/;
            $who      = $1;
            $listname = $2;

            Log::do_log('notice',
                'VERP in use: bounce related to %s for list %s@%s',
                $who, $listname, $robot);

            if ($unique =~ /[wr]/) {
                # in this case the bounce result from a remind or a welcome
                # message ;so try to remove the subscriber
                Log::do_log('debug',
                    "VERP for a service message, try to remove the subscriber"
                );
                my $list = Sympa::List->new($listname, $robot);
                unless ($list) {
                    Log::do_log('notice',
                        'Skipping bouncefile %s for unknown list %s@%s',
                        $file, $listname, $robot);
                    ignore_bounce(
                        {   'file'  => $file,
                            'robot' => $robot,
                            'queue' => $queue,
                        }
                    );
                    unlink("$queue/$file");
                    next;
                }
                my $result = Sympa::Scenario::request_action(
                    $list, 'del', 'smtp',
                    {   'sender' => $Conf::Conf{'listmasters'}[0],
                        'email'  => $who
                    }
                );
                my $action;
                $action = $result->{'action'} if (ref($result) eq 'HASH');

                if ($action =~ /do_it/i) {
                    if ($list->is_list_member($who)) {
                        my $u = $list->delete_list_member(
                            'users'   => [$who],
                            'exclude' => ' 1'
                        );
                        Log::do_log('notice',
                            "$who has been removed from $listname because welcome message bounced"
                        );
                        Log::db_log(
                            {   'robot'        => $list->{'domain'},
                                'list'         => $list->{'name'},
                                'action'       => 'del',
                                'target_email' => $who,
                                'status'       => 'error',
                                'error_type'   => 'welcome_bounced',
                                'daemon'       => 'bounced'
                            }
                        );

                        Log::db_stat_log(
                            {   'robot'     => $list->{'domain'},
                                'list'      => $list->{'name'},
                                'operation' => 'auto_del',
                                'parameter' => "",
                                'mail'      => $who,
                                'client'    => "",
                                'daemon'    => 'bounced.pl'
                            }
                        );

                        if ($action =~ /notify/) {
                            $list->send_notify_to_owner(
                                'automatic_del',
                                {   'who'    => $who,
                                    'by'     => 'bounce manager',
                                    'reason' => 'welcome'
                                }
                            );
                        }
                    }
                } else {
                    Log::do_log('notice',
                        "Unable to remove $who from $listname (welcome message bounced but del is closed)"
                    );
                    ignore_bounce(
                        {   'file'  => $file,
                            'robot' => $robot,
                            'queue' => $queue,
                        }
                    );
                }
                unlink("$queue/$file");
                next;
            }    # close VERP + remind or welcome block
        }    # close VERP in use block

        my $list = Sympa::List->new($listname, $robot);
        unless ($list) {
            Log::do_log('err',
                'Skipping bouncefile %s for unknown list %s@%s',
                $file, $listname, $robot);
            ignore_bounce(
                {   'file'  => $file,
                    'robot' => $robot,
                    'queue' => $queue,
                }
            );
            unlink("$queue/$file");
            next;
        }

        # ---
        # If the DSN notification is correct and the tracking mode is enable,
        # it will be inserted in the database
        my $tracking_in_use = 1
            if Sympa::Tools::Data::smart_eq(
            $list->{'admin'}{'tracking'}{'delivery_status_notification'},
            'on')
            or Sympa::Tools::Data::smart_eq(
            $list->{'admin'}{'tracking'}{'message_disposition_notification'},
            qr/\A(on|on_demand)\z/
            );

        my $eff_type = $entity->effective_type || '';
        my $report_type =
            lc($head->mime_attr('Content-Type.Report-Type') || '');

        if (    $eff_type eq 'multipart/report'
            and $report_type eq 'delivery-status'
            and $tracking_in_use) {
            my @parts = $entity->parts();
            my $original_rcpt;
            my $final_rcpt;
            my $user_agent;
            my $version;
            my $dsn_status;
            my $msg_id;
            my $orig_msg_id;
            my $listname;
            my $arrival_date;

            $msg_id = $head->get('Message-Id');
            chomp $msg_id;

            my $date = $head->get('Date');

            foreach my $p (@parts) {
                my $h       = $p->head();
                my $content = $h->get('Content-type');

                if ($content =~ /message\/delivery-status/) {
                    my @report = split(/\n/, $p->bodyhandle->as_string());
                    foreach my $line (@report) {
                        $line = lc($line);
                        # Action Field MUST be present in a DSN report,
                        # possible values : failed, delayed, delivered,
                        # relayed, expanded(rfc3464)
                        if ($line =~ /action\:\s*(.+)/i) {
                            $dsn_status = $1;
                            chomp $dsn_status;
                        }

                        if (   ($line =~ /final\-recipient\:\s*(.+)\s*$/i)
                            && (not $final_rcpt)) {
                            $final_rcpt = $1;
                            chomp $final_rcpt;
                            my @rcpt;
                            if ($final_rcpt =~ /.*;.*/) {
                                @rcpt = split /;\s*/, $final_rcpt;
                                foreach my $rcpt (@rcpt) {
                                    if ($rcpt =~ /(\S+\@\S+)/) {
                                        ($rcpt) = $rcpt =~ /(\S+\@\S+)/;
                                        $final_rcpt = $rcpt;
                                    }
                                }
                            } else {
                                ($final_rcpt) = $final_rcpt =~ /(\S+\@\S+)/;
                            }
                        }
                        #  $distribution_id is set using VERP nothing else.
                        # if ( ($line =~ /original\-envelope\-id\:\s*(.+)/i)
                        # && (!$distribution_id) ) {
                        #    $distribution_id = $1;
                        #    chomp $distribution_id;
                        #    Log::do_log
                        #    ('debug2',"1 - Original Envelope-id Detected, value : %s",
                        #    $distribution_id);
                        #}
                        if ($line =~ /arrival\-date\:\s*(.+)/i) {
                            $arrival_date = $1;
                            chomp $arrival_date;
                        }
                    }
                }
            }

            $original_rcpt = $who;

            if ($final_rcpt =~ /<(\S+\@\S+)>/) {
                ($final_rcpt) = $final_rcpt =~ /<(\S+\@\S+)>/;
            }
            if ($msg_id =~ /<(\S+\@\S+)>/) {
                ($msg_id) = $msg_id =~ /<(\S+\@\S+)>/;
            }

            Log::do_log('debug2', 'FINAL DSN Action Detected, value: %s',
                $dsn_status);
            Log::do_log('debug2', 'FINAL DSN Recipient Detected, value: %s',
                $original_rcpt);
            Log::do_log('debug2',
                'FINAL DSN final Recipient Detected, value: %s', $final_rcpt);
            Log::do_log('debug2', 'FINAL DSN message ID Detected, value: %s',
                $msg_id);
            Log::do_log('debug2',
                'FINAL DSN Arrival Date Detected, value: %s',
                $arrival_date);

            unless ($dsn_status =~ /failed/) {
                # DSN with status "failed" should not be removed because they
                # must be processed for classical bounce managment (not only
                # for tracking feature)
                Log::do_log('err', 'Non failed dsn status %s', $dsn_status);
                unless ($distribution_id) {
                    Log::do_log('err',
                        'Id not found in to address %s, will ignore', $to);
                    unlink("$queue/$file");
                    next;
                }
                unless ($original_rcpt) {
                    Log::do_log(
                        'err',
                        'Original recipient not found in dsn: %s, will ignore',
                        $msg_id
                    );
                    unlink("$queue/$file");
                    next;
                }
                unless ($msg_id) {
                    Log::do_log('err',
                        'Message_id not found in dsn will ignore');
                    unlink("$queue/$file");
                    next;
                }
            }

            if (Sympa::Tracking::db_insert_notification(
                    $distribution_id, 'DSN',
                    $dsn_status,      $arrival_date,
                    $notification_as_string
                )
                ) {
                Log::do_log('notice', "DSN Correctly treated...");
            } else {
                Log::do_log('err',
                    'Not able to fill database with notification data');
            }
            unless ($dsn_status =~ /failed/) {
                if (unlink("$queue/$file")) {
                    Log::do_log('debug2', "DSN Correctly removed...");
                } else {
                    Log::do_log('err', 'Could not unlink %s/%s',
                        $queue, $file);
                }
                next;
            }
        }
        # ---
        # If the MDN notification is correct and the tracking mode is enabled,
        # it will be inserted in the database
        if (    $eff_type eq 'multipart/report'
            and $report_type eq 'disposition-notification'
            and Sympa::Tools::Data::smart_eq(
                $list->{'admin'}{'tracking'}
                    {'message_disposition_notification'},
                qr/\A(on|on_demand)\z/
            )
            ) {

            my @parts = $entity->parts();
            my $original_rcpt;
            my $final_rcpt;
            my $user_agent;
            my $version;
            my $dsn_status;
            my $msg_id;
            my $orig_msg_id;
            my $listname;
            my $date;
            my $mdn_status;

            $msg_id = $head->get('Message-Id');
            chomp $msg_id;

            $date = $head->get('Date');

            foreach my $p (@parts) {
                my $h       = $p->head();
                my $content = $h->get('Content-type');

                if ($content =~ /message\/disposition-notification/) {
                    my @report = split(/\n/, $p->bodyhandle->as_string());
                    foreach my $line (@report) {
                        $line = lc($line);
# Disposition Field MUST be present in a MDN report, possible values :
# displayed, deleted(rfc3798)
                        if ($line =~ /disposition\:\s*(.+)\s*\;\s*(.+)/i) {
                            $mdn_status = $2;
                            if ($mdn_status =~ /.*\/.*/) {
                                my @results = split /\/\s*/, $mdn_status;
                                $mdn_status = $results[$0];
                                chomp $mdn_status;
                            }
                        }
                        if (   ($line =~ /final\-recipient\:\s*(.+)\s*$/i)
                            && (not $final_rcpt)) {
                            $final_rcpt = $1;
                            chomp $final_rcpt;
                            my @rcpt;
                            if ($final_rcpt =~ /.*;.*/) {
                                @rcpt = split /;\s*/, $final_rcpt;
                                foreach my $rcpt (@rcpt) {
                                    if ($rcpt =~ /(\S+\@\S+)/) {
                                        ($rcpt) = $rcpt =~ /(\S+\@\S+)/;
                                        $final_rcpt = $rcpt;
                                    }
                                }
                            } else {
                                ($final_rcpt) = $final_rcpt =~ /(\S+\@\S+)/;
                            }
                        }
                    }
                }
            }

            if ($original_rcpt =~ /<(\S+\@\S+)>/) {
                ($original_rcpt) = $original_rcpt =~ /<(\S+\@\S+)>/;
            }
            if ($final_rcpt =~ /<(\S+\@\S+)>/) {
                ($final_rcpt) = $final_rcpt =~ /<(\S+\@\S+)>/;
            }
            if ($msg_id =~ /<(\S+\@\S+)>/) {
                ($msg_id) = $msg_id =~ /<(\S+\@\S+)>/;
            }
            # let's use VERP
            $original_rcpt = $who;

            Log::do_log('debug2', 'FINAL MDN Disposition Detected, value: %s',
                $mdn_status);
            Log::do_log('debug2', 'FINAL MDN Recipient Detected, value: %s',
                $original_rcpt);
            Log::do_log('debug2', 'FINAL MDN message ID Detected, value: %s',
                $msg_id);
            Log::do_log('debug2', 'FINAL MDN Date Detected, value: %s',
                $date);

            unless ($distribution_id) {
                Log::do_log('err',
                    'Id not found in to address %s, will ignore', $to);
                unlink("$queue/$file");
                next;
            }
            unless ($original_rcpt) {
                Log::do_log('err',
                    'Original recipient not found in dsn: %s, will ignore',
                    $msg_id);
                unlink("$queue/$file");
                next;
            }
            unless ($msg_id) {
                Log::do_log('err', 'Message_id not found in dsn will ignore');
                unlink("$queue/$file");
                next;
            }
            unless ($mdn_status) {
                Log::do_log('err',
                    'Dsn status not found in dsn: %s, will ignore', $msg_id);
                unlink("$queue/$file");
                next;
            }

            Log::do_log('debug2', "Save in database...");
            unless (
                Sympa::Tracking::db_insert_notification(
                    $distribution_id, 'MDN', $mdn_status,
                    $date,            $notification_as_string
                )
                ) {
                Log::do_log('err',
                    'Not able to fill database with notification data');
            }
            Log::do_log('notice', "MDN Correctly treated...");
            if (unlink("$queue/$file")) {
                Log::do_log('debug2', "MDN Correctly removed...");
            } else {
                Log::do_log('debug2', 'Could not unlink queue/%s', $file);
            }
            next;
        }

        if (    $eff_type eq 'multipart/report'
            and $report_type eq 'feedback-report') {
            # this case a report Email Feedback Reports
            # http://www.shaftek.org/publications/drafts/abuse-report/draft-shafranovich-feedback-report-01.txt
            # mainly use by AOL
            Log::do_log('notice', 'Processing Email Feedback Report');
            my @parts = $entity->parts();
            my $original_rcpt;
            my $user_agent;
            my $version;
            my $feedback_type = '';
            my $listname;
            my $robot;

            foreach my $p (@parts) {
                my $h       = $p->head();
                my $content = $h->get('Content-type');
                next if ($content =~ /text\/plain/i);
                if ($content =~ /message\/feedback-report/) {
                    my @report = split(/\n/, $p->bodyhandle->as_string());
                    foreach my $line (@report) {
                        $feedback_type = 'abuse'
                            if ($line =~ /Feedback\-Type\:\s*abuse/i);
                        if ($line =~ /Feedback\-Type\:\s*(.*)/i) {
                            $feedback_type = $1;
                        }

                        if ($line =~ /User\-Agent\:\s*(.*)/i) {
                            $user_agent = $1;
                        }
                        if ($line =~ /Version\:\s*(.*)/i) {
                            $version = $1;
                        }
                        my $email_regexp = Sympa::Regexps::email();
                        if ($line =~
                            /Original\-Rcpt\-To\:\s*($email_regexp)\s*$/i) {
                            $original_rcpt = $1;
                            chomp $original_rcpt;
                        }
                    }
                } elsif ($content =~ /message\/rfc822/) {
                    # Log::do_log
                    # ('notice',"xxx processing  Email Feedback Report : message/rfc822 part");
                    my @subparts = $p->parts();
                    foreach my $subp (@subparts) {
                        # Log::do_log ('notice',"xxx subparts : subps");
                        my $subph = $subp->head;
                        $listname = $subph->get('X-Loop');
                    }
                    # Log::do_log
                    # ('notice',"xxx processing  Email Feedback Report : extract listname $listname");
                }
            }
            my $forward;
            ## RFC compliance remark: We do something if there is an abuse or
            ## an unsubscribe request.
            ## We don't throw an error if we find another kind of feedback
            ## (fraud, miscategorized, not-spam, virus or other)
            ## but we don't take action if we meet them yet. This is to be
            ## done, if relevant.
            if ((   $feedback_type =~
                    /(abuse|opt-out|opt-out-list|fraud|miscategorized|not-spam|virus|other)/i
                )
                && (defined $version)
                && (defined $user_agent)
                ) {

                Log::do_log('debug',
                    "Email Feedback Report: $listname feedback-type: $feedback_type"
                );
                if (defined $original_rcpt) {
                    Log::do_log('debug', 'Recognized user: %s list',
                        $original_rcpt);
                    my @lists;

                    if (   ($feedback_type =~ /(opt-out-list|abuse)/i)
                        && (defined $listname)) {
                        $listname = lc($listname);
                        chomp $listname;
                        $listname =~ /(.*)\@(.*)/;
                        $listname = $1;
                        $robot    = $2;
                        my $list = Sympa::List->new($listname, $robot);
                        unless ($list) {
                            Log::do_log(
                                'err',
                                'Skipping Feedback Report for unknown list %s@%s',
                                $file,
                                $listname,
                                $robot
                            );
                            ignore_bounce(
                                {   'file'  => $file,
                                    'robot' => $robot,
                                    'queue' => $queue,
                                }
                            );
                            unlink("$queue/$file");
                            next;
                        }
                        push @lists, $list;
                    } elsif ($feedback_type =~ /opt-out/
                        && (defined $original_rcpt)) {
                        @lists =
                            Sympa::List::get_which($original_rcpt, $robot,
                            'member');
                    } else {
                        Log::do_log(
                            'notice',
                            'Ignoring Feedback Report %s: Nothing to do for this feedback type.(feedback_type:%s, original_rcpt:%s, listname:%s)',
                            $file,
                            $feedback_type,
                            $original_rcpt,
                            $listname
                        );
                        ignore_bounce(
                            {   'file'  => $file,
                                'robot' => $robot,
                                'queue' => $queue,
                            }
                        );
                    }
                    foreach my $list (@lists) {
                        my $result =
                            Sympa::Scenario::request_action($list,
                            'unsubscribe', 'smtp',
                            {'sender' => $original_rcpt});
                        my $action;
                        $action = $result->{'action'}
                            if (ref($result) eq 'HASH');
                        if ($action =~ /do_it/i) {
                            if ($list->is_list_member($original_rcpt)) {
                                my $u = $list->delete_list_member(
                                    'users'   => [$original_rcpt],
                                    'exclude' => ' 1'
                                );

                                Log::do_log(
                                    'notice',
                                    '%s has been removed from %s because abuse feedback report',
                                    $original_rcpt,
                                    $list
                                );
                                $list->send_notify_to_owner(
                                    'automatic_del',
                                    {   'who' => $original_rcpt,
                                        'by'  => 'listmaster'
                                    }
                                );
                            } else {
                                Log::do_log(
                                    'err',
                                    'Ignore Feedback Report %s for list %s: user %s not subscribed',
                                    $file,
                                    $list,
                                    $original_rcpt
                                );
                                $list->send_notify_to_owner('warn-signoff',
                                    {'who' => $original_rcpt});
                            }
                        } else {
                            $forward = 'request';
                            Log::do_log(
                                'err',
                                'Ignore Feedback Report %s for list %s@%s: user %s is not allowed to unsubscribe',
                                $file,
                                $list,
                                $original_rcpt
                            );
                        }
                    }
                } else {
                    Log::do_log(
                        'err',
                        'Ignoring Feedback Report %s: Unknown Original-Rcpt-To field. Can\'t do anything. (feedback_type:%s, listname:%s)',
                        $file,
                        $feedback_type,
                        $listname
                    );
                    ignore_bounce(
                        {   'file'   => $file,
                            'notify' => 1,
                            'robot'  => $robot,
                            'queue'  => $queue,
                            'error' =>
                                "Unknown Original-Rcpt-To field (feedback_type:$feedback_type, listname:$listname)",
                        }
                    );
                }
            } else {
                Log::do_log(
                    'err',
                    'Ignoring Feedback Report %s: Unknown format (feedback_type:%s, original_rcpt:%s, listname:%s)',
                    $file,
                    $feedback_type,
                    $original_rcpt,
                    $listname
                );
                ignore_bounce(
                    {   'file'   => $file,
                        'notify' => 1,
                        'robot'  => $robot,
                        'queue'  => $queue,
                        'error' =>
                            "Unknown format (feedback_type:$feedback_type, original_rcpt:$original_rcpt, listname:$listname)",
                    }
                );
            }
            if (-f "$queue/$file") {
                unlink("$queue/$file");
            }
            next;
        }

        # Fin section feedback report
        # else (not welcome or remind)
        $list = Sympa::List->new($listname, $robot);
        if (!$list) {
            Log::do_log('err',
                'Skipping bouncefile %s for unknown list %s@%s',
                $file, $listname, $robot);
            ignore_bounce(
                {   'file'  => $file,
                    'robot' => $robot,
                    'queue' => $queue,
                }
            );
            unlink("$queue/$file");
            next;
        } else {
            Log::do_log('debug', 'Processing bouncefile %s for list %s',
                $file, $list);

            unless (open BOUNCE, "$queue/$file") {
                Log::do_log('notice', 'Could not open %s/%s: %s',
                    $queue, $file, $!);
                ignore_bounce(
                    {   'file'  => $file,
                        'robot' => $robot,
                        'queue' => $queue,
                    }
                );
                next;
            }

            my (%hash, $from);
            my $bounce_dir = $list->get_bounce_dir();

            ## RFC1891 compliance check
            my $bounce_count = Bounce::rfc1891(\*BOUNCE, \%hash, \$from);

            unless ($bounce_count) {
                close BOUNCE;
                unless (open BOUNCE, "$queue/$file") {
                    Log::do_log('notice', 'Could not open %s/%s: %s',
                        $queue, $file, $!);
                    ignore_bounce(
                        {   'file'  => $file,
                            'robot' => $robot,
                            'queue' => $queue,
                        }
                    );
                    next;
                }
                ## Analysis of bounced message
                Bounce::anabounce(\*BOUNCE, \%hash, \$from);
                # Voir pour appeler une methode de parsing des dsn qui maj la
                # bdd
                # updatedatabase(%hash);
            }
            close BOUNCE;

            ## Bounce directory
            if (!-d $bounce_dir) {
                unless (mkdir $bounce_dir, 0777) {
                    tools::send_notify_to_listmaster(
                        $list,
                        'bounce_intern_error',
                        {   'error' => sprintf(
                                'Failed to list create bounce directory %s: %s',
                                $bounce_dir, $ERRNO
                            )
                        }
                    );
                    Log::do_log(
                        'err',
                        'Could not create bounce dirirectory %s: %m.  Check bounce_path in sympa.conf',
                        $bounce_dir
                    );
                    exit;
                }
            }

            my $adr_count;
            ## Bouncing addresses
            # Voir si pas mettre un test conditionnel sur le status code pour
            # detecter les dsn positifs et ne pas fausser les statistiques de
            # l'abonné.
            # Peut être possibilité de lancer la maj des tables pour chaque
            # recipient ici a condition d'avoir approfondi le parsing en
            # amont.
            while (my ($rcpt, $status) = each %hash) {
                $adr_count++;
                my $bouncefor = $who;
                $bouncefor ||= $rcpt;

                next unless (store_bounce($bounce_dir, $file, $bouncefor));
                next
                    unless (
                    update_subscriber_bounce_history(
                        $list,      $rcpt,
                        $bouncefor, canonicalize_status($status)
                    )
                    );
            }

            ## No address found in the bounce itself
            unless ($adr_count) {

                if ($who) {
                    # rcpt not recognized in the bounce but VERP was used
                    store_bounce($bounce_dir, $file, $who);
                    # status is undefined
                    update_subscriber_bounce_history($list, 'unknown', $who);
                } else {    # no VERP and no rcpt recognized
                    my $escaped_from = tools::escape_chars($from);
                    Log::do_log('info',
                        'No address found in message from %s for list %s',
                        $from, $list);
                    ignore_bounce(
                        {   'file'  => $file,
                            'robot' => $robot,
                            'queue' => $queue,
                        }
                    );
                    next;
                }
            }
        }

        unless (unlink("$queue/$file")) {
            Log::do_log('err',
                "Could not remove $queue/$file ; $0 might NOT be running with the right UID or file was not created with the right UID"
            );
            ignore_bounce(
                {   'file'   => $file,
                    'notify' => 1,
                    'robot'  => $robot,
                    'queue'  => $queue,
                    'error' =>
                        "Could not remove $queue/$file ; $0 might NOT be running with the right UID or file was not created with the right UID",
                }
            );
            last;
        }
    }

    ## Free zombie sendmail processes
    Sympa::Mail::reaper();
}

# Purge grouped notifications
Sympa::Alarm::flush('purge');

Log::do_log('notice', 'Bounced exited normally due to signal');
Sympa::Tools::Daemon::remove_pid('bounced', $PID);

exit(0);

## When we catch signal, just change the value of the loop
## variable.
sub sigterm {
    $end = 1;
}

## copy the bounce to the appropriate filename
sub store_bounce {

    my $bounce_dir = shift;
    my $file       = shift;
    my $rcpt       = shift;

    Log::do_log('debug', '(%s, %s, %s)', $bounce_dir, $file, $rcpt);

    my $queue = $Conf::Conf{'queuebounce'};

    #Store bounce
    unless (open BOUNCE, "$queue/$file") {
        Log::do_log('notice', 'Could not open %s/%s: %s', $queue, $file, $!);
        ignore_bounce(
            {   'file'  => $file,
                'queue' => $queue,
            }
        );
        return undef;
    }

    my $filename = tools::escape_chars($rcpt);

    unless (open ARC, ">$bounce_dir/$filename") {
        Log::do_log('notice', 'Unable to write %s/%s', $bounce_dir,
            $filename);
        ignore_bounce(
            {   'file'  => $file,
                'queue' => $queue,
            }
        );
        return undef;
    }
    print ARC <BOUNCE>;
    close ARC;
    close BOUNCE;
}

## Set error message to a status RFC1893 compliant
sub canonicalize_status {

    my $status = shift;

    if ($status !~ /^\d+\.\d+\.\d+$/) {
        if ($equiv{$status}) {
            $status = $equiv{$status};
        } else {
            return undef;
        }
    }
    return $status;
}

## update subscriber information
# $bouncefor : the email address the bounce is related for (may be extracted
#              using VERP)
# $rcpt : the email address recognized in the bounce itself. In most case
#         $rcpt eq $bouncefor

sub update_subscriber_bounce_history {

    my $list      = shift;
    my $rcpt      = shift;
    my $bouncefor = shift;
    my $status    = shift;

    Log::do_log('debug', '(%s, %s, %s, %s)',
        $list->{'name'}, $rcpt, $bouncefor, $status);

    my $first = my $last = time;
    my $count = 0;

    my $user = $list->get_list_member($bouncefor);

    unless ($user) {
        Log::do_log('notice', 'Subscriber not found in list %s: %s',
            $list->{'name'}, $bouncefor);
        return undef;
    }

    if ($user->{'bounce'} =~ /^(\d+)\s\d+\s+(\d+)/) {
        ($first, $count) = ($1, $2);
    }
    $count++;
    if ($rcpt ne $bouncefor) {
        Log::do_log('notice',
            'Bouncing address identified with VERP: %s / %s',
            $rcpt, $bouncefor);
        Log::do_log('debug', '(%s, bounce-> %s %s %s %s, bounce_address->%s)',
            $bouncefor, $first, $last, $count, $status, $rcpt);
        $list->update_list_member(
            $bouncefor,
            {   'bounce'         => "$first $last $count $status",
                'bounce_address' => $rcpt
            }
        );
        Log::db_log(
            {   'robot'        => $list->{'domain'},
                'list'         => $list->{'name'},
                'action'       => 'get_bounce',
                'parameters'   => "address=$rcpt",
                'target_email' => $bouncefor,
                'msg_id'       => '',
                'status'       => 'error',
                'error_type'   => $status,
                'daemon'       => 'bounced'
            }
        );
    } else {
        $list->update_list_member($bouncefor,
            {'bounce' => "$first $last $count $status"});
        Log::do_log('notice', 'Received bounce for email address %s, list %s',
            $bouncefor, $list->{'name'});
        Log::db_log(
            {   'robot'        => $list->{'domain'},
                'list'         => $list->{'name'},
                'action'       => 'get_bounce',
                'target_email' => $bouncefor,
                'msg_id'       => '',
                'status'       => 'error',
                'error_type'   => $status,
                'daemon'       => 'bounced'
            }
        );
    }
}

## If bounce can't be handled correctly, saves it to the "bad" subdirectory of
## the bounce spool and notifies listmaster.
sub ignore_bounce {

    my $param = shift;

    my $file   = $param->{'file'};
    my $notify = $param->{'notify'};
    my $error  = $param->{'error'};
    my $queue  = $param->{'queue'};
    my $robot  = $param->{'robot'};

    $notify |= 0;

    tools::save_to_bad(
        {   'file'     => $file,
            'hostname' => $robot,
            'queue'    => $queue,
        }
    );
    if ($notify) {
        tools::send_notify_to_listmaster(
            $robot,
            'bounce_management_failed',
            {   'file'  => $file,
                'bad'   => "$queue/bad",
                'error' => $error,
            }
        );
    }
}

__END__

=encoding utf-8

=head1 NAME

bounced, bounced.pl - Mailing List Bounce Processing Daemon for Sympa

=head1 SYNOPSIS

S<B<bounced> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION

Bounced is a program which scans permanently the bounce spool and
processes bounces (non-delivery messages), looking or bad addresses.
Bouncing addresses are tagged in database ; last bounce is kept for
each bouncing address.

List owners will latter access bounces information via WWSympa.

=head1 OPTIONS

These programs follow the usual GNU command line syntax,
with long options starting with two dashes (C<-->).  A summary of
options is included below.

=over 5

=item B<-F>, B<--foreground>

Do not detach TTY.

=item B<-d>, B<--debug>

Run the program in a debug mode.

=item B<-h>, B<--help>

Print this help message.

=item B<--log_level=>I<level>

Sets daemon log level.

=back

=head1 FILES

F<--CONFIG--> Sympa configuration file.

F<--libexecdir--/bouncequeue> bounce spooler, referenced from sendmail alias file

F<--spooldir--/bounce> incoming bounces directory

F<--piddir--/bounced.pid> this file contains the process ID
of F<bounced.pl>.

=head1 MORE DOCUMENTATION

The full documentation can be
found in L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 HISTORY

This program was originally written by:

=over 4

=item Serge Aumont

ComitE<233> RE<233>seau des UniversitE<233>s

=item Olivier SalaE<252>n

ComitE<233> RE<233>seau des UniversitE<233>s

=back

This manual page was initially written by
JE<233>rE<244>me Marant <jerome.marant@IDEALX.org>
for the Debian GNU/Linux system.

=head1 LICENSE

You may distribute this software under the terms of the GNU General
Public License Version 2.  For more details see F<README> file.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts and no Back-Cover Texts.  A
copy of the license can be found under
L<http://www.gnu.org/licenses/fdl.html>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<wwsympa(8)>, L<mhonarc(1)>, L<sympa.conf(5)>.

=cut
