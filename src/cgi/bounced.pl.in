#!--PERL--
# -*- indent-tabs-mode: t; -*-
# vim:ft=perl:noet:sw=8:wrap:textwidth=78
# $Id$

# bounced.pl - This script runs as a daemon ; it does the incoming
# non-delivery reports analysis and storage
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


## Worl Wide Sympa is a front-end to Sympa Mailing Lists Manager
## Copyright Comite Reseau des Universites

## Patch 2001.07.24 by nablaphi <nablaphi@bigfoot.com>
## Change the Getopt::Std to Getopt::Long

## Options :  F         -> do not detach TTY
##         :  d		-> debug -d is equiv to -dF
## Now, it is impossible to use -dF but you have to write it -d -F

use strict;
use lib '--modulesdir--';

use English qw(-no_match_vars);
use FileHandle;
use Getopt::Long;
use POSIX qw();

use Sympa::Configuration;
use Sympa::Constants;
use Sympa::List;
use Sympa::Log;
use Sympa::Message;
use Sympa::SDM;
use Sympa::Spool;
use Sympa::Tools;
use Sympa::Tools::Bounce;
use Sympa::Tools::Daemon;
use Sympa::Tracking;
use Sympa::WWSympa;

## Equivalents relative to RFC 1893
my %equiv = ( "user unknown" => '5.1.1',
	      "receiver not found" => '5.1.1',
	      "the recipient name is not recognized" => '5.1.1',
	      "sorry, no mailbox here by that name" => '5.1.1',
	      "utilisateur non recensÃ© dans le carnet d'adresses public" => '5.1.1',
	      "unknown address" => '5.1.1',
	      "unknown user" => '5.1.1',
	      "550" => '5.1.1',
	      "le nom du destinataire n'est pas reconnu" => '5.1.1',
	      "user not listed in public name & address book" => '5.1.1',
	      "no such address" => '5.1.1',
	      "not known at this site." => '5.1.1',
	      "user not known" => '5.1.1',

	      "user is over the quota. you can try again later." => '4.2.2',
	      "quota exceeded" => '4.2.2',
	      "write error to mailbox, disk quota exceeded" => '4.2.2',
	      "user mailbox exceeds allowed size" => '4.2.2',
	      "insufficient system storage" => '4.2.2',
	      "User's Disk Quota Exceeded:" => '4.2.2');


#getopts('dF');
## Check options
my %options;
unless (GetOptions(\%main::options, 'debug|d','log_level=s','foreground|F')) {
    Sympa::Log::fatal_err("Unknown options.");
}

# $main::options{'debug2'} = 1 if ($main::options{'debug'});

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1 if ($main::options{'debug'} || $main::options{'foreground'});


my $wwsympa_conf    = Sympa::Constants::WWSCONFIG;
my $sympa_conf_file = Sympa::Constants::CONFIG;

my $daemon_name = Sympa::Log::set_daemon($0);
my $ip = $ENV{'REMOTE_HOST'};

my $wwsconf = {};

# Load WWSympa configuration
unless ($wwsconf = Sympa::WWSympa::load_config($wwsympa_conf)) {
    print STDERR 'unable to load config file';
    exit;
}

# Load sympa.conf
unless (Sympa::Conf::load($sympa_conf_file)) {
    Sympa::Log::fatal_err("Unable to load sympa configuration, file $sympa_conf_file has errors.");
}


unshift @INC, $wwsconf->{'wws_path'};

## Check databse connectivity
unless (Sympa::SDM::check_db_connect()) {
    Sympa::Log::fatal_err('Database %s defined in sympa.conf has not the right structure or is unreachable.', $Sympa::Configuration::Conf{'db_name'});
}

## Put ourselves in background if not in debug mode.
unless ($main::options{'debug'} || $main::options{'foreground'}) {

    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
       ioctl(TTY, 0x20007471, 0);         # XXX s/b &TIOCNOTTY
#	ioctl(TTY, &TIOCNOTTY, 0);
	close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
	print STDOUT "Starting bounce daemon, pid $_\n";

	exit(0);
    }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});

## Create and write the pidfile
Sympa::Tools::Daemon::write_pid($wwsconf->{'bounced_pidfile'}, $$, $options, $Sympa::Configuration::Conf{'lock_method'});
unless ($options->{'stderr_to_tty'}) {
    Sympa::Tools::Daemon::direct_stderr_to_file((tmpdir => $Sympa::Conf::Conf{'tmpdir'}, 'pid' => $PID));
}

if ($main::options{'log_level'}) {
    Sympa::Log::set_log_level($main::options{'log_level'});
    Sympa::Log::do_log('info', "Configuration file read, log level set using options : $main::options{'log_level'}");
}else{
    Sympa::Log::set_log_level($Sympa::Configuration::Conf{'log_level'});
    Sympa::Log::do_log('info', "Configuration file read, default log level $Sympa::Configuration::Conf{'log_level'}");
}

$wwsconf->{'log_facility'}||= $Sympa::Configuration::Conf{'syslog'};
Sympa::Log::do_openlog($wwsconf->{'log_facility'}, $Sympa::Configuration::Conf{'log_socket_type'}, 'bounced');

## Set the UserID & GroupID for the process
$GID = $EGID = (getgrnam(Sympa::Constants::GROUP))[2];
$UID = $EUID = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (usefull on OS X)
unless (($GID == (getgrnam(Sympa::Constants::GROUP))[2]) && ($UID == (getpwnam(Sympa::Constants::USER))[2])) {
    Sympa::Log::fatal_err("Failed to change process userID and groupID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via SUDO.");
}

## Sets the UMASK
umask(oct($Sympa::Configuration::Conf{'umask'}));

## Change to list root
unless (chdir($Sympa::Configuration::Conf{'home'})) {
     Sympa::Log::do_log('info','Unable to change directory');
    exit (-1);
}

my $pinfo = Sympa::List::_apply_defaults();

Sympa::Log::do_log('notice', "bounced Started");


## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

my $spool = Sympa::Spool->new('bounce');


Sympa::Log::do_log('debug','starting infinite loop');
## infinite loop scanning the queue (unless a sig TERM is received
while (!$end) {

    sleep $Sympa::Configuration::Conf{'sleep'};

    Sympa::List::init_list_cache();
	Sympa::List::send_notify_to_listmaster(undef, undef, undef, 1); # Process grouped notifications

    my $bounce;
    while ($bounce = $spool->next) {

	my $listname = $bounce->{'list'};
	my $robot = $bounce->{'robot'};

	$robot ||= Sympa::List::search_list_among_robots($listname);

	unless ($bounce->{'messageasstring'}) {
	   Sympa::Log::do_log ('notice',"Ignoring bounce where messagekey = %s  because empty",$bounce->{'messagekey'});
	    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	}

	my $message = Sympa::Message->new({'message_in_spool' => $bounce});

	my $entity = $message->{'msg'};
	my $head = $entity->head;
	my $to = $head->get('to', 0);
	my $notification_as_string = $entity->as_string;

	my $who;
	my $distribution_id;
	chomp $to;
	Sympa::Log::do_log('debug', 'bounce for :%s:  Conf{bounce_email_prefix}=%',$to,$Sympa::Configuration::Conf{'bounce_email_prefix'});

	$to =~ s/<//;
	$to =~ s/>//;
	if ($to =~ /^$Sympa::Configuration::Conf{'bounce_email_prefix'}\+(.*)\@(.*)$/) { #VERP in use
	    my $local_part = $1;
	    my $robot = $2;
	    my $unique;
	    if ($local_part =~ /^(.*)(\=\=([wr]))$/) {
		$local_part = $1;
		$unique = $2;
	    }elsif ($local_part =~  /^(.*)\=\=a\=\=(.*)\=\=(.*)\=\=(.*)$/ ) {# tracking in use

		$distribution_id = $4;
		$local_part =~ /^(.*)\=\=(.*)$/ ;
		$local_part = $1;
	    }else{
		undef $distribution_id ;
		Sympa::Log::do_log('err', 'NOT ID PART in the bounce for :%s', $to);
	    }

	    $local_part =~ s/\=\=a\=\=/\@/ ;
	    $local_part =~ /^(.*)\=\=(.*)$/ ;
	    $who = $1;
	    $listname = $2;

	    Sympa::Log::do_log('notice', 'VERP in use : bounce related to %s for list %s@%s',$who,$listname,$robot);

	    if ($unique =~ /[wr]/) { # in this case the bounce result from a remind or a welcome message ;so try to remove the subscriber
		Sympa::Log::do_log('debug', "VERP for a service message, try to remove the subscriber");
		my $list = Sympa::List->new($listname, $robot);
		unless($list) {
		    Sympa::Log::do_log('notice','Skipping bounce where messagekey = %s for unknown list %s@%s',$bounce->{'messagekey'},$listname,$robot);
		    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
		    next;
		}
		my $result =$list->check_list_authz('del','smtp',
						    {'sender' => $Sympa::Configuration::Conf{'listmasters'}[0],
						     'email' => $who});
		my $action;
		$action = $result->{'action'} if (ref($result) eq 'HASH');

		if ($action =~ /do_it/i) {
		    if ($list->is_list_member($who)) {
			my $u = $list->delete_list_member('users' => [$who], 'exclude' =>' 1');
			Sympa::Log::do_log ('notice',"$who has been removed from $listname because welcome message bounced");
			Sympa::Log::db_log({'robot' => $list->{'domain'},'list' => $list->{'name'},'action' => 'del',
				      'target_email' => $who,'status' => 'error','error_type' => 'welcome_bounced',
				      'daemon' => 'bounced'});

			Sympa::Log::db_stat_log({'robot' => $list->{'domain'}, 'list' => $list->{'name'}, 'operation' => 'auto_del', 'parameter' => "",
					   'mail' => $who, 'client' => "", 'daemon' => 'bounced.pl'});

			if ($action =~ /notify/) {
			    unless ($list->send_notify_to_owner('automatic_del',
								{'who' => $who,
								 'by' => 'bounce manager',
								 'reason' => 'welcome'})) {
				wwslog('err',"Unable to send notify 'automatic_del' to $list->{'name'} list owner");
			    }
			}
		    }
		}else{
		    Sympa::Log::do_log ('notice',"Unable to remove $who from $listname (welcome message bounced but del is closed)");
		    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
		}
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }# close VERP + remind or welcome block
	}# close VERP in use block

	my $list = Sympa::List->new($listname, $robot);
	unless($list) {
	    Sympa::Log::do_log('err','Skipping bounce where messagekey= %s for unknown list %s@%s',$bounce->{'messagekey'},$listname,$robot);
	    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	    next;
	}

	#----------------------------------------------------------------------------------------------------------------------
	# If the DSN notification is correct and the tracking mode is enable, it will be inserted in the database
	my $tracking_in_use;
	$tracking_in_use = 1 if ($list->{'admin'}{'tracking'}{'delivery_status_notification'} eq "on");
	$tracking_in_use = 1 if ($list->{'admin'}{'tracking'}{'message_delivery_notification'} eq "on");
	$tracking_in_use = 1 if ($list->{'admin'}{'tracking'}{'message_delivery_notification'} eq "on_demand");
	if(($head->get('Content-type') =~ /multipart\/report/) && ($head->get('Content-type') =~ /report\-type\=delivery-status/i) && ($tracking_in_use)) {

	    my @parts = $entity->parts();
	    my $original_rcpt; my $final_rcpt; my $user_agent; my $version; my $dsn_status; my $msg_id; my $orig_msg_id;
	    my $listname, $robot;
	    my $arrival_date;

	    my $msg_id = $head->get('Message-Id');
	    chomp $msg_id;

	    my $date = $head->get('Date');

	    foreach my $p (@parts) {
		my $h = $p->head();
		my $content = $h->get('Content-type');

		if ($content =~ /message\/delivery-status/) {
		    my @report = split(/\n/, $p->bodyhandle->as_string());
		    foreach my $line (@report) {
			$line = lc($line);
			# Action Field MUST be present in a DSN report, possible values : failed, delayed, delivered, relayed, expanded(rfc3464)
			if ($line =~ /action\:\s*(.+)/i) {
			    $dsn_status = $1;
			    chomp $dsn_status;
			}

			if ( ($line =~ /final\-recipient\:\s*(.+)\s*$/i) && (not $final_rcpt) ) {
			    $final_rcpt = $1;
			    chomp $final_rcpt;
			    my @rcpt;
			    if($final_rcpt =~ /.*;.*/){
				@rcpt = split /;\s*/,$final_rcpt;
				foreach my $rcpt (@rcpt){
				    if($rcpt =~ /(\S+\@\S+)/){
					($rcpt)= $rcpt=~ /(\S+\@\S+)/;
					$final_rcpt = $rcpt;
				    }
				}
			    }
			    else{
				($final_rcpt)= $final_rcpt =~ /(\S+\@\S+)/;
			    }
			}
			#  $distribution_id is set using VERP nothing else.
			#if ( ($line =~ /original\-envelope\-id\:\s*(.+)/i) && (!$distribution_id) ) {
			#    $distribution_id = $1;
			#    chomp $distribution_id;
			#   Sympa::Log::do_log ('debug2',"1 - Original Envelope-id Detected, value : %s", $distribution_id);
			#}
			if ($line =~ /arrival\-date\:\s*(.+)/i) {
			    $arrival_date = $1;
			    chomp $arrival_date;
			}
		    }
		}
	    }

	    $original_rcpt = $who;

	    if($final_rcpt =~ /<(\S+\@\S+)>/){
		($final_rcpt)= $final_rcpt =~ /<(\S+\@\S+)>/;
	    }
	    if($msg_id =~ /<(\S+\@\S+)>/){
		($msg_id)= $msg_id =~ /<(\S+\@\S+)>/;
	    }

	    Sympa::Log::do_log ('debug2',"FINAL DSN Action Detected, value : %s", $dsn_status);
	    Sympa::Log::do_log ('debug2',"FINAL DSN Recipient Detected, value : %s", $original_rcpt);
	    Sympa::Log::do_log ('debug2',"FINAL DSN final Recipient Detected, value : %s", $final_rcpt);
	    Sympa::Log::do_log ('debug2',"FINAL DSN Message-Id Detected, value : %s", $msg_id);
	    Sympa::Log::do_log ('debug2',"FINAL DSN Arrival Date Detected, value : %s", $arrival_date);

	    unless  ($dsn_status =~ /failed/) { # DSN with status "failed" should not be removed because they must be processed for classical bounce managment (not only for tracking feature)
		Sympa::Log::do_log('err', "Non failed dsn status $dsn_status");
		unless ($distribution_id) {
		    Sympa::Log::do_log('err', "error: Id not found in to address %s, will ignore",$to);
		    $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		    next;
		}
		unless ($original_rcpt) {
		    Sympa::Log::do_log('err', "error: original recipient not found in dsn: %s, will ignore",$msg_id);
		    $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		    next;
		}
		unless ($msg_id) {
		    Sympa::Log::do_log('err', "error: message_id not found in dsn will ignore");
		    $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		    next;
		}
	    }

	    if (Sympa::Tracking::db_insert_notification($distribution_id, 'DSN', $dsn_status, $arrival_date,$notification_as_string )) {
		Sympa::Log::do_log('notice', "DSN Correctly treated...");
	    }else{
		Sympa::Log::do_log('err','Not able to fill database with notification data');
	    }
	    unless($dsn_status =~ /failed/) {
		if ($spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})){
		    Sympa::Log::do_log('debug2', "DSN Correctly removed...");
		}
		next;
	    }
	}
	#-----------------------------------------------------------------------------------------------------------------------------------
	# If the MDN notification is correct and the tracking mode is enable, it will be inserted in the database
	if(($head->get('Content-type') =~ /multipart\/report/) && ($head->get('Content-type') =~ /report\-type\=disposition-notification/i) && (($list->{'admin'}{'tracking'}{'message_delivery_notification'} eq "on")||($list->{'admin'}{'tracking'}{'message_delivery_notification'} eq "on_demand"))) {

	    my @parts = $entity->parts();
	    my $original_rcpt; my $final_rcpt; my $user_agent; my $version; my $dsn_status; my $msg_id; my $orig_msg_id;
	    my $listname, $robot;
	    my $date;
	    my $mdn_status;

	    my $msg_id = $head->get('Message-Id');
	    chomp $msg_id;

	    my $date = $head->get('Date');

	    foreach my $p (@parts) {
		my $h = $p->head();
		my $content = $h->get('Content-type');

		if ($content =~ /message\/disposition-notification/) {
		    my @report = split(/\n/, $p->bodyhandle->as_string());
		    foreach my $line (@report) {
			$line = lc($line);
# Disposition Field MUST be present in a MDN report, possible values : displayed, deleted(rfc3798)
			if ($line =~ /disposition\:\s*(.+)\s*\;\s*(.+)/i) {
			    $mdn_status = $2;
			    if($mdn_status  =~ /.*\/.*/){
				my @results = split /\/\s*/,$mdn_status;
				$mdn_status = $results[$0];
				chomp $mdn_status;
			    }
			}
			if ( ($line =~ /final\-recipient\:\s*(.+)\s*$/i) && (not $final_rcpt) ) {
			    $final_rcpt = $1;
			    chomp $final_rcpt;
			    my @rcpt;
			    if($final_rcpt =~ /.*;.*/){
				@rcpt = split /;\s*/,$final_rcpt;
				foreach my $rcpt (@rcpt){
				    if($rcpt =~ /(\S+\@\S+)/){
					($rcpt)= $rcpt=~ /(\S+\@\S+)/;
					$final_rcpt = $rcpt;
				    }
				}
			    }
			    else{
				($final_rcpt)= $final_rcpt =~ /(\S+\@\S+)/;
			    }
			}
		    }
		}
	    }

	    if($original_rcpt =~ /<(\S+\@\S+)>/){
		($original_rcpt)= $original_rcpt =~ /<(\S+\@\S+)>/;
	    }
	    if($final_rcpt =~ /<(\S+\@\S+)>/){
		($final_rcpt)= $final_rcpt =~ /<(\S+\@\S+)>/;
	    }
	    if($msg_id =~ /<(\S+\@\S+)>/){
		($msg_id)= $msg_id =~ /<(\S+\@\S+)>/;
	    }
	    # let's use VERP
	    $original_rcpt = $who;

	    Sympa::Log::do_log ('debug2',"FINAL MDN Disposition Detected, value : %s", $mdn_status);
	    Sympa::Log::do_log ('debug2',"FINAL MDN Recipient Detected, value : %s", $original_rcpt);
	    Sympa::Log::do_log ('debug2',"FINAL MDN Message-Id Detected, value : %s", $msg_id);
	    Sympa::Log::do_log ('debug2',"FINAL MDN Date Detected, value : %s", $date);

	    unless ($distribution_id) {
		Sympa::Log::do_log('err', "error: Id not found in to address %s, will ignore",$to);
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }
	    unless ($original_rcpt) {
		Sympa::Log::do_log('err', "error: original recipient not found in dsn: %s, will ignore",$msg_id);
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }
	    unless ($msg_id) {
		Sympa::Log::do_log('err', "error: message_id not found in dsn will ignore");
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }
	    unless ($mdn_status) {
		Sympa::Log::do_log('err', "error: dsn status not found in dsn: %s, will ignore",$msg_id);
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }

	    Sympa::Log::do_log('debug2', "Save in database...");
	    unless (Sympa::Tracking::db_insert_notification($distribution_id, 'MDN',$mdn_status, $date,$notification_as_string )) {
		Sympa::Log::do_log('err','Not able to fill database with notification data');
	    }
	    Sympa::Log::do_log('notice', "MDN Correctly treated...");
	    if( $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})){
		Sympa::Log::do_log('debug2', "MDN Correctly removed...");
	    }
	    next;
	}

	if(($head->get('Content-type') =~ /multipart\/report/) && ($head->get('Content-type') =~ /report\-type\=feedback-report/)) {
	    # this case a report Email Feedback Reports http://www.shaftek.org/publications/drafts/abuse-report/draft-shafranovich-feedback-report-01.txt mainly use by AOL
	    Sympa::Log::do_log ('notice',"processing  Email Feedback Report");
	    my @parts = $entity->parts();
	    my $original_rcpt;
	    my $user_agent;
	    my $version;
	    my $feedback_type = '';
	    my $listname;
	    my $robot;
	    foreach my $p (@parts) {
		my $h = $p->head();
		my $content = $h->get('Content-type');
		next if ($content =~ /text\/plain/i);
		if ($content =~ /message\/feedback-report/) {
		    my @report = split(/\n/, $p->bodyhandle->as_string());
		    foreach my $line (@report) {
			$feedback_type = 'abuse' if ($line =~ /Feedback\-Type\:\s*abuse/i);
			if ($line =~ /Feedback\-Type\:\s*(.*)/i) {
			    $feedback_type = $1;
			}

			if ($line =~ /User\-Agent\:\s*(.*)/i) {
			    $user_agent = $1;
			}
			if ($line =~ /Version\:\s*(.*)/i) {
			    $version = $1;
			}
		    my $email_regexp = Sympa::Tools::get_regexp('email');
			if ($line =~ /Original\-Rcpt\-To\:\s*($email_regexp)\s*$/i) {
			    $original_rcpt = $1;
			    chomp $original_rcpt;
			}
		    }
		}elsif ($content =~ /message\/rfc822/) {
		    # Sympa::Log::do_log ('notice',"xxx processing  Email Feedback Report : message/rfc822 part");
		    my @subparts = $p->parts();
		    foreach my $subp (@subparts) {
			# Sympa::Log::do_log ('notice',"xxx subparts : subps");
			my $subph =  $subp->head;
			$listname = $subph->get('X-Loop');
		    }
		    # Sympa::Log::do_log ('notice',"xxx processing  Email Feedback Report : extract listname $listname");
		}
	    }
	    my $forward ;
	    ## RFC compliance remark: We do something if there is an abuse or an unsubscribe request.
	    ## We don't throw an error if we find another kind of feedback (fraud, miscategorized, not-spam, virus or other)
	    ## but we don't take action if we meet them yet. This is to be done, if relevant.
	    if (($feedback_type =~ /(abuse|opt-out|opt-out-list|fraud|miscategorized|not-spam|virus|other)/i) && (defined $version) && (defined $user_agent)) {

		Sympa::Log::do_log ('debug',"Email Feedback Report: $listname feedback-type: $feedback_type");
		if (defined $original_rcpt) {
		    Sympa::Log::do_log ('debug',"Recognized user : $original_rcpt list");
		    my @lists;

		if (( $feedback_type =~ /(opt-out-list|abuse)/i ) && (defined $listname)) {
		    $listname = lc($listname);
		    chomp $listname ;
		    $listname =~ /(.*)\@(.*)/;
		    $listname = $1;
		    $robot = $2;
		    my $list = Sympa::List->new($listname, $robot);
		    unless($list) {
			Sympa::Log::do_log('err','Skipping Feedback Report (spool bounce, messagekey =%s) for unknown list %s@%s',$bounce->{'messagekey'},$listname,$robot);
			$spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
			next;
		    }
		    push @lists, $list;
		}elsif( $feedback_type =~ /opt-out/ && (defined $original_rcpt)){
		    @lists = Sympa::List::get_which($original_rcpt,$robot,'member');
		}else {
		    Sympa::Log::do_log('notice','Ignoring Feedback Report (bounce where messagekey=%s) : Nothing to do for this feedback type.(feedback_type:%s, original_rcpt:%s, listname:%s)',$bounce->{'messagekey'}, $feedback_type, $original_rcpt, $listname );
		    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
		}
		    foreach my $list (@lists){
			my $result =$list->check_list_authz('unsubscribe','smtp',{'sender' => $original_rcpt});
			my $action;
			$action = $result->{'action'} if (ref($result) eq 'HASH');
			if ($action =~ /do_it/i) {
			    if ($list->is_list_member($original_rcpt)) {
				my $u = $list->delete_list_member('users' => [$original_rcpt], 'exclude' =>' 1');

				Sympa::Log::do_log ('notice',"$original_rcpt has been removed from %s because abuse feedback report",$list->name);
				unless ($list->send_notify_to_owner('automatic_del',{'who' => $original_rcpt, 'by' => 'listmaster'})) {
				    Sympa::Log::do_log('notice',"Unable to send notify 'automatic_del' to $list->{'name'} list owner");
				}
			    }else{
				Sympa::Log::do_log('err','Ignore Feedback Report (bounce where messagekey =%s) for list %s@%s : user %s not subscribed',$bounce->{'messagekey'},$list->name,$robot,$original_rcpt);
				unless ($list->send_notify_to_owner('warn-signoff',{'who' => $original_rcpt})) {
				    Sympa::Log::do_log('notice',"Unable to send notify 'warn-signoff' to $list->{'name'} list owner");
				}
			    }
			}else{
			    $forward = 'request';
			    Sympa::Log::do_log('err','Ignore Feedback Report (bounce where messagekey=%s) for list %s@%s : user %s is not allowed to unsubscribe',$bounce->{'messagekey'},$list->name,$robot,$original_rcpt);
			}
		    }
		}else{
		    Sympa::Log::do_log ('err','Ignoring Feedback Report (bounce where messagekey=%s) : Unknown Original-Rcpt-To field. Can\'t do anything. (feedback_type:%s, listname:%s)',$bounce->{'messagekey'}, $feedback_type, $listname );
		    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
		}
	    }else{
		Sympa::Log::do_log ('err','Ignoring Feedback Report %s : Unknown format (bounce where messagekey=%s), original_rcpt:%s, listname:%s)',$bounce->{'messagekey'}, $feedback_type, $original_rcpt, $listname );
		$spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	    }
	    $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
	    next;
	}

	# Fin section feedback report
	# else (not welcome or remind)
	my $list = Sympa::List->new($listname, $robot);
	if (! $list) {
	    Sympa::Log::do_log('err','Skipping bounce messagekey=%s for unknown list %s@%s',$bounce->{'messagekey'},$listname,$robot);
	    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	    next;
	}else{
	    Sympa::Log::do_log('debug',"Processing bounce messagekey=%s for list $listname",$bounce->{'messagekey'});

	    my $bounce_dir = $list->get_bounce_dir();
	    my $from = $message->{'sender'};

	    my $result =
		    Sympa::Tools::Bounce::parse_rfc1891_notification(
			    $message
		    );

	    unless ($result) {
		## Analysis of bounced message
		$result = Sympa::Tools::Bounce::parse_notification($message);
		# Voir pour appeler une methode de parsing des dsn qui maj la bdd
		# updatedatabase(%hash);
	    }

	    ## Bounce directory
	    if (! -d $bounce_dir) {
		unless (mkdir $bounce_dir, 0777) {
		    Sympa::List::send_notify_to_listmaster('bounce_intern_error',$Sympa::Configuration::Conf{'domain'},{'error' => "Failed to list create bounce directory $bounce_dir"});
		    Sympa::Log::do_log('err', 'Could not create %s: %s bounced dir, check bounce_path in wwsympa.conf', $bounce_dir, $ERRNO);
		exit;
		}
	    }

	    my $adr_count;
	    ## Bouncing addresses
	    # Voir si pas mettre un test conditionnel sur le status code pour detecter les dsn positifs et ne pas fausser les statistiques de l'abonnÃ©.
	    # Peut Ãªtre possibilitÃ© de lancer la maj des tables pour chaque recipient ici a condition d'avoir approfondi le parsing en amont.
	    while (my ($rcpt, $status) = each %hash) {
		$adr_count++;
		my $bouncefor = $who;
		$bouncefor ||= $rcpt;

		next unless (store_bounce ($bounce_dir,$bounce->{'messageasstring'},$bouncefor));
		next unless (update_subscriber_bounce_history($list, $rcpt, $bouncefor, canonicalize_status ($status)));
	    }

	    ## No address found in the bounce itself
	    unless ($adr_count) {

		if ( $who ) {	# rcpt not recognized in the bounce but VERP was used
		    store_bounce ($bounce_dir,$bounce->{'messageasstring'},$who);
		    update_subscriber_bounce_history($list, 'unknown', $who); # status is undefined
		}else{          # no VERP and no rcpt recognized
		    my $escaped_from = Sympa::Tools::escape_chars($from);
		    Sympa::Log::do_log('info', 'error: no address found in message from %s for list %s',$from, $list->{'name'});
		    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
		    next;
		}
	    }
	}

	unless ($spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})) {
	    Sympa::Log::do_log ('err',"Could not remove messafe from spool bounce (messaegkey = %s)",$bounce->{'messagekey'});
	    $spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	    last;
	}
	## Free zombie sendmail processes
	#    mail::reaper;
    }
}




Sympa::List::send_notify_to_listmaster(undef, undef, undef, undef, 1); # Purge grouped notifications

Sympa::Log::do_log('notice', 'bounced exited normally due to signal');
Sympa::Tools::Daemon::remove_pid($wwsconf->{'bounced_pidfile'}, $$, undef, $Sympa::Conf::Conf{'tmpdir'});

exit(0);


## When we catch SIGTERM, just change the value of the loop
## variable.
sub sigterm {
    $end = 1;
}

## copy the bounce to the appropriate filename
sub store_bounce {

    my $bounce_dir = shift;
    my $bounce= shift;
    my $rcpt=shift;

    Sympa::Log::do_log('debug', 'store_bounce(%s,%s,%s)', $bounce_dir,$rcpt);

    my $queue = $Sympa::Configuration::Conf{'queuebounce'};

    my $filename = Sympa::Tools::escape_chars($rcpt);

    unless (open ARC, ">$bounce_dir/$filename") {
	Sympa::Log::do_log('notice', "Unable to write $bounce_dir/$filename");
	$spool->update({'messagekey' => $bounce->{'messagekey'}},{"message_status" => 'bad','messagelock'=> 'NULL'});
	return undef;
    }
    print ARC $bounce->{'msg'}->as_string;
    close ARC;
    close BOUNCE;
}


## Set error message to a status RFC1893 compliant
sub canonicalize_status {

    my $status =shift;

    if ($status !~ /^\d+\.\d+\.\d+$/) {
	if ($equiv{$status}) {
	    $status = $equiv{$status};
	}else {
	    return undef;
	}
    }
    return $status;
}


## update subscriber information
# $bouncefor : the email address the bounce is related for (may be extracted using verp)
# $rcpt : the email address recognized in the bounce itself. In most case $rcpt eq $bouncefor

sub update_subscriber_bounce_history {

    my $list = shift;
    my $rcpt = shift;
    my $bouncefor = shift;
    my $status = shift;

    Sympa::Log::do_log ('debug','update_subscriber_bounce_history (%s,%s,%s,%s)',$list->{'name'},$rcpt,$bouncefor,$status);

    my $first = my $last = time;
    my $count = 0;

    my $user = $list->get_list_member($bouncefor);

    unless ($user) {
	Sympa::Log::do_log ('notice', 'Subscriber not found in list %s : %s', $list->{'name'}, $bouncefor);
	return undef;
    }

    if ($user->{'bounce'} =~ /^(\d+)\s\d+\s+(\d+)/) {
	($first, $count) = ($1, $2);
    }
    $count++;
    if ($rcpt ne $bouncefor) {
	Sympa::Log::do_log('notice','Bouncing address identified with VERP : %s / %s', $rcpt, $bouncefor);
	Sympa::Log::do_log ('debug','update_subscribe (%s, bounce-> %s %s %s %s,bounce_address->%s)',$bouncefor,$first,$last,$count,$status,$rcpt);
	$list->update_list_member($bouncefor,{'bounce' => "$first $last $count $status",
				       'bounce_address' => $rcpt});
	Sympa::Log::db_log({'robot' => $list->{'domain'},'list' => $list->{'name'},'action' => 'get_bounce','parameters' => "address=$rcpt",
		      'target_email' => $bouncefor,'msg_id' => '','status' => 'error','error_type' => $status,
		      'daemon' => 'bounced'});
    }else{
	$list->update_list_member($bouncefor,{'bounce' => "$first $last $count $status"});
	Sympa::Log::do_log('notice','Received bounce for email address %s, list %s', $bouncefor, $list->{'name'});
	Sympa::Log::db_log({'robot' => $list->{'domain'},'list' => $list->{'name'},'action' => 'get_bounce',
		      'target_email' => $bouncefor,'msg_id' => '','status' => 'error','error_type' => $status,
		      'daemon' => 'bounced'});
    }
}
