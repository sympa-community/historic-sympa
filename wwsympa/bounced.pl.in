#!--PERL--
# bounced.pl - This script runs as a daemon ; it does the incoming 
# non-delivery reports analysis and storage
# RCS Identication ; $Revision$ ; $Date$
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


## Worl Wide Sympa is a front-end to Sympa Mailing Lists Manager
## Copyright Comite Reseau des Universites

## Patch 2001.07.24 by nablaphi <nablaphi@bigfoot.com>
## Change the Getopt::Std to Getopt::Long

## Options :  F         -> do not detach TTY
##         :  d		-> debug -d is equiv to -dF
## Now, it is impossible to use -dF but you have to write it -d -F

use lib '--modulesdir--';
use strict;

use FileHandle;
use Getopt::Long;
use POSIX;

use List;
use tracking;
use BounceMessage;

## Check options
my %options;
unless (&GetOptions(\%main::options, 'debug|d','log_level=s','foreground|F')) {
    &Log::fatal_err("Unknown options.");
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1 if ($main::options{'debug'} || $main::options{'foreground'});

my $daemon_name = &Log::set_daemon($0);
my $ip = $ENV{'REMOTE_HOST'};

# Load sympa.conf
unless (defined Robot::get_robots()) {
    Log::fatal_err(
	'Unable to load sympa configuration, file %s has errors.',
	Conf::get_sympa_conf()
    );
}

##unshift @INC, Site->wws_path;

## Check databse connectivity
unless (SDM::check_db_connect()) {
    Log::fatal_err('Database %s defined in sympa.conf has not the right structure or is unreachable.', Site->db_name);
}

## Put ourselves in background if not in debug mode. 
unless ($main::options{'debug'} || $main::options{'foreground'}) {

    open(STDERR, ">> /dev/null");
    open(STDOUT, ">> /dev/null");
    if (open(TTY, "/dev/tty")) {
       ioctl(TTY, 0x20007471, 0);         # XXX s/b &TIOCNOTTY
#	ioctl(TTY, &TIOCNOTTY, 0);
	close(TTY);
    }
    setpgrp(0, 0);
    if ((my $child_pid = fork) != 0) {
	print STDOUT "Starting bounce daemon, pid $_\n";

	exit(0);
    }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});

## Create and write the pidfile
tools::write_pid(Site->bounced_pidfile, $$, $options);
unless ($options->{'stderr_to_tty'}) {
    tools::direct_stderr_to_file(('pid' => $$));
}

if ($main::options{'log_level'}) {
    Log::set_log_level($main::options{'log_level'});
    Log::do_log(
	'info', 'Configuration file read, log level set using options : %s',
	$main::options{'log_level'}
    ); 
} else {
    Log::set_log_level(Site->log_level);
    Log::do_log(
	'info', 'Configuration file read, default log level %s',
	Site->log_level
    ); 
}

&Log::do_openlog(Site->log_facility, Site->log_socket_type, 'bounced');

## Set the UserID & GroupID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];

## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
&POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
&POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (usefull on OS X)
unless (($( == (getgrnam(Sympa::Constants::GROUP))[2]) && ($< == (getpwnam(Sympa::Constants::USER))[2])) {
    Log::fatal_err("Failed to change process userID and groupID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via SUDO.");
}

## Sets the UMASK
umask(oct(Site->umask));

## Change to list root
unless (chdir(Site->home)) {
    Log::do_log('info', 'Unable to change directory');
    exit (-1);
}

my $pinfo = List::_apply_defaults();

Log::do_log('notice', "bounced Started");

## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

my $spool = new Sympaspool('bounce');


Log::do_log('debug','starting infinite loop');
## infinite loop scanning the queue (unless a sig TERM is received
while (!$end) {
    
    sleep Site->sleep;
    
    List::init_list_cache();
    # Process grouped notifications
    Site->send_notify_to_listmaster(undef, undef, 1, undef);

    my $spooled_bounce;
    while ($spooled_bounce = $spool->next){
	my $bounce;
	unless ($bounce = new BounceMessage({'message_in_spool' => $spooled_bounce})) {
	    Log::do_log('err','Message %s: badly formatted bounce message. Ignoring.',$spooled_bounce->{'messagekey'});
	    $spool->move_to_bad($spooled_bounce->{'messagekey'});
	    next;
	}
	Log::do_log('info','Processing bounce %s (key %s) for list %s@%s',$bounce->get_msg_id,$spooled_bounce->{'messagekey'},$spooled_bounce->{'list'},$spooled_bounce->{'robot'});
	
	my $list = $bounce->{'list'};
	Log::do_log('debug', 'bounce for :%s:  Site->bounce_email_prefix=%s',
	    $bounce->{'to'}, Site->bounce_email_prefix);
		
	$bounce->{'to'} =~ s/<//;
	$bounce->{'to'} =~ s/>//;
	if ($bounce->is_verp_in_use) { #VERP in use
	    $bounce->analyze_verp_header();
	    if ($bounce->failed_on_first_try) { # in this case the bounce result from a remind or a welcome message ;so try to remove the subscriber
		Log::do_log('debug', "VERP for a service message, trying to remove the subscriber");
		unless($bounce->update_list($bounce->{'listname'},$bounce->{'robotname'})) {
		    Log::do_log('notice','Skipping bounce where messagekey = %s for unknown list %s@%s',$bounce->{'messagekey'},$bounce->{'listname'},$bounce->{'robotname'});
		    $spool->move_to_bad($bounce->{'messagekey'});
		    next;
		}
		unless ($bounce->delete_bouncer) {
		    Log::do_log ('notice',"Unable to remove $bounce->{'who'} from $bounce->{'listname'} (welcome message bounced but del is closed)");
		    $spool->move_to_bad($bounce->{'messagekey'});
		}
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
		next;
	    }# close VERP + remind or welcome block
	}# close VERP in use block

	my $list = new List ($bounce->{'listname'}, $bounce->{'robotname'});
	unless($list) {
	    Log::do_log('err','Skipping bounce where messagekey= %s for unknown list %s@%s',$bounce->{'messagekey'},$bounce->{'listname'},$bounce->{'robotname'});
	    $spool->move_to_bad($spooled_bounce->{'messagekey'});
	    next;
	}
	
	#----------------------------------------------------------------------------------------------------------------------
	# If the DSN notification is correct and the tracking mode is enable, it will be inserted in the database
	my $tracking_in_use = $bounce->tracking_is_used;
	if($bounce->is_dsn) {
	    unless ($bounce->process_dsn) {
		Log::do_log('err','Delivery status notification processing for bounce %s (key %s) failed. Stopping here.',$bounce->get_msg_id,$bounce->{'messagekey'});
		$spool->move_to_bad($bounce->{'messagekey'});
		next;
	    }
	    unless($bounce->{'dsn_status'} =~ /failed/) { 
		if ($spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})){
		    Log::do_log('debug2', "DSN Correctly removed...");
		}
		next;
	    }
	}
	#-----------------------------------------------------------------------------------------------------------------------------------
	# If the MDN notification is correct and the tracking mode is enabled, it will be inserted in the database
	if($bounce->is_mdn) {
	    if($bounce->process_mdn) {
		Log::do_log('notice', "MDN Correctly treated...");
	    }else{
		Log::do_log('err', "Failed to treat MDN");
	    }
	    if( $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})){
		Log::do_log('debug2', "MDN Correctly removed...");
	    }
	    next;
	}
	
	if($bounce->is_email_feedback_report) {
	    # this case a report Email Feedback Reports http://www.shaftek.org/publications/drafts/abuse-report/draft-shafranovich-feedback-report-01.txt mainly use by AOL
	    if($bounce->process_email_feedback_report) {
		Log::do_log ('notice','Feedback Report %s correctly treated. original_rcpt:%s, listname:%s)',$bounce->{'feedback_type'}, $bounce->{'original_rcpt'}, $bounce->{'listname'} );
		$spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
	    }else{
		Log::do_log ('err','Ignoring Feedback Report %s : Unknown format (bounce where messagekey=%s), original_rcpt:%s, listname:%s)',$bounce->{'messagekey'}, $bounce->{'feedback_type'}, $bounce->{'original_rcpt'}, $bounce->{'listname'} );		
		$spool->move_to_bad($bounce->{'messagekey'});
	    }
	    next;		
	}
	# else (not welcome or remind) 
	my $list = new List ($bounce->{'listname'}, $bounce->{'robotname'});

	if ($bounce->process_ndn) {
	    Log::do_log ('notice','Bounce from %s to list %s correctly treated.',$bounce->{'who'}, $bounce->{'list'}->get_list_id );
	    $spool->remove_message({'messagekey'=>$bounce->{'messagekey'}});
	}else{
	    Log::do_log ('err','Could not correctly process bounce from %s to list %s@%s. Ignoring.',$bounce->{'who'}, $bounce->{'listname'}, $bounce->{'robotname'});		
	    $spool->move_to_bad($bounce->{'messagekey'});
	}
	unless ($spool->remove_message({'messagekey'=>$bounce->{'messagekey'}})) {
	    Log::do_log ('err',"Could not remove messafe from spool bounce (messaegkey = %s)",$bounce->{'messagekey'});
	    $spool->move_to_bad($spooled_bounce->{'messagekey'});
	    last;
	}
	## Free zombie sendmail processes
	mail::reaper;
    }
}

# Purge grouped notifications
Site->send_notify_to_listmaster(undef, undef, undef, 1);

Log::do_log('notice', 'bounced exited normally due to signal');
tools::remove_pid(Site->bounced_pidfile, $$);

exit(0);


## When we catch SIGTERM, just change the value of the loop
## variable.
sub sigterm {
    $end = 1;
}
