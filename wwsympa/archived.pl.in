#!--PERL--

# archived.pl - This script does the web archives building for Sympa
# RCS Identication ; $Revision$ ; $Date$ 
#
# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=encoding utf-8

=head1 NAME

archived, archived.pl - Mailing List Archiving Daemon for Sympa

=head1 SYNOPSIS

S<B<archived.pl> [ B<--foreground> ] [ B<--debug> ]>

=head1 DESCRIPTION

B<Archived> is a program which scan permanently the outgoing B<Sympa> spool
and feeds the web archives, converting messages to the HTML format and
linking them. Original mails are also kept (in I<arctxt/> directory> for
later rebuilding of archives.

The HTML conversion is achieved by the means of the B<MHonArc> program.

Archives are accessed via B<wwsympa.fcgi> and B<sympa.pl>,
which proposes access control;
therefore archives should not be located in a public web directory.

=head1 OPTIONS

These programs follow the usual GNU command line syntax,
with long options starting with two dashes (`-').  A summary of
options is included below.

=over 5

=item B<-F>, B<--foreground>

Do not detach TTY.

=item B<-d>, B<--debug>

Run the program in a debug mode.

=item B<-h>, B<--help>

Print this help message.

=back

=head1 FILES

F<--spooldir--/outgoing/> outgoing Sympa directory.

F<--defaultdir--/mhonarc-ressources.tt2> template of MHonArc resource file.

F<--CONFIG--> Sympa configuration file.

F<--piddir--/archived.pid> this file contains the process ID
of F<archived.pl>.

=head1 MORE DOCUMENTATION

The full documentation in HTML and PDF formats can be found in
L<http://www.sympa.org/manual/>.

The mailing lists (with web archives) can be accessed at
L<http://listes.renater.fr/sympa/lists/informatique/sympa>.

=head1 AUTHORS

=over 4

=item Serge Aumont

ComitE<233> RE<233>seau des UniversitE<233>s

=item Olivier SalaE<252>n

ComitE<233> RE<233>seau des UniversitE<233>s

=back

Contact authors at <sympa-authors@listes.renater.fr>

This manual page was initially written by
JE<233>rE<244>me Marant <jerome.marant@IDEALX.org>
for the Debian GNU/Linux system.

=head1 COPYRIGHT

Copyright E<169> 1997,1998,1999,2000,2001 ComitE<233> RE<233>seau des UniversitE<233>s

Copyright E<169> 1997,1998,1999 Institut Pasteur & Christophe Wolfhugel

You may distribute this software under the terms of the GNU General
Public License Version 2 (L<http://www.gnu.org/copyleft/gpl.html>)

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts and no Back-Cover Texts.  A
copy of the license can be found under
L<http://www.gnu.org/licenses/fdl.html>.

=head1 BUGS

Report bugs to Sympa bug tracker.
See L<http://www.sympa.org/tracking>.

=head1 SEE ALSO

L<sympa(8)>, L<bounced(8)>, L<mhonarc(1)>, L<sympa.conf(5)>.

=cut 

use lib '--modulesdir--';
use strict;
use warnings;
use Getopt::Long;
use Digest::MD5;
use Pod::Usage;

use List;
use Message;
use Commands;

my $daemon_name = &Sympa::Log::Syslog::set_daemon($0);
my $ip = $ENV{'REMOTE_HOST'};

## Check options
my %options;
unless (GetOptions(\%main::options, 'debug|d', 'foreground|F', 'help|h')) {
    pod2usage(-exitval => 1, -output => \*STDERR);
}

if ($main::options{'help'}) {
    pod2usage(0);
}

if ($main::options{'debug'}) {
    $main::options{'log_level'} = 2 unless ($main::options{'log_level'});
}

$main::options{'foreground'} = 1 if ($main::options{'debug'});
$main::options{'log_to_stderr'} = 1 if ($main::options{'debug'} || $main::options{'foreground'});

# Load sympa.conf
unless (defined Robot::get_robots()) {
    Sympa::Log::Syslog::fatal_err(
	'Unable to load sympa configuration, file %s has errors.',
	Conf::get_sympa_conf()
    );
}

## Check databse connectivity
unless (&SDM::check_db_connect()) {
    &Sympa::Log::Syslog::fatal_err('Database %s defined in sympa.conf has not the right structure or is unreachable.', Site->db_name);
}

## Put ourselves in background if not in debug mode. 
unless ($main::options{'debug'} || $main::options{'foreground'}) {
   open(STDERR, ">> /dev/null");
   open(STDOUT, ">> /dev/null");
   if (open(TTY, "/dev/tty")) {
      ioctl(TTY, 0x20007471, 0);
      close(TTY);
   }
   setpgrp(0, 0);
   if ((my $child_pid = fork) != 0) {
      print STDOUT "Starting archive daemon, PID $_\n";

      exit(0);
   }
}

## If process is running in foreground, don't write STDERR to a dedicated file
my $options;
$options->{'stderr_to_tty'} = 1 if ($main::options{'foreground'});

## Create and write the PID file
tools::write_pid('archived', $$, $options);
unless ($options->{'stderr_to_tty'}) {
    &tools::direct_stderr_to_file(('pid' => $$));
}

# setting log_level using conf unless it is set by calling option
if ($main::options{'log_level'}) {
    &Sympa::Log::Syslog::set_log_level($main::options{'log_level'});
    &Sympa::Log::Syslog::do_log('info', "Configuration file read, log level set using options : $main::options{'log_level'}"); 
}else{
    &Sympa::Log::Syslog::set_log_level(Site->log_level);
    &Sympa::Log::Syslog::do_log('info', 'Configuration file read, default log level %s',
	Site->log_level); 
}

&Sympa::Log::Syslog::do_openlog(Site->log_facility, Site->log_socket_type, 'archived');

## Set the User ID & Group ID for the process
$( = $) = (getgrnam(Sympa::Constants::GROUP))[2];
$< = $> = (getpwnam(Sympa::Constants::USER))[2];


## Required on FreeBSD to change ALL IDs(effective UID + real UID + saved UID)
&POSIX::setuid((getpwnam(Sympa::Constants::USER))[2]);
&POSIX::setgid((getgrnam(Sympa::Constants::GROUP))[2]);

## Check if the UID has correctly been set (useful on OS X)
unless (($( == (getgrnam(Sympa::Constants::GROUP))[2]) && ($< == (getpwnam(Sympa::Constants::USER))[2])) {
    Sympa::Log::Syslog::fatal_err("Failed to change process user ID and group ID. Note that on some OS Perl scripts can't change their real UID. In such circumstances Sympa should be run via sudo.");
}

## Sets the UMASK
umask(oct(Site->umask));

foreach my $robot (@{Robot::get_robots()}) {
    my $arc_dir = $robot->arc_path;
    ## Create arc_path if required
    if ($arc_dir) {
	unless (&directory_check($arc_dir)) {
	    &Sympa::Log::Syslog::do_log('err','No vailable directory to store archives. Exiting.');
	    exit -1;
	}
    }else{
	Sympa::Log::Syslog::do_log('err',
	    'Robot %s has no archives directory. Check arc_path parameter in this robot.conf and in sympa.conf.'
	);
	exit -1;
    }
}

## Change to list root
unless (chdir(Site->home)) {
    &Sympa::Log::Syslog::do_log('err','unable to change directory');
    exit (-1);
}

Language::SetLang(Site->lang || 'en');

&Sympa::Log::Syslog::do_log('notice', "archived %s Started", Sympa::Constants::VERSION);

## Catch SIGTERM, in order to exit cleanly, whenever possible.
$SIG{'TERM'} = 'sigterm';
my $end = 0;

my $spoolarchive = new SympaspoolClassic ('outgoing');

## infinite loop scanning the queue (unless a sig TERM is received
while (!$end) {

    &List::init_list_cache();
    sleep 1; 
    my $item = $spoolarchive->next;

    next unless $item;

    my @orders = split(/\n/,$item->{'messageasstring'} );
    
    unless($item->{'messageasstring'}) {
	$spoolarchive->move_to_bad($item->{'messagekey'});
	next;
    }
    
    if ($orders[0] =~ /^rebuild\s*$/ ) {
	&Sympa::Log::Syslog::do_log('debug',"rebuild found ");
	if ($item->{'list'} && $item->{'robot'}) {	
	    &rebuild($item->{'list'}.'@'.$item->{'robot'});
	    $spoolarchive->remove_message($item->{'messagekey'});
	}else{
	   Sympa::Log::Syslog::do_log('err', "unable to rebuild archive for unknown list/robot.Move to bad");
	    $spoolarchive->move_to_bad($item->{'messagekey'});
	    next;
	}
    }elsif($orders[0]  =~ /^remove\.(\d\d\d\d\-\d\d)\.\d+$/ ) {
	my $yyyymm = $1;
	shift @orders;
	&Sympa::Log::Syslog::do_log('debug',"removed found ");
	unless($item->{'list'} && $item->{'robot'}){
	   Sympa::Log::Syslog::do_log('err', "unable to remove messages from archive for unknown list/robot.Move to bad");
	    $spoolarchive->move_to_bad($item->{'messagekey'});
	    next;
	}
	my $listadress = $item->{'list'}.'@'.$item->{'robot'}	;

	my $arclistdir = $listadress.'.'.$yyyymm;
	my $arcpath = Site->arc_path . "/$listadress/$yyyymm";
	
	Sympa::Log::Syslog::do_log('debug',"start remove process :listadress :'$listadress' arclistdir '$arclistdir' arcpath '$arcpath'  yyyymm '$yyyymm'");
	    
	my $list;
	unless ($list = new List ($listadress)) {
	    Sympa::Log::Syslog::do_log('err', 'remove: unknown list %s', $listadress);
	    $spoolarchive->move_to_bad($item->{'messagekey'});
	    next;
	}
&Sympa::Log::Syslog::do_log('debug',"remove found : for $arclistdir");
	
	my $email_regexp = &tools::get_regexp('email');

	foreach my $order (@orders) { 
	    unless($order =~ /(.*)\|\|($email_regexp)/){
		Sympa::Log::Syslog::do_log('err',
		    'Ignoring remove_order "%s", unrecognized format',
		    $order
		);
		next;
	    }
	    my $msgid = $1;
	    my $sender = $2;
	    
	    chomp 	$msgid ;
	    if ($msgid =~ /NO-ID-FOUND\.mhonarc\.org/) {
		Sympa::Log::Syslog::do_log('err', 'No message ID found');
		next;
	    } 
	    
	    my $file;
	    unless ($file = &Archive::search_msgid("$arcpath/arctxt",$msgid)){
	&Sympa::Log::Syslog::do_log('err','No message with message-id %s found in %s/arctxt',$msgid,$arcpath);
		next;
	    }
	    
	    unless ($list->am_i('privileged_owner',$sender)|| $list->am_i('owner',$sender)||$list->am_i('editor', $sender)||&List::is_listmaster($sender,$list->{'domain'} )){
		# if not list owner or list editor or listmaster,n check if sender of remove order is sender of the message to remove
		
		my $new_message;
		unless ($new_message = Message->new({
		    'file' => "$arcpath/arctxt/$file",
		    'noxsympato' => 'noxsympato'
		})) {
		    Sympa::Log::Syslog::do_log('err',
			'Unable to load new message %s/arctxt/%s',
			$arcpath, $file
		    );
		    next;
		}
		my $messagesender = lc($new_message->get_sender_email || '');
		
		unless ($sender eq $messagesender) {
		    Sympa::Log::Syslog::do_log('err',
			'Remove command by unauthorized sender'
		    );
		    next;
		}
	    }
	    # this point : requested command is from a authorized personn (message sender or list admin or listmaster	    
	    &remove($arclistdir,$msgid);
	    
	    my $url_dir = $list->dir.'/urlized/'.$msgid;
	    &tools::remove_dir ($url_dir);
	    
	    unless (-d "$arcpath/deleted"){
		unless (mkdir ("$arcpath/deleted",0777)) {
		   &Sympa::Log::Syslog::do_log('info',"remove_arc: unable to create $arcpath/deleted : $!");
		    last;
		}
	    }
	    
	    unless (rename "$arcpath/arctxt/$file", "$arcpath/deleted/$file") {
		Sympa::Log::Syslog::do_log('info',
		    'Unable to rename message %s/arctxt/%s',
		    $arcpath, $file
		);
		next;
	    }
	    
	    # remove directory if empty arctxt
	    unless (opendir (DIR,"$arcpath/arctxt")) {
		Sympa::Log::Syslog::do_log('info', 'Unable to open dir %s/arctxt', $arcpath);
		next;
	    }
	    my @files = grep(/^\d+$/, readdir( DIR ));
	    closedir (DIR);
	    if ($#files == -1) {
		&tools::remove_dir ($arcpath); 
	    }
	}
	$spoolarchive->remove_message($item->{'messagekey'});
    }else{
	Sympa::Log::Syslog::do_log('notice',
	    'Archiving message %s for list %s@%s',
	    $item->{'messagekey'}, $item->{'list'},$item->{'robot'});
	unless (mail2arc ($item)) {
	    $spoolarchive->move_to_bad($item->{'messagekey'});
	    Sympa::Log::Syslog::do_log('err',
		'archiving_failed for message %s', $item->{'messagekey'});
	    unless ($item->{'robot_object'} and
		    $item->{'robot_object'}->send_notify_to_listmaster(
			'archiving_failed') or
		    ! $item->{'robot_object'} and
		    Site->send_notify_to_listmaster('archiving_failed')
	    ) {
		&Sympa::Log::Syslog::do_log('notice',"Unable to send notify 'archiving_failed' to listmaster");
	    }
	}
	unless ($spoolarchive->remove_message($item->{'messagekey'})) {
	    Sympa::Log::Syslog::do_log ('err',
		"Couldn't remove message in archive spool %s. exiting to prevent infinite loop",
		$item->{'messagekey'}
	    );
	    last;
	}
    }
}

# Purge grouped notifications
Site->send_notify_to_listmaster(undef, undef, undef, 1);

## Free zombie sendmail processes
&mail::reaper;

&Sympa::Log::Syslog::do_log('notice', 'archived exited normally due to signal');
tools::remove_pid('archived', $$);

exit(0);

=begin comment

=head1 SUBFUNCTIONS 

This is the description of the subfunctions contained by archived.pl.

=head2 sub sigterm()

Switches the loop control variable $end value to 1 when SIGTERM signal is caught.

=head3 Arguments 

=over 

=item * I<none> 

=back 

=head3 Return 

=over 

=item * I<none> 

=back 

=head3 Calls 

=over 

=item * none

=back 

=cut 

## When we catch SIGTERM, just change the value of the loop
## variable.
sub sigterm {
    $end = 1;
}

=head2 sub remove(STRING $adrlist, STRING $msgid)

Removes the message having the identifier $msgid from the list named $adrlist.

=head3 Arguments 

=over 

=item * I<$adrlist>, a character string containing the list name.

=item * I<$msgid> , a character string containing the message identifier.

=back 

=head3 Return 

=over 

=item * I<none> 

=back 

=head3 Calls 

=over 

=item * Sympa::Log::Syslog::db_log

=item * Sympa::Log::Syslog::do_log

=back 

=cut 

sub remove {
    my $adrlist = shift;
    my $msgid = shift;
    my $robot = shift;

   &Sympa::Log::Syslog::do_log ('debug',"remove ($adrlist, $msgid)");
    my $arc ;

    if ($adrlist =~ /^(.*)\.(\d{4}-\d{2})$/) {
	$adrlist = $1;
        $arc = $2;
    }

    &Sympa::Log::Syslog::do_log('notice', 'Removing %s in list %s section %s',
	$msgid, $adrlist, $arc);

    &Sympa::Log::Syslog::db_stat_log({'robot' => $robot, 'list' => $adrlist, 'operation' => 'remove archive', 'parameter' => '', 'mail' => 'test@cru.fr','client' => $ip, 'daemon' => $daemon_name});

    unless(&Sympa::Log::Syslog::db_log({'robot' => $robot,'list' => $adrlist,'action' => 'remove','parameters' => $msgid.','.$adrlist,'target_email' => '','msg_id' => $msgid,'status' => 'succes','error_type' => '','user_email' =>'','client' => $ip,'daemon' => $daemon_name})){
	&Sympa::Log::Syslog::do_log('error','archived::remove: unable to log event');
    }
    my $arcpath = &Conf::get_robot_conf($robot,'arc_path');
    $arc =~ /^(\d{4})-(\d{2})$/ ;
    my $yyyy = $1 ;
    my $mm = $2 ;
    
    $msgid =~ s/\$/\\\$/g;
    system Site->mhonarc . "  -outdir $arcpath/$adrlist/$yyyy-$mm -rmm $msgid";
}

=head2 sub rebuild(STRING $adrlist)

Rebuilds archives for the list the name of which is given in the argument $adrlist.

=head3 Arguments 

=over 

=item * I<$adrlist>, a character string containing the name of the list the archives of which we want to rebuild.

=back 

=head3 Return 

=over 

=item * I<undef> if something goes wrong.

=back 

=head3 Calls 

=over 

=item * Archive::get_tag

=item * set_hidden_mode

=item * unset_hidden_mode

=item * List::new

=item * Sympa::Log::Syslog::do_log

=item * tools::get_filename

=item * tools::remove_dir

=back 

=cut 

sub rebuild {

    my $adrlist = shift;
    my $arc ;

    &Sympa::Log::Syslog::do_log ('debug2',"rebuild ($adrlist)");

    if ($adrlist =~ /^(.*)\.(\d{4}-\d{2})$/) {
	$adrlist = $1;
        $arc = $2;
    }

    my ($listname, $hostname);
    if ($adrlist =~ /^(.*)\@(.*)$/) {
	$listname = $1;
	$hostname = $2;
    }else {
	&Sympa::Log::Syslog::do_log('err',"Match of list address '$adrlist' failed");
	       return undef;
    }

    my $list = new List($listname, $hostname);
    my $robot = $list->robot;
    my $arcpath = $robot->arc_path;
    my $tag = Archive::get_tag($list);
    Sympa::Log::Syslog::do_log('debug3', "Rebuilding %s archive (%s)", $adrlist, $2);

    my $mhonarc_ressources = $list->get_etc_filename('mhonarc-ressources.tt2');

    if ($list->web_archive_spam_protection ne 'none' and
	$list->web_archive_spam_protection ne 'cookie') {
	&set_hidden_mode($tag);
    }else {
	&unset_hidden_mode();
    }

    &Sympa::Log::Syslog::do_log('notice', "Rebuilding %s with M2H_ADDRESSMODIFYCODE : %s",
	$arc, $ENV{'M2H_ADDRESSMODIFYCODE'});

    if ($arc) {
        &Sympa::Log::Syslog::do_log('notice',"Rebuilding %s of %s archive", $arc, $adrlist);
	$arc =~ /^(\d{4})-(\d{2})$/ ;
	my $yyyy = $1 ;
	my $mm = $2 ;

	# remove empty directory
	my $arcdir = $arcpath.'/'.$adrlist.'/'.$yyyy.'-'.$mm ;
	my $arctxt = $arcdir.'/arctxt' ;
	if (opendir (DIR,$arctxt)) {
	    my @files = (grep(/^\d+$/,(readdir DIR )));
	    close (DIR);
	    if ($#files == -1) { 
		&Sympa::Log::Syslog::do_log('notice', "Removing empty directory %s", $arcdir);
		&tools::remove_dir ($arcdir);
		next ;	 
	    } 

	    ## index file was removed ; recreate it
	    my $index = $files[$#files];
	    &save_idx($arcdir.'/index', $index+1);
	}
	
	## recreate index file if needed
	unless (-f $arcdir.'/index') {
	    &create_idx($arcdir);
	}

	## Remove .mhonarc.db
	unlink $arcpath.'/'.$adrlist.'/'.$yyyy.'-'.$mm.'/.mhonarc.db';
	
	## Remove existing HTML files
	opendir HTML, "$arcpath/$adrlist/$yyyy-$mm";
	
	## Skip arctxt/ . and ..
	foreach my $html_file (grep !/^arctxt$|^index$|\.+$/, readdir(HTML)) {
	    unlink $arcpath.'/'.$adrlist.'/'.$yyyy.'-'.$mm.'/'.$html_file;
	}	
	closedir HTML;

	my $arcs_dir = Archive::clean_archive_directory(
	    $robot, "/$adrlist/$arc/arctxt");
	my $dir_to_rebuild = $arcs_dir->{'dir_to_rebuild'} if($arcs_dir);

	my $cmd = sprintf '%s -modifybodyaddresses -addressmodifycode \'%s\' -rcfile %s -outdir %s/%s/%s-%s  -definevars \"listname=\'%s\' hostname=%s yyyy=%s mois=%s yyyymm=%s-%s wdir=%s base=%s/arc tag=%s\" -umask %s %s',
	    Site->mhonarc, $ENV{'M2H_ADDRESSMODIFYCODE'},
	    $mhonarc_ressources, $arcpath, $adrlist, $yyyy, $mm,
	    $listname, $hostname, $yyyy, $mm, $yyyy, $mm, $arcpath,
	    $robot->wwsympa_url, $tag, Site->umask, $dir_to_rebuild;

	&Sympa::Log::Syslog::do_log('debug',"System call : $cmd");
	my $exitcode = system($cmd);
	$exitcode = $exitcode >> 8;

	# Delete temporary directory containing files with escaped HTML.
	if ($arcs_dir && -d $arcs_dir->{'cleaned_dir'}) {
	    &tools::del_dir($arcs_dir->{'cleaned_dir'});
	}
	
	## Remove lock if required
	if ($exitcode == 75) {
	    &Sympa::Log::Syslog::do_log('notice', 'Removing lock directory %s', $arcpath.'/'.$adrlist.'/'.$arc.'/.mhonarc.lck');
	    rmdir $arcpath.'/'.$adrlist.'/'.$arc.'/.mhonarc.lck';

	    $exitcode= system($cmd);
	    $exitcode = $exitcode >> 8;	    
	}

	if ($exitcode) {
	    &Sympa::Log::Syslog::do_log('err',"Command $cmd failed with exit code $exitcode");
	}
    }else{
        &Sympa::Log::Syslog::do_log('notice',"Rebuilding $adrlist archive completely");

	if (!opendir(DIR, "$arcpath/$adrlist" )) {
	    if (-d "$arcpath/$adrlist") {
		&Sympa::Log::Syslog::do_log('err',"unable to open $arcpath/$adrlist to rebuild archive");
		return undef;
	    }else{
		&Sympa::Log::Syslog::do_log('err',"No archives found for list $adrlist (looked for in $arcpath/$adrlist)");
		return 0;
	    }
	}
	my @archives = (grep (/^\d{4}-\d{2}/, readdir(DIR)));
	close DIR ; 

	foreach my $arc (@archives) {
	    $arc =~ /^(\d{4})-(\d{2})$/ ;
	    my $yyyy = $1 ;
	    my $mm = $2 ;

	    my $arcdir = $arcpath.'/'.$adrlist.'/'.$yyyy.'-'.$mm;

	    ## Remove .mhonarc.db
	    unlink $arcdir.'/.mhonarc.db';
	    
	    ## Remove existing HTML files
	    opendir HTML, $arcdir;
	    ## Skip arctxt/ . and ..
	    foreach my $html_file (grep !/^arctxt$|^index$|\.+$/, readdir(HTML)) {
		unlink $arcdir.'/'.$html_file;
	    }	
	    closedir HTML;
	    my $dir_to_rebuild = $robot->arc_path . "/$adrlist/$arc/arctxt";
	    my $arcs_dir = Archive::clean_archive_directory(
		$robot, "/$adrlist/$arc/arctxt");
	    if($arcs_dir) {
		$dir_to_rebuild = $arcs_dir->{'dir_to_rebuild'};
	    }
	    ## recreate index file if needed
	    unless (-f $arcdir.'/index') {
		&create_idx($arcdir);
	    }

	    my $cmd = sprintf '%s -modifybodyaddresses -addressmodifycode \'%s\' -rcfile %s -outdir %s -definevars \"listname=%s hostname=%s yyyy=%s mois=%s yyyymm=%s-%s wdir=%s base=%s/arc tag=%s\" -umask %s %s',
		Site->mhonarc, $ENV{'M2H_ADDRESSMODIFYCODE'},
		$mhonarc_ressources, $arcdir, $listname, $hostname,
		$yyyy, $mm, $yyyy, $mm, $arcpath, $robot->wwsympa_url,
		$tag, Site->umask, $dir_to_rebuild;
	    my $exitcode = system($cmd);
	    $exitcode = $exitcode >> 8;

	    # Delete temporary directory containing files with escaped HTML.
	    if ($arcs_dir && -d $arcs_dir->{'cleaned_dir'}) {
		&tools::del_dir($arcs_dir->{'cleaned_dir'});
	    }

	    ## Remove lock if required
	    if ($exitcode == 75) {
		&Sympa::Log::Syslog::do_log('notice', 'Removing lock directory %s', $arcdir.'/.mhonarc.lck');
		rmdir $arcdir.'/.mhonarc.lck';
		
		$exitcode = system($cmd);
		$exitcode = $exitcode >> 8;
	    }
	    if ($exitcode) {
		&Sympa::Log::Syslog::do_log('err',"Command $cmd failed with exit code $exitcode");
	    }
	    
	}
    }
}

=head2 sub mail2arc(STRING $file,STRING $listname,STRING $hostname,STRING $yyyy,STRING $mm,STRING $dd,STRING $hh,STRING $min,STRING $ss)

Archives one message into one list archives directory.

=head3 Arguments 

=over 

=item * I<$file>: a character string containing the message filename.

=item * I<$listname>: a character string containing the name of the list in which to archive the message

=item * I<$hostname>: a character string containing the name of the virtual robot hosting the list.

=item * I<$yyyy>: a character string containing the year of the date when the message is archived (i.e. now)

=item * I<$mm>: a character string containing the month of the date when the message is archived (i.e. now)

=item * I<$dd>: a character string containing the day of the date when the message is archived (i.e. now)

=item * I<$hh>: a character string containing the hour of the date when the message is archived (i.e. now)

=item * I<$min>: a character string containing the minute of the date when the message is archived (i.e. now)

=item * I<$ss>: a character string containing the second of the date when the message is archived (i.e. now)

=back 

=head3 Return 

=over 

=item * I<undef> if something goes wrong.

=back 

=head3 Calls 

=over 

=item * Archive::get_tag

=item * save_idx

=item * set_hidden_mode

=item * unset_hidden_mode

=item * List::get_arc_size

=item * List::get_list_id

=item * List::new

=item * List::send_notify_to_owner

=item * Sympa::Log::Syslog::do_log

=item * tools::get_filename

=item * tools::remove_dir

=back 

=cut 


sub mail2arc {

    my $message_in_spool = shift;

    my $list = $message_in_spool->{'list_object'};
    my $robot = $message_in_spool->{'robot_object'};
    my ($yyyy, $mm, $dd, $hh, $min, $ss) = @_;
    my $txtdate = &tools::epoch2yyyymmjj_hhmmss ($message_in_spool->{'date'});
    if ($txtdate =~ /(\d\d\d\d)\-(\d\d)\-(\d\d)\s*(\d\d)\:(\d\d)/){
	$yyyy = $1; $mm = $2; $dd = $3; $hh = $4; $min = $5; $ss = $6;
    }else{
	Sympa::Log::Syslog::do_log('err',"could not scan date");
	return undef;
    }

    my $newfile;

    my $arcpath = $robot->arc_path;

    unless (ref $list and $list->isa('List')) {
	Sympa::Log::Syslog::do_log('err', 'Unknown list %s', $message_in_spool->{'list'});
	return undef;
    }

    my $tag = Archive::get_tag($list);

    if ($list->web_archive_spam_protection ne 'none' and
	$list->web_archive_spam_protection ne 'cookie') {
	set_hidden_mode($tag);
    }else {
	unset_hidden_mode();
    } 

    if (Site->custom_archiver) {
	my $file = Site->tmpdir . "/arc." . $list->get_id .
	    $message_in_spool->{'messagekey'} ;
	open DUMP, '>', $file;
	print DUMP $message_in_spool->{'messageasstring'};	
	my $cmd = sprintf '%s --list=%s --file=%s', Site->custom_archiver,
	    $list->get_id, $file;
	`$cmd`;
	return 1;
    }else{
	my $basedir = $arcpath . '/' . $list->get_id;
	
	if (! -d $basedir) {
	    unless (mkdir $basedir, 0775) {
		Sympa::Log::Syslog::do_log('err', 'Cannot create directory %s', $basedir);
		unless ($robot->send_notify_to_listmaster(
		    'unable_to_create_dir', {'dir' => "$basedir"}
		)) {
		    Sympa::Log::Syslog::do_log('notice', 'Unable to send notify "unable_to_create_dir" to listmaster');
		}
	    }
	}
	
	## Check quota
	if ($list->web_archive->{'quota'}) {
	    my $used = $list->get_arc_size("$arcpath") ;
	    
	    if ($used >= $list->web_archive->{'quota'} * 1024){
		Sympa::Log::Syslog::do_log('err',
		    'archived::mail2arc : web_arc Quota exceeded for list %s',
		    $list);
		unless ($list->send_notify_to_owner('arc_quota_exceeded',{'size' => $used})) {
		    Sympa::Log::Syslog::do_log('notice',
			'Unable to send notify "arc_quota_exceeded" to %s owner', $list);
		}
		return undef;
	    }
	    if ($used >= ($list->web_archive->{'quota'} * 1024 * 0.95)){
		Sympa::Log::Syslog::do_log('err',
		    'archived::mail2arc : web_arc Quota exceeded for list %s',
		    $list);
		unless ($list->send_notify_to_owner('arc_quota_95',{'size' => $used,
								    'rate' => int($used * 100 / ($list->web_archive->{'quota'} * 1024 ))})) {
		    Sympa::Log::Syslog::do_log('notice',
			'Unable to send notify "arc_quota_95" to %s owner',
			$list);	
		}
	    }
	}
	
	my $monthdir = $basedir."/$yyyy-$mm";
	
	if (! -d $monthdir) {
	    unless (mkdir ($monthdir, 0775)) {
		Sympa::Log::Syslog::do_log('err', 'Cannot create directory %s', $monthdir);
		return undef;
	    }
	    
	    if ($list->web_archive->{'max_month'}){
		# maybe need to remove some old archive
		if (opendir DIR,$arcpath.'/'.$list->get_id) {
		    my @archives = (sort {$a cmp $b} grep (/^\d{4}-\d{2}/, readdir(DIR)));	
		    closedir DIR;
		    my $nb_month = $#archives + 1 ;
		    my $i = 0 ;
		    while ( $nb_month >  $list->web_archive->{'max_month'}) {
			Sympa::Log::Syslog::do_log('info', 'removing  %s/%s/%s',
			    $arcpath, $list->get_id, $archives[$i]);
			tools::remove_dir($arcpath.'/'.$list->get_id.'/'.$archives[$i]);
			$i ++; $nb_month --;		    
		    }
		}
	    }
	}
	
	my $arctxtdir = $monthdir."/arctxt";
	
	if (! -d $arctxtdir) {
	    unless (mkdir ($arctxtdir, 0775)) {
		Sympa::Log::Syslog::do_log('err', 'Cannot create directory %s', $arctxtdir);
		return undef;
	    }
	}
	
	## fetch next message number in archive arctxt .
	if( -f $monthdir."/index" ){
	    open(IDX, '<', "$monthdir/index") or &Sympa::Log::Syslog::fatal_err("couldn't read index for %s", $list->name);
	    $newfile = <IDX>;
	    chomp($newfile);
	    $newfile++;
	    close IDX;
	}else{
	    ## recreate index file if needed and update it
	    $newfile = create_idx($monthdir) + 1;
	}

	# savee arctxt dump of original message.
	my $file = $monthdir.'/arctxt/'.$newfile ;
	my $output = Site->tmpdir.'/arc'.$newfile;
	open DUMP, '>', $file;
	print DUMP $message_in_spool->{'messageasstring'};
	close DUMP;

	
	# prepare a temporary file with clean message content (htlm parts are cleaned) 
	my $safe = Archive::clean_archived_message(
	    $robot, $file, $output
	);
	unless ($safe) {
	    Sympa::Log::Syslog::do_log('err',"Could not clean message, ignoring it");
	    return undef;
	}

	my $mhonarc_ressources = $list->get_etc_filename('mhonarc-ressources.tt2');
	
	# call mhonarc on cleaned message source to make clean htlm view of message
	my $cmd = sprintf
	    '%s -add -modifybodyaddresses -addressmodifycode \'%s\' -rcfile %s -outdir %s -definevars "listname=\'%s\' hostname=%s yyyy=%s mois=%s yyyymm=%s-%s wdir=%s base=%s/arc tag=%s" -umask %s < %s',
	    Site->mhonarc, $ENV{'M2H_ADDRESSMODIFYCODE'},
	    $mhonarc_ressources, $monthdir, $list->name, $robot->domain,
	    $yyyy, $mm, $yyyy, $mm, $robot->arc_path, $robot->wwsympa_url,
	    $tag, Site->umask, $output;
	
	my $exitcode = system($cmd);
	$exitcode = $exitcode >> 8;
	
	## Remove lock if required
	if ($exitcode == 75) {
	    Sympa::Log::Syslog::do_log('notice', 'Removing lock directory %s', $monthdir.'/.mhonarc.lck');
	    rmdir $monthdir.'/.mhonarc.lck';
	    
	    $exitcode = system($cmd);
	    $exitcode = $exitcode >> 8;	    
	}
	if ($exitcode) {
	    Sympa::Log::Syslog::do_log('err',"Command $cmd failed with exit code $exitcode");
	    return undef;
	}
	
	save_idx("$monthdir/index",$newfile);
    }
    return 1;
}

=head2 sub set_hidden_mode(STRING $tag)

Sets the value of $ENV{'M2H_ADDRESSMODIFYCODE'} and $ENV{'M2H_MODIFYBODYADDRESSES'}

=head3 Arguments 

=over 

=item * I<$tag> a character string (containing the result of get_tag($list))

=back 

=head3 Return 

=over 

=item * I<none> 

=back 

=head3 Calls 

=over 

=item * none

=back 

=cut 

sub set_hidden_mode {
    ## tag is used as variable elements in tags to prevent message contents to
    ## be parsed
    my $tag = shift;

    ## $ENV{'M2H_MODIFYBODYADDRESSES'} à positionner si le corps du message
    ## est parse
    $ENV{'M2H_ADDRESSMODIFYCODE'} = "s|^([^\@]+)\@([^\@]+)\$|\($tag\%hidden_head\%$tag\)\$1\($tag\%hidden_at\%$tag\)\$2\($tag\%hidden_end\%$tag\)|g";
    $ENV{'M2H_MODIFYBODYADDRESSES'} = 1;
}

=head2 sub unset_hidden_mode()

Empties $ENV{'M2H_ADDRESSMODIFYCODE'}.

=head3 Arguments 

=over 

=item * I<none> 

=back 

=head3 Return 

=over 

=item * I<none> 

=back 

=head3 Calls 

=over 

=item * none

=back 

=cut 

sub unset_hidden_mode {
    ## Be careful, the .mhonarc.db file keeps track of previous
    ## M2H_ADDRESSMODIFYCODE setup
    $ENV{'M2H_ADDRESSMODIFYCODE'} = '';
}

=head2 sub save_idx(STRING $index,STRING $lst)

Saves the archives index file

=head3 Arguments 

=over 

=item * I<$index>, a string corresponding to the file name to which save an index.

=item * I<$lst>, a character string

=back 

=head3 Return 

=over 

=item * I<none> 

=back 

=head3 Calls 

=over 

=item * none

=back 

=cut 

sub save_idx {
    my ($index,$lst) = @_;
#    &Sympa::Log::Syslog::do_log('notice', "save_idx($index,$lst)");
    
    open(INDEXF,">$index") || &Sympa::Log::Syslog::fatal_err("couldn't overwrite index $index");
    print INDEXF "$lst\n";
    close INDEXF;
    #   &Sympa::Log::Syslog::do_log('debug',"last arc entry for $index is $lst");
}

## Create the 'index' file for one archive subdir
sub create_idx {
    my $arc_dir = shift; ## corresponds to the yyyy-mm directory

    my $arc_txt_dir = $arc_dir.'/arctxt';

    unless (opendir (DIR, $arc_txt_dir)) {
	&Sympa::Log::Syslog::do_log('err', "Failed to open directory '$arc_txt_dir'");
	return undef;
    }

    my @files = (sort { $a <=> $b;}  grep(/^\d+$/,(readdir DIR ))) ;
    my $index = $files[$#files];
    &save_idx($arc_dir.'/index', $index);

    closedir DIR;

    return $index;
}

=head2 sub get_tag(STRING $listname)

I<OBSOLETED>.
Use L<Archive/get_tag>.

=cut 

sub get_tag {
    my $listname = shift;
    
    return (substr(Digest::MD5::md5_hex(join('/', Site->cookie, $listname)), -10)) ;
}


# Checks if directory exists and we have write and read accec to it.
sub directory_check {
    my $dir = shift;
    unless (-d $dir) {
	printf STDERR "Creating missing %s directory\n", $dir;
	unless (mkdir $dir, 0775) {
	    &Sympa::Log::Syslog::do_log('err','Unable to create directory %s',$dir);
	    return undef;
	}
	unless (&tools::set_file_rights(file => $dir,
					 user  => Sympa::Constants::USER,
					 group => Sympa::Constants::GROUP,
					 mode  => 0775,
					 ))
	{
	    &Sympa::Log::Syslog::do_log('err','Unable to set rights on %s',$dir);
	    return undef;
	}
    }
    unless ((-r $dir) && (-w $dir)) {
	&Sympa::Log::Syslog::do_log('err', 'Unsufficient access to %s directory', $dir);
	return undef;
    }
    return 1;
}

=head1 AUTHORS 

=over 

=item * Serge Aumont <sa AT cru.fr> 

=item * Olivier SalaE<252>n <os AT cru.fr> 

=back 

=cut 
